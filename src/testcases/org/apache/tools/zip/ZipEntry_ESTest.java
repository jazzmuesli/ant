/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:59:07 GMT 2020
 */

package org.apache.tools.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.apache.tools.zip.ZipEntry;
import org.apache.tools.zip.ZipExtraField;
import org.apache.tools.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZipEntry_ESTest extends ZipEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("java.util.zip.ZipEntry");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals("java.util.zip.ZipEntry", zipEntry0.getName());
      assertEquals("java.util.zip.ZipEntry", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[0];
      zipEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals(0, zipExtraFieldArray0.length);
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals("java.util.zip.ZipEntry", zipEntry0.getName());
      assertEquals("java.util.zip.ZipEntry", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("+]1'',BZ2b\u0001cS=?Tk");
      assertNotNull(zipEntry0);
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("+]1'',BZ2b\u0001cS=?Tk", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals("+]1'',BZ2b\u0001cS=?Tk", zipEntry0.getName());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      
      zipEntry0.setInternalAttributes((-3004));
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("+]1'',BZ2b\u0001cS=?Tk", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals("+]1'',BZ2b\u0001cS=?Tk", zipEntry0.getName());
      assertEquals((-3004), zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      
      int int0 = zipEntry0.getInternalAttributes();
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("+]1'',BZ2b\u0001cS=?Tk", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals("+]1'',BZ2b\u0001cS=?Tk", zipEntry0.getName());
      assertEquals((-3004), zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-3004), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getPlatform());
      
      zipEntry0.setUnixMode(0);
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals(1L, zipEntry0.getExternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals(3, zipEntry0.getPlatform());
      assertFalse(zipEntry0.isDirectory());
      
      long long0 = zipEntry0.getExternalAttributes();
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals(1L, zipEntry0.getExternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals(3, zipEntry0.getPlatform());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("/486?LGdf|*==q&D");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      
      zipEntry0.setComprSize(0L);
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0L, zipEntry0.getCompressedSize());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      
      long long0 = zipEntry0.getCompressedSize();
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0L, zipEntry0.getCompressedSize());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getPlatform());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      assertEquals("", zipEntry0.getName());
      
      zipEntry0.setCompressedSize(532L);
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(532L, zipEntry0.getCompressedSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getPlatform());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      assertEquals("", zipEntry0.getName());
      
      long long0 = zipEntry0.getCompressedSize();
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(532L, zipEntry0.getCompressedSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getPlatform());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      assertEquals("", zipEntry0.getName());
      assertEquals(532L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("l");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals("l", zipEntry0.getName());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("l", zipEntry0.toString());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[2];
      ZipShort zipShort0 = mock(ZipShort.class, new ViolatedAssumptionAnswer());
      doReturn((-624)).when(zipShort0).getValue();
      ZipShort zipShort1 = mock(ZipShort.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(zipShort1).getValue();
      ZipExtraField zipExtraField0 = mock(ZipExtraField.class, new ViolatedAssumptionAnswer());
      doReturn(zipShort0, zipShort1).when(zipExtraField0).getLocalFileDataLength();
      zipExtraFieldArray0[0] = zipExtraField0;
      zipExtraFieldArray0[1] = zipExtraField0;
      // Undeclared exception!
      try { 
        zipEntry0.setExtraFields(zipExtraFieldArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("", zipEntry0.getName());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      
      byte[] byteArray0 = new byte[2];
      try { 
        zipEntry0.setExtra(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // data starting at 0 is in unknown format
         //
         verifyException("org.apache.tools.zip.ZipEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipEntry zipEntry0 = null;
      try {
        zipEntry0 = new ZipEntry((ZipEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ZipEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipEntry zipEntry0 = null;
      try {
        zipEntry0 = new ZipEntry((java.util.zip.ZipEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ZipEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry(" instead of ");
      assertNotNull(zipEntry0);
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(" instead of ", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(" instead of ", zipEntry0.getName());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      
      ZipEntry zipEntry1 = null;
      try {
        zipEntry1 = new ZipEntry((java.util.zip.ZipEntry) zipEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid compression method
         //
         verifyException("java.util.zip.ZipEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipEntry zipEntry0 = null;
      try {
        zipEntry0 = new ZipEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertFalse(zipEntry0.isDirectory());
      assertEquals((-1), zipEntry0.getMethod());
      assertNull(zipEntry0.getComment());
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
      // Undeclared exception!
      try { 
        zipEntry0.setExtraFields(zipExtraFieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals("", zipEntry0.toString());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      assertFalse(zipEntry0.isDirectory());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals("", zipEntry0.getName());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      
      int int0 = zipEntry0.getInternalAttributes();
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals("", zipEntry0.toString());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      assertFalse(zipEntry0.isDirectory());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals("", zipEntry0.getName());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry(" instead of ");
      assertNotNull(zipEntry0);
      assertEquals(" instead of ", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(" instead of ", zipEntry0.getName());
      assertNull(zipEntry0.getComment());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      
      zipEntry0.setExternalAttributes(1L);
      assertEquals(" instead of ", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(1L, zipEntry0.getExternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(" instead of ", zipEntry0.getName());
      assertNull(zipEntry0.getComment());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("", zipEntry0.getName());
      assertEquals(0, zipEntry0.getInternalAttributes());
      
      ZipExtraField[] zipExtraFieldArray0 = zipEntry0.getExtraFields();
      assertEquals(0, zipExtraFieldArray0.length);
      assertNotNull(zipExtraFieldArray0);
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("", zipEntry0.getName());
      assertEquals(0, zipEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("/486?LGdf|*==q&D");
      assertNotNull(zipEntry0);
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      assertFalse(zipEntry0.isDirectory());
      
      long long0 = zipEntry0.getCompressedSize();
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      assertFalse(zipEntry0.isDirectory());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("/486?LGdf|*==q&D");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      
      zipEntry0.setExtra();
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      
      byte[] byteArray0 = zipEntry0.getLocalFileDataExtra();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("/486?LGdf|*==q&D");
      assertNotNull(zipEntry0);
      assertNull(zipEntry0.getComment());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      
      byte[] byteArray0 = zipEntry0.getLocalFileDataExtra();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertNull(zipEntry0.getComment());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1L), zipEntry0.getCrc());
      assertNull(zipEntry0.getComment());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertFalse(zipEntry0.isDirectory());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      
      ZipShort zipShort0 = mock(ZipShort.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        zipEntry0.removeExtraField(zipShort0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ZipEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("/486?LGdf|*==q&D");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.toString());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals("/486?LGdf|*==q&D", zipEntry0.getName());
      
      ZipShort zipShort0 = mock(ZipShort.class, new ViolatedAssumptionAnswer());
      ZipShort zipShort1 = mock(ZipShort.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(zipShort1).getValue();
      ZipExtraField zipExtraField0 = mock(ZipExtraField.class, new ViolatedAssumptionAnswer());
      doReturn(zipShort0, (ZipShort) null).when(zipExtraField0).getHeaderId();
      doReturn(zipShort1).when(zipExtraField0).getLocalFileDataLength();
      // Undeclared exception!
      try { 
        zipEntry0.addExtraField(zipExtraField0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      
      zipEntry0.setUnixMode(1765);
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(3, zipEntry0.getPlatform());
      assertEquals((-1L), zipEntry0.getSize());
      assertNull(zipEntry0.getComment());
      assertEquals(115671040L, zipEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry(":_ZoC");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(":_ZoC", zipEntry0.toString());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, zipEntry0.getPlatform());
      assertNull(zipEntry0.getComment());
      assertEquals(":_ZoC", zipEntry0.getName());
      
      ZipEntry zipEntry1 = null;
      try {
        zipEntry1 = new ZipEntry(zipEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid compression method
         //
         verifyException("java.util.zip.ZipEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertFalse(zipEntry0.isDirectory());
      assertEquals((-1), zipEntry0.getMethod());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      assertEquals("", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      
      byte[] byteArray0 = zipEntry0.getCentralDirectoryExtra();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCrc());
      assertFalse(zipEntry0.isDirectory());
      assertEquals((-1), zipEntry0.getMethod());
      assertNull(zipEntry0.getComment());
      assertEquals("", zipEntry0.toString());
      assertEquals("", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      
      int int0 = zipEntry0.getPlatform();
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertNull(zipEntry0.getComment());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals("", zipEntry0.getName());
      assertEquals("", zipEntry0.toString());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals("", zipEntry0.getName());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      
      long long0 = zipEntry0.getExternalAttributes();
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals("", zipEntry0.getName());
      assertFalse(zipEntry0.isDirectory());
      assertNull(zipEntry0.getComment());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      assertNotNull(zipEntry0);
      assertNull(zipEntry0.getComment());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1), zipEntry0.getMethod());
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("", zipEntry0.toString());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals(0, zipEntry0.getInternalAttributes());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals("", zipEntry0.getName());
      assertEquals(0, zipEntry0.getPlatform());
      
      // Undeclared exception!
      try { 
        zipEntry0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ZipEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      zipEntry0.setComprSize(10);
      zipEntry0.setComprSize((-2002L));
      assertEquals((-2002L), zipEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("");
      zipEntry0.setUnixMode(10);
      int int0 = zipEntry0.getPlatform();
      assertEquals(655361L, zipEntry0.getExternalAttributes());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipEntry zipEntry0 = new ZipEntry("+]1'',BZ2b\u0001cS=?Tk");
      byte[] byteArray0 = new byte[16];
      zipEntry0.setExtra(byteArray0);
      assertEquals(0L, zipEntry0.getExternalAttributes());
      assertEquals(0, zipEntry0.getPlatform());
      assertEquals(0, zipEntry0.getInternalAttributes());
  }
}
