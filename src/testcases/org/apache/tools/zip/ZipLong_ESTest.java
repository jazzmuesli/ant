/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:52:11 GMT 2020
 */

package org.apache.tools.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.zip.ZipLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZipLong_ESTest extends ZipLong_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipLong zipLong0 = new ZipLong((-2218L));
      assertEquals((-2218L), zipLong0.getValue());
      assertNotNull(zipLong0);
      
      byte[] byteArray0 = zipLong0.getBytes();
      assertEquals(4, byteArray0.length);
      assertEquals((-2218L), zipLong0.getValue());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-9), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-45);
      ZipLong zipLong0 = new ZipLong(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(13828096L, zipLong0.getValue());
      assertNotNull(zipLong0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-45), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = zipLong0.getBytes();
      assertEquals(6, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(13828096L, zipLong0.getValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-45), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-45), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ZipLong zipLong0 = new ZipLong(byteArray0, (byte)0);
      assertEquals(8, byteArray0.length);
      assertEquals(0L, zipLong0.getValue());
      assertNotNull(zipLong0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ZipLong zipLong1 = new ZipLong(3886L);
      assertEquals(3886L, zipLong1.getValue());
      assertFalse(zipLong1.equals((Object)zipLong0));
      assertNotNull(zipLong1);
      
      boolean boolean0 = zipLong0.equals(zipLong1);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(0L, zipLong0.getValue());
      assertEquals(3886L, zipLong1.getValue());
      assertFalse(zipLong0.equals((Object)zipLong1));
      assertFalse(zipLong1.equals((Object)zipLong0));
      assertNotSame(zipLong0, zipLong1);
      assertNotSame(zipLong1, zipLong0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      ZipLong zipLong0 = new ZipLong(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(255L, zipLong0.getValue());
      assertNotNull(zipLong0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = zipLong0.getValue();
      assertEquals(6, byteArray0.length);
      assertEquals(255L, long0);
      assertEquals(255L, zipLong0.getValue());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipLong zipLong0 = new ZipLong((-2218L));
      assertEquals((-2218L), zipLong0.getValue());
      assertNotNull(zipLong0);
      
      long long0 = zipLong0.getValue();
      assertEquals((-2218L), long0);
      assertEquals((-2218L), zipLong0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipLong zipLong0 = null;
      try {
        zipLong0 = new ZipLong((byte[]) null, (-989));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ZipLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ZipLong zipLong0 = null;
      try {
        zipLong0 = new ZipLong(byteArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.tools.zip.ZipLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipLong zipLong0 = null;
      try {
        zipLong0 = new ZipLong((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.zip.ZipLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ZipLong zipLong0 = null;
      try {
        zipLong0 = new ZipLong(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.tools.zip.ZipLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ZipLong zipLong0 = new ZipLong(byteArray0);
      long long0 = zipLong0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipLong zipLong0 = new ZipLong(0L);
      ZipLong zipLong1 = new ZipLong((-896L));
      boolean boolean0 = zipLong0.equals(zipLong1);
      assertEquals((-896L), zipLong1.getValue());
      assertFalse(zipLong1.equals((Object)zipLong0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ZipLong zipLong0 = new ZipLong(byteArray0);
      boolean boolean0 = zipLong0.equals("|A9EWBge");
      assertEquals(0L, zipLong0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ZipLong zipLong0 = new ZipLong(byteArray0);
      boolean boolean0 = zipLong0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0L, zipLong0.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipLong zipLong0 = new ZipLong(15L);
      boolean boolean0 = zipLong0.equals(zipLong0);
      assertEquals(15L, zipLong0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipLong zipLong0 = new ZipLong(15L);
      zipLong0.hashCode();
      assertEquals(15L, zipLong0.getValue());
  }
}
