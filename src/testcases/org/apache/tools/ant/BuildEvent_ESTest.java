/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:24:38 GMT 2020
 */

package org.apache.tools.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Target;
import org.apache.tools.ant.Task;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BuildEvent_ESTest extends BuildEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(task0).getProject();
      doReturn((Target) null).when(task0).getOwningTarget();
      BuildEvent buildEvent0 = new BuildEvent(task0);
      buildEvent0.setMessage("", 3346);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(task0).getProject();
      doReturn((Target) null).when(task0).getOwningTarget();
      BuildEvent buildEvent0 = new BuildEvent(task0);
      buildEvent0.setException((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(task0).getProject();
      doReturn((Target) null).when(task0).getOwningTarget();
      BuildEvent buildEvent0 = new BuildEvent(task0);
      Task task1 = buildEvent0.getTask();
      assertSame(task1, task0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      BuildEvent buildEvent0 = new BuildEvent(target0);
      Target target1 = buildEvent0.getTarget();
      assertSame(target1, target0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      BuildEvent buildEvent0 = new BuildEvent(target0);
      Project project0 = buildEvent0.getProject();
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      BuildEvent buildEvent0 = new BuildEvent(project0);
      int int0 = buildEvent0.getPriority();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      BuildEvent buildEvent0 = new BuildEvent(project0);
      String string0 = buildEvent0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      BuildEvent buildEvent0 = new BuildEvent(project0);
      Throwable throwable0 = buildEvent0.getException();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuildEvent buildEvent0 = null;
      try {
        buildEvent0 = new BuildEvent((Task) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuildEvent buildEvent0 = null;
      try {
        buildEvent0 = new BuildEvent((Target) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuildEvent buildEvent0 = null;
      try {
        buildEvent0 = new BuildEvent((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
