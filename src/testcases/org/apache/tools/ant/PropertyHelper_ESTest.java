/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:57:18 GMT 2020
 */

package org.apache.tools.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.Vector;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.PropertyHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyHelper_ESTest extends PropertyHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      String string0 = null;
      String string1 = "9";
      // Undeclared exception!
      try { 
        PropertyHelper.parsePropertyStringDefault("9", (Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(project0).getReference(anyString());
      PropertyHelper propertyHelper0 = PropertyHelper.getPropertyHelper(project0);
      Project project1 = propertyHelper0.project;
      propertyHelper0.project = project1;
      propertyHelper0.getProperty(".#9v9)Z", "I_Q@|J");
      Project project2 = propertyHelper0.project;
      PropertyHelper propertyHelper1 = PropertyHelper.getPropertyHelper(project2);
      propertyHelper0.getProperty("", "");
      propertyHelper1.setNext(propertyHelper0);
      propertyHelper1.getProperty("", "");
      propertyHelper0.setPropertyHook((String) null, "", "", true, true, false);
      propertyHelper0.getProperty("", "I_Q@|J");
      propertyHelper0.setNewProperty(".#9v9)Z", "", "I_Q@|J");
      assertNotSame(propertyHelper0, propertyHelper1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      String string0 = null;
      String string1 = "";
      propertyHelper0.getProperties();
      PropertyHelper propertyHelper1 = new PropertyHelper();
      propertyHelper0.setNext(propertyHelper1);
      Project project0 = propertyHelper1.project;
      propertyHelper0.getUserProperties();
      propertyHelper1.copyUserProperties((Project) null);
      propertyHelper1.setNext(propertyHelper0);
      String string2 = "@gQ6bx/t$(|a^B!";
      String string3 = "D g}8O8cM)h";
      // Undeclared exception!
      try { 
        propertyHelper1.setProperty("", "", "D g}8O8cM)h", true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      propertyHelper0.getPropertyHook("uYK&&x:", "", true);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, "").when(project0).getReference(anyString());
      PropertyHelper propertyHelper1 = PropertyHelper.getPropertyHelper(project0);
      String string0 = null;
      String string1 = "I_Q@|J";
      propertyHelper1.getProperty(".#9v9)Z", "I_Q@|J");
      propertyHelper1.setPropertyHook((String) null, "Kc3' q4;CydC:) .%@-", (Object) null, true, true, false);
      Project project1 = propertyHelper1.project;
      // Undeclared exception!
      try { 
        PropertyHelper.getPropertyHelper(project1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.tools.ant.PropertyHelper
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      PropertyHelper propertyHelper1 = new PropertyHelper();
      propertyHelper1.next = propertyHelper0;
      String string0 = "";
      propertyHelper0.setNext(propertyHelper1);
      String string1 = "";
      String string2 = "KzpmJY.R|xb-";
      // Undeclared exception!
      try { 
        propertyHelper0.setNewProperty("KzpmJY.R|xb-", "", (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      propertyHelper0.setNext(propertyHelper0);
      String string0 = "e9.CrB tf/Zf>OS";
      String string1 = "";
      // Undeclared exception!
      try { 
        propertyHelper0.getProperty("e9.CrB tf/Zf>OS", "e9.CrB tf/Zf>OS");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = null;
      propertyHelper0.copyInheritedProperties((Project) null);
      String string0 = "-o";
      String string1 = null;
      String string2 = "";
      String string3 = "";
      propertyHelper0.parsePropertyString("", (Vector) null, (Vector) null);
      propertyHelper0.project = null;
      propertyHelper0.getPropertyHook("", "", false);
      // Undeclared exception!
      try { 
        propertyHelper0.setInheritedProperty((String) null, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      propertyHelper0.setProject((Project) null);
      propertyHelper0.getUserProperties();
      String string0 = null;
      // Undeclared exception!
      try { 
        propertyHelper0.getPropertyHook(">m~)-X*+.$-;R$h/R)J", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(project0).getReference(anyString());
      PropertyHelper propertyHelper0 = PropertyHelper.getPropertyHelper(project0);
      propertyHelper0.getProperty(".#9v9)Z", "I_Q@|J");
      propertyHelper0.setPropertyHook((String) null, "Kc3' q4;CydC:) .%@-", (Object) null, true, true, false);
      Project project1 = propertyHelper0.project;
      PropertyHelper propertyHelper1 = PropertyHelper.getPropertyHelper(project1);
      propertyHelper0.getProperty("", "");
      Hashtable hashtable0 = propertyHelper0.getProperties();
      propertyHelper1.setNext(propertyHelper0);
      propertyHelper1.getProperty("", "");
      propertyHelper0.replaceProperties("", "3@", hashtable0);
      propertyHelper0.setPropertyHook((String) null, "", "", true, true, false);
      propertyHelper0.setProject(project1);
      propertyHelper0.getProperty("", "I_Q@|J");
      // Undeclared exception!
      try { 
        propertyHelper1.setUserProperty("", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      String string0 = "A{cHAN/\\R?y)BjOc";
      PropertyHelper propertyHelper1 = new PropertyHelper();
      propertyHelper1.next = propertyHelper0;
      propertyHelper1.getProperty("uU3'36=_}xQJq", "uU3'36=_}xQJq");
      String string1 = "";
      propertyHelper1.next.getUserProperty("A{cHAN/R?y)BjOc", "");
      propertyHelper0.setNext(propertyHelper1);
      // Undeclared exception!
      try { 
        propertyHelper0.setPropertyHook("A{cHAN/R?y)BjOc", "A{cHAN/R?y)BjOc", (Object) null, true, true, true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      // Undeclared exception!
      try { 
        propertyHelper0.setUserProperty("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Hashtable hashtable0 = propertyHelper0.getUserProperties();
      Project project0 = propertyHelper0.project;
      propertyHelper0.setProject((Project) null);
      Project project1 = propertyHelper0.project;
      propertyHelper0.copyInheritedProperties((Project) null);
      propertyHelper0.getPropertyHook("", "", false);
      propertyHelper0.getProperty("p'b}", "p'b}");
      propertyHelper0.project = null;
      propertyHelper0.getUserProperties();
      propertyHelper0.getUserProperty("", "");
      Project project2 = propertyHelper0.project;
      propertyHelper0.copyUserProperties((Project) null);
      propertyHelper0.copyInheritedProperties((Project) null);
      String string0 = ")$vZ^Sk/gbC";
      propertyHelper0.replaceProperties("", ")$vZ^Sk/gbC", hashtable0);
      // Undeclared exception!
      try { 
        PropertyHelper.getPropertyHelper((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      String string0 = null;
      Vector<Integer> vector0 = null;
      // Undeclared exception!
      try { 
        propertyHelper0.parsePropertyString((String) null, (Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      propertyHelper0.getNext();
      String string0 = "";
      String string1 = "";
      String string2 = "";
      propertyHelper0.getProperty("", "");
      // Undeclared exception!
      try { 
        propertyHelper0.setInheritedProperty("", "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      String string0 = null;
      String string1 = "";
      propertyHelper0.getUserProperty("", "");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        propertyHelper0.setProperty((String) null, "", (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      propertyHelper0.project = null;
      String string0 = ",(Tj(di/otKR`wL{";
      propertyHelper0.getProperty(",(Tj(di/otKR`wL{", ",(Tj(di/otKR`wL{");
      // Undeclared exception!
      try { 
        propertyHelper0.setProperty(",(Tj(di/otKR`wL{", ",(Tj(di/otKR`wL{", (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<PropertyHelper> vector0 = null;
      PropertyHelper.parsePropertyStringDefault("", (Vector) null, (Vector) null);
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      // Undeclared exception!
      try { 
        PropertyHelper.getPropertyHelper((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      propertyHelper0.copyInheritedProperties((Project) null);
      propertyHelper0.getProperties();
      Hashtable hashtable0 = propertyHelper0.getUserProperties();
      // Undeclared exception!
      try { 
        propertyHelper0.setNewProperty("", "", hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      propertyHelper0.setProject((Project) null);
      propertyHelper0.getUserProperties();
      Project project1 = null;
      // Undeclared exception!
      try { 
        PropertyHelper.getPropertyHelper((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      String string0 = "";
      // Undeclared exception!
      try { 
        propertyHelper0.setNewProperty("V", "", "V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      propertyHelper0.setPropertyHook("z$2JM#7>hi#", "", (Object) null, true, true, false);
      // Undeclared exception!
      try { 
        PropertyHelper.getPropertyHelper((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      PropertyHelper propertyHelper1 = propertyHelper0.next;
      String string0 = "";
      String string1 = "U-QQ^iRwN%N";
      // Undeclared exception!
      try { 
        propertyHelper0.setProperty("U-QQ^iRwN%N", "", (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      propertyHelper0.setProject((Project) null);
      propertyHelper0.copyUserProperties((Project) null);
      Object object0 = propertyHelper0.getPropertyHook("", "", false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      propertyHelper0.getNext();
      propertyHelper0.setNext((PropertyHelper) null);
      boolean boolean0 = propertyHelper0.setProperty("", "", "", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Project project0 = propertyHelper0.project;
      // Undeclared exception!
      try { 
        PropertyHelper.getPropertyHelper((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }
}
