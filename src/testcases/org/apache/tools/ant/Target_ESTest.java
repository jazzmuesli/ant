/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:31:04 GMT 2020
 */

package org.apache.tools.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.RuntimeConfigurable;
import org.apache.tools.ant.Target;
import org.apache.tools.ant.Task;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Target target0 = new Target();
      target0.setDepends("?![v3_CVR$!jAYA");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Target target0 = new Target();
      target0.execute();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Target target0 = new Target();
      String string0 = target0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Target target0 = new Target();
      target0.setUnless("!");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Target target0 = new Target();
      target0.setProject((Project) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Target target0 = new Target();
      target0.setName((String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Target target0 = new Target();
      target0.setIf((String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Target target0 = new Target();
      target0.setDescription("Fed#bcOK;[q]5yo V");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Target target0 = new Target();
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      target0.replaceChild(task0, task0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Target target0 = new Target();
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      RuntimeConfigurable runtimeConfigurable0 = mock(RuntimeConfigurable.class, new ViolatedAssumptionAnswer());
      target0.replaceChild(task0, runtimeConfigurable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Target target0 = new Target();
      Task[] taskArray0 = target0.getTasks();
      assertEquals(0, taskArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Target target0 = new Target();
      Project project0 = target0.getProject();
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Target target0 = new Target();
      String string0 = target0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Target target0 = new Target();
      String string0 = target0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Target target0 = new Target();
      Enumeration enumeration0 = target0.getDependencies();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Target target0 = new Target();
      target0.addDependency("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Target target0 = new Target();
      target0.addDataType((RuntimeConfigurable) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Target target0 = new Target();
      // Undeclared exception!
      try { 
        target0.setDepends((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Target target0 = new Target();
      // Undeclared exception!
      try { 
        target0.performTasks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Target target0 = new Target();
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null, (Project) null).when(task0).getProject();
      target0.addTask(task0);
      // Undeclared exception!
      try { 
        target0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }
}
