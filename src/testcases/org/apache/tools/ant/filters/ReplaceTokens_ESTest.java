/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:33:47 GMT 2020
 */

package org.apache.tools.ant.filters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.apache.tools.ant.filters.ReplaceTokens;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReplaceTokens_ESTest extends ReplaceTokens_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReplaceTokens replaceTokens0 = new ReplaceTokens(stringReader0);
      int int0 = replaceTokens0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReplaceTokens replaceTokens0 = new ReplaceTokens(stringReader0);
      Reader reader0 = replaceTokens0.chain(replaceTokens0);
      assertNotSame(replaceTokens0, reader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReplaceTokens.Token replaceTokens_Token0 = new ReplaceTokens.Token();
      replaceTokens_Token0.setValue("");
      replaceTokens_Token0.setKey("G`uE=x? @");
      StringReader stringReader0 = new StringReader("");
      ReplaceTokens replaceTokens0 = new ReplaceTokens(stringReader0);
      replaceTokens0.addConfiguredToken(replaceTokens_Token0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReplaceTokens.Token replaceTokens_Token0 = new ReplaceTokens.Token();
      String string0 = replaceTokens_Token0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReplaceTokens.Token replaceTokens_Token0 = new ReplaceTokens.Token();
      String string0 = replaceTokens_Token0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReplaceTokens replaceTokens0 = new ReplaceTokens(stringReader0);
      replaceTokens0.setEndToken('(');
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      replaceTokens0.setBeginToken('&');
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      try { 
        replaceTokens0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      // Undeclared exception!
      try { 
        replaceTokens0.chain((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      // Undeclared exception!
      try { 
        replaceTokens0.addConfiguredToken((ReplaceTokens.Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.filters.ReplaceTokens", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReplaceTokens replaceTokens0 = null;
      try {
        replaceTokens0 = new ReplaceTokens((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
}
