/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:51:48 GMT 2020
 */

package org.apache.tools.ant.filters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.filters.ExpandProperties;
import org.apache.tools.ant.filters.HeadFilter;
import org.apache.tools.ant.filters.LineContainsRegExp;
import org.apache.tools.ant.filters.PrefixLines;
import org.apache.tools.ant.filters.ReplaceTokens;
import org.apache.tools.ant.filters.StripJavaComments;
import org.apache.tools.ant.filters.StripLineBreaks;
import org.apache.tools.ant.filters.StripLineComments;
import org.apache.tools.ant.filters.TabsToSpaces;
import org.apache.tools.ant.filters.TailFilter;
import org.apache.tools.ant.filters.TokenFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseFilterReader_ESTest extends BaseFilterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StripJavaComments stripJavaComments0 = new StripJavaComments();
      long long0 = stripJavaComments0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineContainsRegExp lineContainsRegExp0 = new LineContainsRegExp(stringReader0);
      PrefixLines prefixLines0 = new PrefixLines(lineContainsRegExp0);
      ReplaceTokens replaceTokens0 = new ReplaceTokens(prefixLines0);
      String string0 = replaceTokens0.readLine();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      TokenFilter tokenFilter0 = new TokenFilter(stringReader0);
      String string0 = tokenFilter0.readFully();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      StripLineComments stripLineComments0 = new StripLineComments(replaceTokens0);
      TailFilter tailFilter0 = new TailFilter(stripLineComments0);
      StripLineBreaks stripLineBreaks0 = new StripLineBreaks(tailFilter0);
      StripJavaComments stripJavaComments0 = new StripJavaComments(stripLineBreaks0);
      char[] charArray0 = new char[8];
      int int0 = stripJavaComments0.read(charArray0, 3401, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TabsToSpaces tabsToSpaces0 = new TabsToSpaces();
      tabsToSpaces0.setProject((Project) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      TokenFilter tokenFilter0 = new TokenFilter(stringReader0);
      tokenFilter0.setInitialized(false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TabsToSpaces tabsToSpaces0 = new TabsToSpaces();
      Project project0 = tabsToSpaces0.getProject();
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineContainsRegExp lineContainsRegExp0 = new LineContainsRegExp(stringReader0);
      PrefixLines prefixLines0 = new PrefixLines(lineContainsRegExp0);
      boolean boolean0 = prefixLines0.getInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TabsToSpaces tabsToSpaces0 = new TabsToSpaces();
      try { 
        tabsToSpaces0.skip((-922L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip value is negative
         //
         verifyException("org.apache.tools.ant.filters.BaseFilterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HeadFilter headFilter0 = new HeadFilter();
      ReplaceTokens replaceTokens0 = new ReplaceTokens(headFilter0);
      try { 
        replaceTokens0.skip(102L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpandProperties expandProperties0 = new ExpandProperties();
      try { 
        expandProperties0.readLine();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      StripLineComments stripLineComments0 = new StripLineComments(replaceTokens0);
      TailFilter tailFilter0 = new TailFilter(stripLineComments0);
      StripLineBreaks stripLineBreaks0 = new StripLineBreaks(tailFilter0);
      StripJavaComments stripJavaComments0 = new StripJavaComments(stripLineBreaks0);
      try { 
        stripJavaComments0.readFully();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      HeadFilter headFilter0 = new HeadFilter(tokenFilter0);
      char[] charArray0 = new char[0];
      try { 
        headFilter0.read(charArray0, 1449, 1449);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
