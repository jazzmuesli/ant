/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:56:23 GMT 2020
 */

package org.apache.tools.ant.filters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.filters.TokenFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenFilter_ESTest extends TokenFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      tokenFilter_ContainsRegex0.setPattern("i");
      tokenFilter_ContainsRegex0.filter("VnjF}Lb:}1Rn\":\"~Eh");
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter_LineTokenizer0.lineEnd = "!ynO";
      String string0 = tokenFilter_LineTokenizer0.getPostToken();
      assertEquals("!ynO", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      // Undeclared exception!
      try { 
        tokenFilter0.chain((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      TokenFilter.convertRegexOptions("");
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      tokenFilter_DeleteCharacters0.filter("");
      tokenFilter0.addDeleteCharacters(tokenFilter_DeleteCharacters0);
      TokenFilter.FileTokenizer tokenFilter_FileTokenizer0 = new TokenFilter.FileTokenizer();
      tokenFilter_FileTokenizer0.getPostToken();
      tokenFilter0.addFileTokenizer(tokenFilter_FileTokenizer0);
      // Undeclared exception!
      try { 
        tokenFilter0.addFileTokenizer(tokenFilter_FileTokenizer0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Only one tokenizer allowed
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      tokenFilter_IgnoreBlank0.chain(tokenFilter0);
      tokenFilter0.add(tokenFilter_IgnoreBlank0);
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      tokenFilter_ReplaceRegex0.setPattern("M%2y<TF!oEPHCq2*b$");
      String string0 = "6C`";
      tokenFilter_ReplaceRegex0.filter("6C`");
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      tokenFilter_ContainsRegex0.setByLine(true);
      // Undeclared exception!
      try { 
        tokenFilter_ContainsRegex0.filter("6C`");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Missing from in containsregex
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter$ContainsRegex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenFilter.Trim tokenFilter_Trim0 = new TokenFilter.Trim();
      tokenFilter_Trim0.filter("");
      TokenFilter tokenFilter0 = new TokenFilter();
      tokenFilter0.getProject();
      tokenFilter0.setProject((Project) null);
      tokenFilter0.setDelimOutput("");
      tokenFilter_Trim0.setByLine(false);
      tokenFilter0.close();
      TokenFilter.FileTokenizer tokenFilter_FileTokenizer0 = new TokenFilter.FileTokenizer();
      tokenFilter_FileTokenizer0.getPostToken();
      TokenFilter.ContainsString tokenFilter_ContainsString0 = new TokenFilter.ContainsString();
      tokenFilter_ContainsString0.setContains("");
      tokenFilter_ContainsString0.filter("");
      tokenFilter_ContainsString0.setContains("");
      tokenFilter_ContainsString0.filter("X;vID`Ah(");
      tokenFilter0.add(tokenFilter_Trim0);
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      tokenFilter_Trim0.chain(tokenFilter0);
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      // Undeclared exception!
      try { 
        tokenFilter_ContainsRegex0.filter("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Missing from in containsregex
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter$ContainsRegex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      Reader reader1 = tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      TokenFilter tokenFilter1 = new TokenFilter(reader1);
      tokenFilter1.addDeleteCharacters(tokenFilter_DeleteCharacters0);
      tokenFilter1.getProject();
      tokenFilter_ReplaceRegex0.setProject((Project) null);
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      tokenFilter_ContainsRegex0.setPattern("`)lLZRlls!AXy@");
      tokenFilter1.addTrim((TokenFilter.Trim) null);
      tokenFilter_ContainsRegex0.setFlags("h/MmI\"S?K");
      TokenFilter.FileTokenizer tokenFilter_FileTokenizer0 = new TokenFilter.FileTokenizer();
      tokenFilter_FileTokenizer0.getPostToken();
      tokenFilter1.addFileTokenizer(tokenFilter_FileTokenizer0);
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      tokenFilter_IgnoreBlank0.filter(",y\"5I3");
      tokenFilter_IgnoreBlank0.chain(reader1);
      tokenFilter_ContainsRegex0.chain(reader0);
      // Undeclared exception!
      try { 
        tokenFilter0.setDelimOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      tokenFilter_ContainsRegex0.setProject((Project) null);
      tokenFilter_ContainsRegex0.setReplace("JQs1:");
      tokenFilter_ContainsRegex0.setReplace("");
      tokenFilter_ContainsRegex0.setFlags("Eadvh&");
      tokenFilter_ContainsRegex0.setProject((Project) null);
      tokenFilter_ContainsRegex0.setProject((Project) null);
      tokenFilter_ContainsRegex0.setFlags("");
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter.Trim tokenFilter_Trim0 = new TokenFilter.Trim();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_IgnoreBlank0.chain(tokenFilter0);
      Reader reader1 = tokenFilter_DeleteCharacters0.chain(reader0);
      TokenFilter tokenFilter1 = new TokenFilter(reader1);
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      tokenFilter1.addReplaceString(tokenFilter_ReplaceString0);
      assertNotSame(tokenFilter1, tokenFilter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      String string0 = "";
      TokenFilter.FileTokenizer tokenFilter_FileTokenizer0 = new TokenFilter.FileTokenizer();
      tokenFilter_FileTokenizer0.getPostToken();
      tokenFilter0.addFileTokenizer(tokenFilter_FileTokenizer0);
      // Undeclared exception!
      try { 
        tokenFilter0.setDynamicAttribute("", "");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Unknown attribute 
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter tokenFilter1 = new TokenFilter(tokenFilter0);
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      tokenFilter_IgnoreBlank0.setByLine(true);
      tokenFilter1.addIgnoreBlank(tokenFilter_IgnoreBlank0);
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      // Undeclared exception!
      try { 
        tokenFilter_ReplaceRegex0.filter("\"~TR6<r<;0;8>5(K+");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Missing pattern in replaceregex
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter$ReplaceRegex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      tokenFilter_ContainsRegex0.setPattern("");
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      tokenFilter_IgnoreBlank0.setByLine(false);
      tokenFilter0.addIgnoreBlank(tokenFilter_IgnoreBlank0);
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter_LineTokenizer0.getPostToken();
      tokenFilter0.addLineTokenizer(tokenFilter_LineTokenizer0);
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      try { 
        tokenFilter_StringTokenizer0.getToken(tokenFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      tokenFilter0.addStringTokenizer(tokenFilter_StringTokenizer0);
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      tokenFilter0.addReplaceString(tokenFilter_ReplaceString0);
      // Undeclared exception!
      try { 
        tokenFilter0.addStringTokenizer((TokenFilter.StringTokenizer) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Only one tokenizer allowed
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      tokenFilter0.markSupported();
      tokenFilter0.getInitialized();
      String string0 = "";
      // Undeclared exception!
      try { 
        tokenFilter0.setDynamicAttribute("", "");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Unknown attribute 
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      try { 
        tokenFilter0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.ContainsString tokenFilter_ContainsString0 = new TokenFilter.ContainsString();
      tokenFilter0.addContainsString(tokenFilter_ContainsString0);
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      String string0 = tokenFilter_LineTokenizer0.getPostToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      tokenFilter_ReplaceString0.setFrom("{L/QSz?");
      tokenFilter_ReplaceString0.filter("");
      tokenFilter_ReplaceString0.setByLine(true);
      TokenFilter.ContainsString tokenFilter_ContainsString0 = new TokenFilter.ContainsString();
      tokenFilter_ContainsString0.setContains("");
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter_LineTokenizer0.pushed = 1;
      tokenFilter_LineTokenizer0.getPostToken();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter.FileTokenizer tokenFilter_FileTokenizer0 = new TokenFilter.FileTokenizer();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      // Undeclared exception!
      try { 
        tokenFilter_IgnoreBlank0.chain((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_IgnoreBlank0.chain(tokenFilter0);
      TokenFilter tokenFilter1 = new TokenFilter(reader0);
      try { 
        tokenFilter_StringTokenizer0.getToken(tokenFilter1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      tokenFilter_ReplaceString0.setByLine(true);
      tokenFilter_ReplaceString0.setTo("shB^F~6W");
      tokenFilter0.getInitialized();
      tokenFilter0.addReplaceString(tokenFilter_ReplaceString0);
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      String string0 = ")Rf";
      tokenFilter_DeleteCharacters0.setChars("");
      tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      tokenFilter_DeleteCharacters0.setChars(")Rf");
      tokenFilter0.addDeleteCharacters(tokenFilter_DeleteCharacters0);
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      tokenFilter_ReplaceRegex0.setReplace(")Rf");
      tokenFilter_ReplaceRegex0.setFlags("");
      tokenFilter_ReplaceRegex0.chain(tokenFilter0);
      tokenFilter_ReplaceRegex0.setReplace((String) null);
      tokenFilter0.addReplaceRegex(tokenFilter_ReplaceRegex0);
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter0.addLineTokenizer(tokenFilter_LineTokenizer0);
      TokenFilter.resolveBackSlash(")Rf");
      // Undeclared exception!
      try { 
        tokenFilter0.createDynamicElement("shB^F~6W");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // createDynamicElement.TokenFilter - Unable to get the project
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenFilter.ContainsString tokenFilter_ContainsString0 = new TokenFilter.ContainsString();
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.FileTokenizer tokenFilter_FileTokenizer0 = new TokenFilter.FileTokenizer();
      tokenFilter0.addFileTokenizer(tokenFilter_FileTokenizer0);
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      tokenFilter_IgnoreBlank0.filter("3Nq>?Uv3hL80");
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      tokenFilter_StringTokenizer0.setSuppressDelims(true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_IgnoreBlank0.chain(tokenFilter0);
      TokenFilter tokenFilter1 = new TokenFilter(reader0);
      tokenFilter1.getProject();
      TokenFilter.Trim tokenFilter_Trim0 = new TokenFilter.Trim();
      tokenFilter1.addTrim(tokenFilter_Trim0);
      tokenFilter_IgnoreBlank0.setByLine(true);
      tokenFilter0.addContainsRegex((TokenFilter.ContainsRegex) null);
      tokenFilter1.addIgnoreBlank(tokenFilter_IgnoreBlank0);
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter0.addLineTokenizer(tokenFilter_LineTokenizer0);
      assertNotSame(tokenFilter0, reader0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      tokenFilter0.add(tokenFilter_DeleteCharacters0);
      tokenFilter_DeleteCharacters0.filter("3FFElY)");
      tokenFilter_DeleteCharacters0.filter("3FFElY)");
      tokenFilter_DeleteCharacters0.filter("3FFElY)");
      tokenFilter0.addDeleteCharacters(tokenFilter_DeleteCharacters0);
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter_LineTokenizer0.getPostToken();
      tokenFilter_LineTokenizer0.lineEnd = "";
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      tokenFilter_StringTokenizer0.setSuppressDelims(true);
      tokenFilter_StringTokenizer0.setSuppressDelims(true);
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      // Undeclared exception!
      try { 
        tokenFilter_ContainsRegex0.filter("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Missing from in containsregex
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter$ContainsRegex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenFilter.resolveBackSlash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      tokenFilter_ReplaceRegex0.setByLine(false);
      tokenFilter_ReplaceRegex0.setReplace("");
      int int0 = TokenFilter.convertRegexOptions("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter_LineTokenizer0.getPostToken();
      tokenFilter_LineTokenizer0.getPostToken();
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      tokenFilter_StringTokenizer0.setDelimsAreTokens(false);
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      tokenFilter_ReplaceRegex0.setPattern((String) null);
      TokenFilter tokenFilter0 = null;
      try {
        tokenFilter0 = new TokenFilter((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      Reader reader1 = tokenFilter_IgnoreBlank0.chain(reader0);
      tokenFilter_DeleteCharacters0.chain(reader1);
      TokenFilter tokenFilter1 = new TokenFilter();
      TokenFilter tokenFilter2 = new TokenFilter(tokenFilter1);
      Reader reader2 = tokenFilter_DeleteCharacters0.chain(tokenFilter2);
      tokenFilter_ReplaceString0.chain(reader2);
      // Undeclared exception!
      try { 
        tokenFilter_ReplaceString0.filter("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Missing from in stringreplace
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter$ReplaceString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      tokenFilter_LineTokenizer0.getPostToken();
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      TokenFilter tokenFilter0 = new TokenFilter();
      tokenFilter0.getProject();
      tokenFilter_ReplaceRegex0.setProject((Project) null);
      try { 
        tokenFilter0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter tokenFilter1 = new TokenFilter(tokenFilter0);
      Reader reader0 = tokenFilter_IgnoreBlank0.chain(tokenFilter1);
      Reader reader1 = tokenFilter_DeleteCharacters0.chain(reader0);
      try { 
        tokenFilter_LineTokenizer0.getToken(reader1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      TokenFilter tokenFilter1 = new TokenFilter(reader0);
      tokenFilter1.chain(tokenFilter0);
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      tokenFilter_StringTokenizer0.setDelims("XS%*TD(&D{)?jZ");
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      tokenFilter_ContainsRegex0.setReplace("XS%*TD(&D{)?jZ");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_IgnoreBlank0.chain(tokenFilter0);
      tokenFilter0.addIgnoreBlank(tokenFilter_IgnoreBlank0);
      tokenFilter_IgnoreBlank0.chain(reader0);
      TokenFilter tokenFilter1 = new TokenFilter(reader0);
      tokenFilter1.addIgnoreBlank(tokenFilter_IgnoreBlank0);
      String string0 = "bvdtp#k7g3#GU:Dek";
      tokenFilter0.setDelimOutput("bvdtp#k7g3#GU:Dek");
      TokenFilter.resolveBackSlash("bvdtp#k7g3#GU:Dek");
      tokenFilter_IgnoreBlank0.filter("");
      tokenFilter_IgnoreBlank0.filter(".oLO7");
      // Undeclared exception!
      try { 
        tokenFilter1.createDynamicElement((String) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // createDynamicElement.TokenFilter - Unable to get the project
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.LineTokenizer tokenFilter_LineTokenizer0 = new TokenFilter.LineTokenizer();
      int int0 = 46;
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'n';
      try { 
        tokenFilter0.read(charArray0, 46, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.Trim tokenFilter_Trim0 = new TokenFilter.Trim();
      tokenFilter0.addTrim(tokenFilter_Trim0);
      String string0 = "";
      tokenFilter0.setDelimOutput("");
      tokenFilter0.addLineTokenizer((TokenFilter.LineTokenizer) null);
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      tokenFilter0.addReplaceRegex(tokenFilter_ReplaceRegex0);
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      tokenFilter0.getProject();
      tokenFilter_ContainsRegex0.setProject((Project) null);
      tokenFilter0.add(tokenFilter_ReplaceRegex0);
      // Undeclared exception!
      try { 
        tokenFilter_ContainsRegex0.filter("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Missing from in containsregex
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter$ContainsRegex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = null;
      tokenFilter0.setDelimOutput("sU{As\"Y3):65~S>=nd");
      tokenFilter0.addReplaceRegex((TokenFilter.ReplaceRegex) null);
      tokenFilter0.addLineTokenizer((TokenFilter.LineTokenizer) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      try { 
        tokenFilter0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      tokenFilter_IgnoreBlank0.setByLine(true);
      tokenFilter_DeleteCharacters0.chain(tokenFilter0);
      Reader reader1 = tokenFilter_IgnoreBlank0.chain(reader0);
      TokenFilter tokenFilter1 = new TokenFilter(reader1);
      Reader reader2 = tokenFilter1.chain(tokenFilter0);
      String string0 = "O\"3%O:n";
      TokenFilter.resolveBackSlash("O\"3%O:n");
      tokenFilter_IgnoreBlank0.setByLine(false);
      TokenFilter.Trim tokenFilter_Trim0 = new TokenFilter.Trim();
      tokenFilter_Trim0.filter("O\"3%O:n");
      tokenFilter_Trim0.filter("O\"3%O:n");
      TokenFilter.FileTokenizer tokenFilter_FileTokenizer0 = new TokenFilter.FileTokenizer();
      Reader reader3 = tokenFilter_IgnoreBlank0.chain(reader2);
      try { 
        tokenFilter_FileTokenizer0.getToken(reader3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenFilter.ContainsString tokenFilter_ContainsString0 = new TokenFilter.ContainsString();
      // Undeclared exception!
      try { 
        tokenFilter_ContainsString0.filter("/t`");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Missing contains in containsstring
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter$ContainsString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenFilter.StringTokenizer tokenFilter_StringTokenizer0 = new TokenFilter.StringTokenizer();
      tokenFilter_StringTokenizer0.setDelimsAreTokens(false);
      tokenFilter_StringTokenizer0.setDelimsAreTokens(false);
      tokenFilter_StringTokenizer0.setDelims("");
      tokenFilter_StringTokenizer0.getPostToken();
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter tokenFilter0 = new TokenFilter();
      Reader reader0 = tokenFilter_IgnoreBlank0.chain(tokenFilter0);
      tokenFilter_ReplaceString0.chain(reader0);
      tokenFilter_ReplaceString0.setTo("");
      tokenFilter_ReplaceString0.setTo("");
      tokenFilter_StringTokenizer0.setSuppressDelims(false);
      TokenFilter tokenFilter1 = new TokenFilter();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank1 = new TokenFilter.IgnoreBlank();
      tokenFilter1.addIgnoreBlank(tokenFilter_IgnoreBlank1);
      TokenFilter.ContainsString tokenFilter_ContainsString0 = new TokenFilter.ContainsString();
      tokenFilter_ContainsString0.setContains("");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      TokenFilter tokenFilter0 = null;
      try {
        tokenFilter0 = new TokenFilter((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      TokenFilter tokenFilter0 = new TokenFilter();
      // Undeclared exception!
      try { 
        tokenFilter0.createDynamicElement("+");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // createDynamicElement.TokenFilter - Unable to get the project
         //
         verifyException("org.apache.tools.ant.filters.TokenFilter", e);
      }
  }
}
