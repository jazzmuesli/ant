/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:15:22 GMT 2020
 */

package org.apache.tools.ant.filters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import org.apache.tools.ant.filters.StringInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringInputStream_ESTest extends StringInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      stringInputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      byte[] byteArray0 = new byte[0];
      int int0 = stringInputStream0.read(byteArray0, 1833, 1833);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("*D,a{x02gWz");
      int int0 = stringInputStream0.read();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      stringInputStream0.mark(849);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("bX0scxi<", "");
      int int0 = stringInputStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      boolean boolean0 = stringInputStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("+");
      stringInputStream0.close();
      try { 
        stringInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("", "");
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        stringInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("*D,a{x02gWz");
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        stringInputStream0.read(byteArray0, 2041, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      stringInputStream0.close();
      byte[] byteArray0 = new byte[0];
      try { 
        stringInputStream0.read(byteArray0, (-898), (-898));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("ZLMTLw?S~}mG", "");
      try { 
        stringInputStream0.read();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      stringInputStream0.close();
      try { 
        stringInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("", "");
      stringInputStream0.close();
      // Undeclared exception!
      try { 
        stringInputStream0.mark(944);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      // Undeclared exception!
      try { 
        stringInputStream0.mark((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("");
      stringInputStream0.close();
      // Undeclared exception!
      try { 
        stringInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringInputStream stringInputStream0 = new StringInputStream("M8X#_", "");
      stringInputStream0.close();
      try { 
        stringInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
         verifyException("org.apache.tools.ant.filters.StringInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringInputStream stringInputStream0 = null;
      try {
        stringInputStream0 = new StringInputStream((String) null, "xI(B)Z&xu$T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringInputStream stringInputStream0 = null;
      try {
        stringInputStream0 = new StringInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
