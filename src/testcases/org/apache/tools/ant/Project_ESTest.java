/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:48:56 GMT 2020
 */

package org.apache.tools.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Hashtable;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tools.ant.AntClassLoader;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.DummyTaskOk;
import org.apache.tools.ant.DummyTaskPackage;
import org.apache.tools.ant.DummyTaskWithoutPublicConstructor;
import org.apache.tools.ant.IntrospectionHelper;
import org.apache.tools.ant.MockBuildListener;
import org.apache.tools.ant.NoBannerLogger;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.ProjectTest;
import org.apache.tools.ant.Target;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.TaskAdapter;
import org.apache.tools.ant.UnknownElement;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.types.FilterSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.WeakishReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Project_ESTest extends Project_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Project project0 = new Project();
      // Undeclared exception!
      try { 
        project0.fireTargetStarted((Target) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Project project0 = new Project();
      String string0 = null;
      Hashtable<MockBuildListener, WeakishReference> hashtable0 = null;
      // Undeclared exception!
      try { 
        project0.topoSort((String) null, (Hashtable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Project project0 = new Project();
      Project.getJavaVersion();
      project0.setDescription("");
      project0.demuxOutput("1.4", true);
      project0.createDataType("");
      project0.getDescription();
      Project project1 = new Project();
      File file0 = project1.getBaseDir();
      boolean boolean0 = true;
      try { 
        project0.copyFile(file0, file0, true, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /projects/ant (Is a directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Project project0 = new Project();
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        project0.fireMessageLogged((Target) null, "84", (-2783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Project project0 = new Project();
      File file0 = project0.getBaseDir();
      project0.copyFile(file0, file0, false, false, true);
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Project project0 = new Project();
      Class<DummyTaskOk> class0 = DummyTaskOk.class;
      project0.addTaskDefinition("", class0);
      // Undeclared exception!
      try { 
        project0.getDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Description", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Project project0 = new Project();
      // Undeclared exception!
      try { 
        project0.executeTargets((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Project project0 = new Project();
      Project project1 = new Project();
      File file0 = project1.resolveFile("Y{P|C5m@GF1b-,");
      try { 
        project0.setBaseDir(file0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Basedir /projects/ant/Y{P|C5m@GF1b-, does not exist
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Project project0 = new Project();
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      String string0 = "=Fqg4*H=t";
      project0.setName("=Fqg4*H=t");
      Target target1 = mock(Target.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        project0.fireTargetFinished((Target) null, (Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      project0.getReferences();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      // Undeclared exception!
      try { 
        project0.addReference((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Project project0 = new Project();
      project0.getBaseDir();
      Project project1 = new Project();
      project0.copyInheritedProperties(project1);
      String string0 = "";
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      project1.log(target0, "", 741);
      Target target1 = mock(Target.class, new ViolatedAssumptionAnswer());
      project1.addTarget("", target1);
      // Undeclared exception!
      try { 
        project0.addOrReplaceTarget("", (Target) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Project project0 = new Project();
      File file0 = project0.getBaseDir();
      project0.copyFile(file0, file0, false);
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Project.toBoolean((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn("").when(target0).getName();
      project0.demuxOutput((String) null, true);
      project0.addOrReplaceTarget(target0);
      try { 
        project0.executeTarget("2?/I)E$u(jQ0AW%; ZK");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Target `2?/I)E$u(jQ0AW%; ZK' does not exist in this project. 
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Project project0 = new Project();
      project0.setNewProperty("y<R/:C&qv|[Et", "y<R/:C&qv|[Et");
      project0.log("y<R/:C&qv|[Et", (-12));
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.addFilter("y<R/:C&qv|[Et", "y<R/:C&qv|[Et");
      project0.getThreadTask(thread0);
      project0.getDefaultInputStream();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn("^&~KZpb").when(target0).getName();
      project0.addTarget(target0);
      File file0 = project0.getBaseDir();
      project0.resolveFile("^&~KZpb", file0);
      Target target1 = mock(Target.class, new ViolatedAssumptionAnswer());
      project0.addOrReplaceTarget("^&~KZpb", target1);
      project0.fireBuildStarted();
      project0.getReference("y<R/:C&qv|[Et");
      AntClassLoader antClassLoader0 = project0.createClassLoader((Path) null);
      project0.removeBuildListener(antClassLoader0);
      Target target2 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target2).getProject();
      project0.fireMessageLogged(target2, "", 0);
      project0.getReference("y<R/:C&qv|[Et");
      // Undeclared exception!
      try { 
        project0.copyFile("", "J+go+vN|ey[(vE[93LA", true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Project project0 = new Project();
      project0.resolveFile("rjHX");
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.getThreadTask(thread0);
      project0.getCoreLoader();
      String string0 = "";
      project0.setBasedir("");
      String string1 = "*0$xUa\"f(+8g~<";
      project0.resolveFile("*0$xUa\"f(+8g~<");
      // Undeclared exception!
      try { 
        project0.fireMessageLogged((Project) null, "rjHX", 2582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      project0.createDataType("");
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      project0.fireTargetStarted(target0);
      // Undeclared exception!
      try { 
        project0.getThreadTask((Thread) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "6@2-6E,";
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.getThreadTask(thread0);
      Path path0 = null;
      AntClassLoader antClassLoader0 = project0.createClassLoader((Path) null);
      project0.log("6@2-6E,", 2343);
      project0.addBuildListener(antClassLoader0);
      project0.setBasedir("");
      // Undeclared exception!
      try { 
        project0.copyFile("6@2-6E,", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Project project0 = new Project();
      File file0 = null;
      InputHandler inputHandler0 = project0.getInputHandler();
      project0.setInputHandler(inputHandler0);
      // Undeclared exception!
      try { 
        project0.setBaseDir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      project0.addOrReplaceTarget("", target0);
      Target target1 = mock(Target.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      // Undeclared exception!
      try { 
        project0.setNewProperty((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "D8(TySp=U2U*Qg}]?";
      File file0 = project0.getBaseDir();
      File file1 = project0.resolveFile("D8(TySp=U2U*Qg}]?", file0);
      project0.copyFile(file1, file0, true);
      project0.getGlobalFilterSet();
      try { 
        project0.copyFile(file0, file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /projects/ant (Is a directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Project project0 = new Project();
      Project.getJavaVersion();
      project0.setDescription("");
      project0.demuxOutput("1.4", true);
      project0.createDataType("");
      // Undeclared exception!
      try { 
        project0.getElementName((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Project project0 = new Project();
      project0.getReferences();
      project0.getReference("");
      String string0 = "";
      File file0 = project0.resolveFile("L.}|Rez@c>BlUgs");
      File file1 = project0.resolveFile("", file0);
      project0.resolveFile("", file1);
      File file2 = project0.resolveFile("");
      try { 
        project0.copyFile(file2, file1, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      File file0 = project0.resolveFile("");
      project0.resolveFile("", file0);
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        project0.resolveFile((String) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Project project0 = new Project();
      String string0 = ":K8";
      String string1 = "";
      File file0 = project0.resolveFile("");
      project0.resolveFile(":K8", file0);
      project0.getFilters();
      project0.setName(":K8");
      // Undeclared exception!
      try { 
        project0.copyFile(file0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Project project0 = new Project();
      project0.getCoreLoader();
      project0.setCoreLoader((ClassLoader) null);
      Project.getJavaVersion();
      project0.setSystemProperties();
      // Undeclared exception!
      try { 
        project0.setProperty("J@=h}", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Project project0 = new Project();
      byte[] byteArray0 = new byte[3];
      File file0 = project0.getBaseDir();
      File file1 = project0.resolveFile("", file0);
      project0.copyFile(file1, file0, true);
      project0.getTargets();
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-1);
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        project0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Project.translatePath("/]Qpxu*)MfD8WEz(");
      Project project0 = new Project();
      Hashtable hashtable0 = project0.getFilters();
      try { 
        project0.topoSort("", hashtable0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Target `' does not exist in this project. 
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Project project0 = new Project();
      project0.setDefaultTarget((String) null);
      project0.getTargets();
      try { 
        project0.init();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Can't load default task list
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Project project0 = new Project();
      Project project1 = new Project();
      InputHandler inputHandler0 = project1.getInputHandler();
      project0.setInputHandler(inputHandler0);
      assertNotSame(project0, project1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Project project0 = new Project();
      project0.replaceProperties((String) null);
      project0.createDataType("^,DE-*$Ya&;");
      // Undeclared exception!
      try { 
        project0.copyFile("#ih^S5@", (String) null, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      project0.addOrReplaceTarget(">=B", target0);
      Project project1 = new Project();
      Project project2 = new Project();
      String string0 = "%(_";
      // Undeclared exception!
      try { 
        project1.setBasedir((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "y<R/:C&qv|[Et";
      project0.setNewProperty("y<R/:C&qv|[Et", "y<R/:C&qv|[Et");
      project0.log("y<R/:C&qv|[Et", (-12));
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.addFilter("y<R/:C&qv|[Et", "y<R/:C&qv|[Et");
      project0.getThreadTask(thread0);
      project0.getDefaultInputStream();
      String string1 = "^&~KZpb";
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(target0).getName();
      // Undeclared exception!
      try { 
        project0.addTarget(target0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "]N3Pc{uZ";
      project0.setUserProperty("]N3Pc{uZ", "]N3Pc{uZ");
      project0.setBasedir("");
      project0.setJavaVersionProperty();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      int int0 = 1349;
      try { 
        project0.defaultInput(byteArray0, 260, 1349);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // No input provided for project
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      project0.demuxOutput("", false);
      project0.log("");
      project0.setName("}ls*?h1!v{fC5QhR{Q");
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      project0.fireTargetStarted(target0);
      Project project1 = new Project();
      project1.copyInheritedProperties(project0);
      project1.getProperty("");
      project1.getReferences();
      project0.copyUserProperties(project1);
      project1.setJavaVersionProperty();
      project1.getDefaultInputStream();
      project0.addFilter("", "");
      try { 
        project1.init();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Can't load default task list
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Project project0 = new Project();
      FilterSet filterSet0 = project0.getGlobalFilterSet();
      project0.setDefaultTarget("0Mya=Jn");
      project0.setSystemProperties();
      project0.getDefaultInputStream();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      project0.getReferences();
      project0.fireTargetStarted(target0);
      project0.setDefaultInputStream((InputStream) null);
      project0.getElementName(filterSet0);
      project0.getFilters();
      String string0 = "&#+b";
      File file0 = project0.getBaseDir();
      project0.setBaseDir(file0);
      // Undeclared exception!
      try { 
        project0.copyFile("", "&#+b", false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Project project0 = new Project();
      // Undeclared exception!
      try { 
        project0.setUserProperty("<pu", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Project project0 = new Project();
      project0.getGlobalFilterSet();
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.getThreadTask(thread0);
      String string0 = "aD!?QXzR@iOaYiF";
      int int0 = (-1090);
      // Undeclared exception!
      try { 
        project0.log((Task) null, "aD!?QXzR@iOaYiF", (-1090));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Project project0 = new Project();
      AntClassLoader antClassLoader0 = project0.createClassLoader((Path) null);
      Project.setProjectOnObject(project0, antClassLoader0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Project project0 = new Project();
      File file0 = project0.getBaseDir();
      project0.copyFile(file0, file0);
      project0.getName();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        project0.copyFile("u(OxD1lw1dvly", "u(OxD1lw1dvly", true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      project0.fireTargetFinished(target0, throwable0);
      String string0 = "";
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      project0.fireBuildFinished(throwable1);
      project0.setProperty("", "");
      File file0 = project0.resolveFile("o");
      File file1 = project0.resolveFile("", file0);
      project0.resolveFile("", file1);
      project0.getElementName("");
      Class<MockBuildListener> class0 = MockBuildListener.class;
      try { 
        project0.checkTaskClass(class0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No public no-arg constructor in class org.apache.tools.ant.MockBuildListener
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      String string0 = "T~XQb2Co2\"& E~";
      project0.getReference("");
      project0.setProperty("", "");
      Target target1 = mock(Target.class, new ViolatedAssumptionAnswer());
      project0.addTarget("T~XQb2Co2\"& E~", target1);
      try { 
        project0.setBasedir("T~XQb2Co2\"& E~");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Basedir /projects/ant/T~XQb2Co2\"& E~ does not exist
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Project.translatePath("");
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      project0.fireTargetStarted(target0);
      project0.addReference("", "");
      String string0 = "";
      // Undeclared exception!
      try { 
        project0.copyFile("", "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Project project0 = new Project();
      String string0 = null;
      // Undeclared exception!
      try { 
        project0.setInheritedProperty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Project project0 = new Project();
      project0.getReference("xTs");
      Project.setProjectOnObject(project0, (Object) null);
      Class<Object> class0 = Object.class;
      project0.addDataTypeDefinition(":8>8^HA8\u0006gzl>AW3Qt", class0);
      Hashtable hashtable0 = project0.getProperties();
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Project.getJavaVersion();
      Project project0 = new Project();
      project0.log("1.4");
      project0.getCoreLoader();
      project0.setCoreLoader((ClassLoader) null);
      project0.fireBuildStarted();
      project0.getProperty("OzPf{hN-r8>k:%KC!!v");
      project0.getBuildListeners();
      project0.getDataTypeDefinitions();
      project0.getDefaultInputStream();
      project0.setDefaultInputStream((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      project0.addOrReplaceTarget("", target0);
      project0.setJavaVersionProperty();
      File file0 = project0.resolveFile("");
      File file1 = project0.resolveFile("", file0);
      project0.setBaseDir(file1);
      project0.setJavaVersionProperty();
      project0.getProperties();
      project0.getGlobalFilterSet();
      // Undeclared exception!
      try { 
        project0.copyFile(file1, file0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Project project0 = new Project();
      // Undeclared exception!
      try { 
        project0.copyFile("", "L6`:8XSqP", true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "yq:Ex-0.|+PN";
      project0.addFilter("yq:Ex-0.|+PN", "");
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.getThreadTask(thread0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      Project project1 = new Project();
      project0.fireMessageLogged(project1, "", 0);
      String string1 = "VSd:fhJl,Ar";
      boolean boolean0 = false;
      project0.demuxFlush("VSd:fhJl,Ar", false);
      project0.fireMessageLogged(target0, "VSd:fhJl,Ar", (-225));
      // Undeclared exception!
      try { 
        project0.fireTaskFinished((Task) null, throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      project0.setSystemProperties();
      String string1 = "";
      project0.demuxFlush(")q79.RXMR]k_]D+l", true);
      // Undeclared exception!
      try { 
        project0.copyFile("", "", true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Project project0 = new Project();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        project0.addDataTypeDefinition((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Project project0 = new Project();
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      project0.setBasedir("");
      String string1 = "8`v$";
      File file0 = project0.resolveFile("8`v$");
      File file1 = project0.resolveFile("", file0);
      try { 
        project0.copyFile(file1, file1, false, false, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /projects/ant/8`v$ (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Project project0 = new Project();
      project0.getUserProperty("c{c6k8\"e");
      project0.getName();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-114);
      try { 
        project0.demuxInput(byteArray0, (-1), 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // No input provided for project
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Project project0 = new Project();
      String string0 = null;
      String string1 = "K/R.Sd!k.";
      // Undeclared exception!
      try { 
        project0.createTask((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Project project0 = new Project();
      Project project1 = new Project();
      project1.getTaskDefinitions();
      project0.copyUserProperties(project1);
      Task task0 = null;
      // Undeclared exception!
      try { 
        project0.fireTaskStarted((Task) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Project project0 = new Project();
      project0.getBaseDir();
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      String string0 = ">PK|pfJi<rFSaE$";
      project0.createTask(">PK|pfJi<rFSaE$");
      // Undeclared exception!
      try { 
        project0.registerThreadTask(thread0, (Task) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Project project0 = new Project();
      project0.getInputHandler();
      String string0 = "T8&1]S^";
      project0.setDescription("T8&1]S^");
      // Undeclared exception!
      try { 
        project0.log((Target) null, "T8&1]S^", (-2156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Project project0 = new Project();
      try { 
        project0.executeTarget("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Target `' does not exist in this project. 
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      project0.log("");
      project0.getUserProperties();
      project0.getElementName("");
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((Path) null).when(path0).concatSystemClasspath(anyString());
      // Undeclared exception!
      try { 
        project0.createClassLoader(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.AntClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "w S8lT@-9>C|~_Z";
      String string1 = "";
      boolean boolean0 = true;
      project0.getProperties();
      Target target0 = null;
      // Undeclared exception!
      try { 
        project0.addTarget("", (Target) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "`gJcH 8];JUUsYzu[N";
      project0.fireBuildFinished((Throwable) null);
      project0.setDescription("`gJcH 8];JUUsYzu[N");
      Project project1 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(target0).getName();
      // Undeclared exception!
      try { 
        project0.addOrReplaceTarget(target0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Project project0 = new Project();
      project0.setDescription("WGB");
      project0.getBuildListeners();
      Project project1 = new Project();
      project0.copyUserProperties(project1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)118;
      byteArray0[1] = (byte)118;
      project1.copyUserProperties(project0);
      byteArray0[2] = (byte)0;
      String string0 = "fQ+4z'z%0s.!Q%0dVl";
      project1.resolveFile("");
      boolean boolean0 = true;
      project1.setName("WGB");
      Class<Object> class0 = Object.class;
      try { 
        project0.checkTaskClass(class0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No public execute() in class java.lang.Object
         //
         verifyException("org.apache.tools.ant.TaskAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Project project0 = new Project();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(target0).getProject();
      project0.log(target0, "", 0);
      // Undeclared exception!
      try { 
        project0.getDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Description", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Project project0 = new Project();
      project0.getBuildListeners();
      Project project1 = new Project();
      project0.copyUserProperties(project1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)118;
      byteArray0[1] = (byte)118;
      project1.copyUserProperties(project0);
      byteArray0[2] = (byte)0;
      String string0 = "fQ+4z'z%0s.!Q%0dVl";
      project1.resolveFile("");
      boolean boolean0 = true;
      Class<Object> class0 = Object.class;
      try { 
        project0.checkTaskClass(class0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No public execute() in class java.lang.Object
         //
         verifyException("org.apache.tools.ant.TaskAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Project project0 = new Project();
      File file0 = project0.resolveFile("");
      // Undeclared exception!
      try { 
        project0.copyFile(file0, file0, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Project project0 = new Project();
      // Undeclared exception!
      try { 
        project0.resolveFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      Project project1 = new Project();
      project1.demuxOutput("_S}", false);
      project0.copyUserProperties(project1);
      File file0 = project0.resolveFile("%=p'");
      File file1 = project0.resolveFile("", file0);
      boolean boolean0 = false;
      try { 
        project0.copyFile(file1, file1, false, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /projects/ant/%=p' (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      Project.toBoolean("|lk&P!VJ");
      Class<UnknownElement> class0 = UnknownElement.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)1;
      try { 
        project0.demuxInput(byteArray0, (byte)0, 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // No input provided for project
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Project project0 = new Project();
      project0.setDefault("z% n#r,A");
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((Path) null).when(path0).concatSystemClasspath(anyString());
      project0.setName("");
      // Undeclared exception!
      try { 
        project0.createClassLoader(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.AntClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Project project0 = new Project();
      project0.getTaskDefinitions();
      project0.getProperties();
      project0.demuxOutput("J}n;#", false);
      project0.getProperties();
      Project.getJavaVersion();
      project0.setBasedir("");
      project0.setInheritedProperty("i3Uq4oeC,2T", "i3Uq4oeC,2T");
      Project project1 = new Project();
      project0.fireMessageLogged(project1, "oH", 0);
      project0.setName("}");
      assertNotSame(project0, project1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Project project0 = new Project();
      Project.setProjectOnObject(project0, project0);
      File file0 = project0.getBaseDir();
      Project project1 = new Project();
      project0.copyInheritedProperties(project1);
      int int0 = 0;
      project0.log("%(zdE:mL}(3l)w", 0);
      project0.copyFile(file0, file0, false);
      project0.setJavaVersionProperty();
      project0.getCoreLoader();
      Project.getJavaVersion();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((Path) null).when(path0).concatSystemClasspath(anyString());
      // Undeclared exception!
      try { 
        project0.createClassLoader(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.AntClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Project project0 = new Project();
      String string0 = null;
      // Undeclared exception!
      try { 
        project0.getReference((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Project project0 = new Project();
      project0.getDataTypeDefinitions();
      // Undeclared exception!
      try { 
        project0.getDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Description", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Project project0 = new Project();
      File file0 = project0.resolveFile("");
      project0.getBaseDir();
      project0.setBaseDir(file0);
      project0.setSystemProperties();
      Target target0 = mock(Target.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(target0).getName();
      // Undeclared exception!
      try { 
        project0.addOrReplaceTarget(target0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Project project0 = new Project();
      File file0 = project0.getBaseDir();
      File file1 = project0.resolveFile("", file0);
      project0.resolveFile("-n[`,}U", file1);
      project0.log("R8@QFn}5)dfykMZ");
      project0.setInheritedProperty("", "\"y");
      // Undeclared exception!
      try { 
        project0.createDataType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Project project0 = new Project();
      Project project1 = new Project();
      File file0 = project0.getBaseDir();
      File file1 = project1.resolveFile("", file0);
      project0.getDefaultTarget();
      project1.setBaseDir(file1);
      project1.createDataType("TiYaENa");
      project0.addReference("%z/\"", (Object) null);
      project0.getFilters();
      project0.setSystemProperties();
      Class<Object> class0 = Object.class;
      try { 
        project0.checkTaskClass(class0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No public execute() in class java.lang.Object
         //
         verifyException("org.apache.tools.ant.TaskAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Project project0 = new Project();
      String string0 = "";
      Class<NoBannerLogger> class0 = NoBannerLogger.class;
      try { 
        project0.addTaskDefinition("", class0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No public execute() in class org.apache.tools.ant.NoBannerLogger
         //
         verifyException("org.apache.tools.ant.TaskAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Project project0 = new Project();
      project0.getCoreLoader();
      project0.setCoreLoader((ClassLoader) null);
      String string0 = "";
      Project project1 = new Project();
      File file0 = project1.resolveFile("");
      // Undeclared exception!
      try { 
        project0.copyFile(file0, file0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Project project0 = new Project();
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.getThreadTask(thread0);
      File file0 = project0.getBaseDir();
      File file1 = project0.resolveFile("KB@(#bj.3|\" ob?o", file0);
      project0.copyFile(file1, file0, false, false);
      // Undeclared exception!
      try { 
        project0.fireMessageLogged((Task) null, (String) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Project project0 = new Project();
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      project0.getThreadTask(thread0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        project0.fireTaskFinished((Task) null, throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Project.setProjectOnObject((Project) null, (Object) null);
      Project.translatePath("");
      Project.toBoolean("");
      Project.translatePath("");
      Project.translatePath((String) null);
      Project.getJavaVersion();
      Project.getJavaVersion();
      Project project0 = new Project();
      project0.getReference("");
      Project.setProjectOnObject((Project) null, (Object) null);
      String string0 = null;
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((Path) null).when(path0).concatSystemClasspath(anyString());
      Class<TaskAdapter> class0 = TaskAdapter.class;
      project0.checkTaskClass(class0);
      // Undeclared exception!
      try { 
        project0.createClassLoader(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.AntClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Project project0 = new Project();
      byte[] byteArray0 = new byte[7];
      Project.translatePath("");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      project0.getDefaultInputStream();
      byteArray0[6] = (byte) (-99);
      try { 
        project0.defaultInput(byteArray0, (byte)0, (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // No input provided for project
         //
         verifyException("org.apache.tools.ant.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Project project0 = new Project();
          String string0 = null;
          File file0 = project0.getBaseDir();
          try { 
            project0.setFileLastModified(file0, 0L);
            fail("Expecting exception: BuildException");
          
          } catch(BuildException e) {
             //
             // Exception setting the modification time of /projects/ant
             //
             verifyException("org.apache.tools.ant.util.FileUtils", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Project project0 = new Project();
      // Undeclared exception!
      try { 
        project0.copyFile("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.FileUtils", e);
      }
  }
}
