/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:21:30 GMT 2020
 */

package org.apache.tools.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.Hashtable;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.RuntimeConfigurable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.AttributeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RuntimeConfigurable_ESTest extends RuntimeConfigurable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("\"", "\"");
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      runtimeConfigurable0.reconfigure(project0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      runtimeConfigurable0.maybeConfigure((Project) null, true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      runtimeConfigurable0.maybeConfigure(project0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      char[] charArray0 = new char[9];
      runtimeConfigurable0.addText(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      runtimeConfigurable0.setProxy("\"Bw[((_");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      StringBuffer stringBuffer0 = runtimeConfigurable0.getText();
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      Object object0 = runtimeConfigurable0.getProxy();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      String string0 = runtimeConfigurable0.getElementTag();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      Enumeration enumeration0 = runtimeConfigurable0.getChildren();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      AttributeList attributeList0 = runtimeConfigurable0.getAttributes();
      assertNull(attributeList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      Hashtable hashtable0 = runtimeConfigurable0.getAttributeMap();
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("\"", "\"");
      runtimeConfigurable0.addChild(runtimeConfigurable0);
      RuntimeConfigurable runtimeConfigurable1 = runtimeConfigurable0.getChild(0);
      assertSame(runtimeConfigurable0, runtimeConfigurable1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      // Undeclared exception!
      try { 
        runtimeConfigurable0.setAttributes((AttributeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xml.sax.helpers.AttributeListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("%q>Dyuj Q&}Sj{x/AA", "");
      // Undeclared exception!
      try { 
        runtimeConfigurable0.setAttribute("%q>Dyuj Q&}Sj{x/AA", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      runtimeConfigurable0.addText((String) null);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      // Undeclared exception!
      try { 
        runtimeConfigurable0.reconfigure(project0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support nested text data.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable((Object) null, "$YqRZfO q_nE+55DM");
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        runtimeConfigurable0.reconfigure(project0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.RuntimeConfigurable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("u<=o<_8Q`ke|", "u<=o<_8Q`ke|");
      runtimeConfigurable0.addText("u<=o<_8Q`ke|");
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      try { 
        runtimeConfigurable0.maybeConfigure(project0, true);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support nested text data.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable((Object) null, (String) null);
      // Undeclared exception!
      try { 
        runtimeConfigurable0.maybeConfigure((Project) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.RuntimeConfigurable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      runtimeConfigurable0.setAttribute("", "rl5?&1]VqGJ7[");
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      doReturn((String) null).when(project0).replaceProperties(anyString());
      try { 
        runtimeConfigurable0.maybeConfigure(project0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the \"\" attribute.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable((Object) null, "nO6 50wTc!eGNT;r");
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        runtimeConfigurable0.maybeConfigure(project0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.RuntimeConfigurable", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("Q4iM.?", "Q4iM.?");
      // Undeclared exception!
      try { 
        runtimeConfigurable0.getChild(541);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 541 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable((Object) null, "/]R{NCdu");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        runtimeConfigurable0.addText(charArray0, (-127), (-845));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RuntimeConfigurable runtimeConfigurable0 = new RuntimeConfigurable("", "");
      // Undeclared exception!
      try { 
        runtimeConfigurable0.addText((char[]) null, 671, 671);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
