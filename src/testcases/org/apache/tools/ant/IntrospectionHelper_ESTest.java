/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:49:36 GMT 2020
 */

package org.apache.tools.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.IntrospectionHelper;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.filters.TokenFilter;
import org.apache.tools.ant.taskdefs.DynamicTask;
import org.apache.tools.ant.taskdefs.XSLTProcess;
import org.apache.tools.ant.types.FilterChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntrospectionHelper_ESTest extends IntrospectionHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntrospectionHelper.getHelper((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<DynamicTask> class0 = DynamicTask.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      String string0 = "";
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        introspectionHelper0.getElementName((Project) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Project project0 = null;
      Class<DynamicTask.Sub> class0 = DynamicTask.Sub.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper((Project) null, class0);
      String string0 = "bQSwTpi";
      String string1 = "";
      // Undeclared exception!
      try { 
        introspectionHelper0.createElement(project0, string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<TokenFilter> class0 = TokenFilter.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      introspectionHelper0.supportsCharacters();
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.targetFinished(buildEvent0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      introspectionHelper0.getElementName(project0, project0);
      Project project1 = null;
      // Undeclared exception!
      try { 
        introspectionHelper0.throwNotSupported((Project) null, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      Class<FilterChain> class0 = FilterChain.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(project0, class0);
      introspectionHelper0.getAttributes();
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        introspectionHelper0.addText(project1, class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<IntrospectionHelper> class0 = IntrospectionHelper.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      introspectionHelper0.getElementName(project0, class0);
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      Class<BuildException> class1 = BuildException.class;
      IntrospectionHelper.getHelper(project1, class1);
      String string0 = "~\\oP|8[";
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      Class<String> class2 = String.class;
      IntrospectionHelper introspectionHelper1 = IntrospectionHelper.getHelper(class2);
      Project project3 = mock(Project.class, new ViolatedAssumptionAnswer());
      IntrospectionHelper.getHelper(project3, class2);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper1.supportsCharacters();
      introspectionHelper1.targetStarted(buildEvent0);
      String string1 = "Y]p:@zOB_@)FJ{K'";
      // Undeclared exception!
      try { 
        introspectionHelper0.setAttribute(project2, introspectionHelper1, (String) null, "Y]p:@zOB_@)FJ{K'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<XSLTProcess.Factory.Attribute> class0 = XSLTProcess.Factory.Attribute.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      String string0 = null;
      // Undeclared exception!
      try { 
        introspectionHelper0.getElementType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      Class<TokenFilter> class0 = TokenFilter.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(project0, class0);
      introspectionHelper0.supportsCharacters();
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project1).getElementName(any());
      Object object0 = null;
      Enumeration enumeration0 = introspectionHelper0.getNestedElements();
      String string0 = "PB$'k|276rc)";
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project2).getElementName(any());
      introspectionHelper0.getElementName(project2, enumeration0);
      try { 
        introspectionHelper0.addText(project1, (Object) null, "PB$'k|276rc)");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support nested text data.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<BuildException> class0 = BuildException.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.addText(project0, "", "");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<TokenFilter> class0 = TokenFilter.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      introspectionHelper0.getAttributes();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      String string0 = "/aI=]p<";
      introspectionHelper0.storeElement(project0, "/aI=]p<", class0, "/aI=]p<");
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      String string1 = "xUl\\.!:WmmHr";
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project2).getElementName(any());
      try { 
        introspectionHelper0.createElement(project2, project2, "xUl.!:WmmHr");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the nested \"xUl.!:WmmHr\" element.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.buildStarted(buildEvent0);
      String string0 = null;
      // Undeclared exception!
      try { 
        introspectionHelper0.getAttributeType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.taskStarted(buildEvent0);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.buildStarted(buildEvent1);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.taskFinished(buildEvent2);
      BuildEvent buildEvent3 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.taskStarted(buildEvent3);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      Class<TokenFilter> class1 = TokenFilter.class;
      IntrospectionHelper introspectionHelper1 = IntrospectionHelper.getHelper(class1);
      BuildEvent buildEvent4 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper1.messageLogged(buildEvent4);
      BuildEvent buildEvent5 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper1.buildFinished(buildEvent5);
      introspectionHelper0.getElementName(project0, (Object) null);
      BuildEvent buildEvent6 = null;
      introspectionHelper0.taskStarted((BuildEvent) null);
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      Class<DynamicTask> class2 = DynamicTask.class;
      IntrospectionHelper introspectionHelper2 = IntrospectionHelper.getHelper(project1, class2);
      introspectionHelper2.taskStarted((BuildEvent) null);
      introspectionHelper2.targetFinished((BuildEvent) null);
      introspectionHelper2.targetFinished((BuildEvent) null);
      introspectionHelper2.messageLogged((BuildEvent) null);
      // Undeclared exception!
      try { 
        introspectionHelper1.supportsNestedElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      introspectionHelper0.getElementName(project0, project0);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.taskFinished(buildEvent0);
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project1).getElementName(any());
      String string0 = "";
      try { 
        introspectionHelper0.setAttribute(project1, project1, "", "");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the \"\" attribute.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      String string0 = "QN!";
      try { 
        introspectionHelper0.getElementType("QN!");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Class java.lang.String doesn't support the nested \"QN!\" element.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.taskStarted(buildEvent0);
      Project project0 = null;
      IntrospectionHelper.getHelper((Project) null, class0);
      String string0 = "";
      // Undeclared exception!
      try { 
        introspectionHelper0.createElement((Project) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      Class<XSLTProcess.Factory.Attribute> class0 = XSLTProcess.Factory.Attribute.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(project0, class0);
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project1).getElementName(any());
      String string0 = introspectionHelper0.getElementName(project1, project1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      String string0 = "tD2{$O";
      try { 
        introspectionHelper0.setAttribute(project0, project0, "tD2{$O", "tD2{$O");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the \"tD2{$O\" attribute.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<XSLTProcess.Factory.Attribute> class0 = XSLTProcess.Factory.Attribute.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      String string0 = null;
      // Undeclared exception!
      try { 
        introspectionHelper0.throwNotSupported(project0, project0, (String) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the nested \"null\" element.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<TokenFilter> class0 = TokenFilter.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.buildStarted(buildEvent0);
      String string0 = "";
      try { 
        introspectionHelper0.getAttributeType("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Class org.apache.tools.ant.filters.TokenFilter doesn't support the \"\" attribute.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      Class<BuildException> class0 = BuildException.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(project0, class0);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.targetFinished(buildEvent1);
      introspectionHelper0.targetStarted(buildEvent0);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = introspectionHelper0.supportsNestedElement(":_6yG G5KE");
      introspectionHelper0.targetStarted(buildEvent2);
      BuildEvent buildEvent3 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.targetStarted(buildEvent3);
      BuildEvent buildEvent4 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      introspectionHelper0.taskStarted(buildEvent4);
      boolean boolean1 = introspectionHelper0.supportsCharacters();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<DynamicTask> class0 = DynamicTask.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      introspectionHelper0.taskStarted((BuildEvent) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<DynamicTask> class0 = DynamicTask.class;
      IntrospectionHelper.getHelper(class0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(project1, class0);
      String string0 = "";
      try { 
        introspectionHelper0.createElement(project0, class0, "");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the nested \"\" element.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<TokenFilter> class0 = TokenFilter.class;
      IntrospectionHelper introspectionHelper0 = IntrospectionHelper.getHelper(class0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      String string0 = "aqz";
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      IntrospectionHelper.getHelper(project1, class0);
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project2).getElementName(any());
      try { 
        introspectionHelper0.addText(project2, class0, "aqz");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support nested text data.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }
}
