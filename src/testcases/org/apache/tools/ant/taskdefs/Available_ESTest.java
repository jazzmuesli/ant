/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:55:26 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Available;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Available_ESTest extends Available_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Available available0 = new Available();
      available0.setResource("");
      boolean boolean0 = available0.eval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Available.FileDir available_FileDir0 = new Available.FileDir();
      boolean boolean0 = available_FileDir0.isFile();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Available.FileDir available_FileDir0 = new Available.FileDir();
      boolean boolean0 = available_FileDir0.isDir();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Available.FileDir available_FileDir0 = new Available.FileDir();
      String[] stringArray0 = available_FileDir0.getValues();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Available available0 = new Available();
      available0.setValue((String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Available available0 = new Available();
      Available.FileDir available_FileDir0 = new Available.FileDir();
      available0.setType(available_FileDir0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Available available0 = new Available();
      available0.setProperty("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Available available0 = new Available();
      available0.setIgnoresystemclasses(false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Available available0 = new Available();
      available0.setClasspathRef((Reference) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Available available0 = new Available();
      available0.setClassname("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Available available0 = new Available();
      Path path0 = available0.createClasspath();
      available0.setFilepath(path0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Available available0 = new Available();
      // Undeclared exception!
      try { 
        available0.setType("4\"\"R+@x^:3j0S2]}]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Available available0 = new Available();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        available0.setFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Available", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Available available0 = new Available();
      try { 
        available0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // property attribute is required
         //
         verifyException("org.apache.tools.ant.taskdefs.Available", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Available available0 = new Available();
      try { 
        available0.eval();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // At least one of (classname|file|resource) is required
         //
         verifyException("org.apache.tools.ant.taskdefs.Available", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Available available0 = new Available();
      Path path0 = available0.createFilepath();
      available0.setClasspath(path0);
      available0.setResource("");
      // Undeclared exception!
      try { 
        available0.eval();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Available", e);
      }
  }
}
