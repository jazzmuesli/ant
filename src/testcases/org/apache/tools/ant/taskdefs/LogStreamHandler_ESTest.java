/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:50:19 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.LogStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LogStreamHandler_ESTest extends LogStreamHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      LogStreamHandler logStreamHandler0 = new LogStreamHandler(task0, 0, 1);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = logStreamHandler0.getErr();
      logStreamHandler0.createProcessOutputPump(inputStream0, outputStream0);
      InputStream inputStream1 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      logStreamHandler0.createProcessErrorPump(inputStream1, outputStream0);
      logStreamHandler0.stop();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogStreamHandler logStreamHandler0 = new LogStreamHandler((Task) null, 2802, 2802);
      // Undeclared exception!
      try { 
        logStreamHandler0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.PumpStreamHandler", e);
      }
  }
}
