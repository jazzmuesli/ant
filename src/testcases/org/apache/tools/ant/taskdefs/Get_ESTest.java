/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:53:58 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.net.URLStreamHandler;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Get;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Get_ESTest extends Get_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Get get0 = new Get();
      Get.Base64Converter get_Base64Converter0 = get0.new Base64Converter();
      byte[] byteArray0 = new byte[1];
      String string0 = get_Base64Converter0.encode(byteArray0);
      assertEquals("AA==", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Get get0 = new Get();
      Get.Base64Converter get_Base64Converter0 = get0.new Base64Converter();
      String string0 = get_Base64Converter0.encode("AA==");
      assertEquals("QUEAPT0=", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Get get0 = new Get();
      get0.setVerbose(true);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Get get0 = new Get();
      get0.setUsername("!-f%d.i$[8a>Ks");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Get get0 = new Get();
      get0.setUseTimestamp(false);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Get get0 = new Get();
      get0.setPassword("!-f%d.i$[8a>Ks");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Get get0 = new Get();
      get0.setIgnoreErrors(true);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Get get0 = new Get();
      try { 
        get0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // src attribute is required
         //
         verifyException("org.apache.tools.ant.taskdefs.Get", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Get get0 = new Get();
      MockFile mockFile0 = new MockFile("!-f%d.i$[8a>Ks", "org.apache.xalan.xpath.SimpleNodeLocator$FileFilter");
      get0.setDest(mockFile0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("!-f%d.i$[8a>Ks", "RSRbG1:bP", 1, "RSRbG1:bP", uRLStreamHandler0);
      get0.setSrc(uRL0);
      // Undeclared exception!
      try { 
        get0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }
}
