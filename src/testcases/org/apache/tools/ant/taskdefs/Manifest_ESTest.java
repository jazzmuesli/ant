/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 23:01:11 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.util.Enumeration;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Manifest;
import org.apache.tools.ant.taskdefs.ManifestException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Manifest_ESTest extends Manifest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Manifest.Section manifest_Section0 = new Manifest.Section();
      Manifest.Attribute manifest_Attribute0 = manifest_Section0.getAttribute("");
      assertNull(manifest_Attribute0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Manifest.Section manifest_Section0 = new Manifest.Section();
      // Undeclared exception!
      try { 
        manifest_Section0.addAttributeAndCheck((Manifest.Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Manifest$Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Manifest.Attribute manifest_Attribute0 = null;
      try {
        manifest_Attribute0 = new Manifest.Attribute("");
        fail("Expecting exception: ManifestException");
      
      } catch(Throwable e) {
         //
         // Manifest line \"\" is not valid as it does not contain a name and a value separated by ': ' 
         //
         verifyException("org.apache.tools.ant.taskdefs.Manifest$Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Manifest.Attribute manifest_Attribute0 = new Manifest.Attribute();
      try { 
        manifest_Attribute0.parse(" ^4BjxC+2gIL8K`+|/");
        fail("Expecting exception: ManifestException");
      
      } catch(ManifestException e) {
         //
         // Manifest line \" ^4BjxC+2gIL8K`+|/\" is not valid as it does not contain a name and a value separated by ': ' 
         //
         verifyException("org.apache.tools.ant.taskdefs.Manifest$Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Manifest manifest0 = new Manifest();
      manifest0.merge((Manifest) null, false);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Manifest manifest0 = new Manifest();
      Enumeration enumeration0 = manifest0.getSectionNames();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Manifest manifest0 = new Manifest();
      String string0 = manifest0.getManifestVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Manifest manifest0 = new Manifest();
      boolean boolean0 = manifest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      try { 
        Manifest.getDefaultManifest();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Could not find default manifest: /org/apache/tools/ant/defaultManifest.mf
         //
         verifyException("org.apache.tools.ant.taskdefs.Manifest", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Manifest manifest0 = null;
      try {
        manifest0 = new Manifest((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
}
