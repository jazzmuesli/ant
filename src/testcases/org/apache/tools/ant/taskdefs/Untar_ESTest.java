/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:05:36 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.taskdefs.Untar;
import org.apache.tools.ant.util.FileUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Untar_ESTest extends Untar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Untar.UntarCompressionMethod untar_UntarCompressionMethod0 = new Untar.UntarCompressionMethod();
      String[] stringArray0 = untar_UntarCompressionMethod0.getValues();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Untar untar0 = new Untar();
      Untar.UntarCompressionMethod untar_UntarCompressionMethod0 = new Untar.UntarCompressionMethod();
      untar0.setCompression(untar_UntarCompressionMethod0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Untar untar0 = new Untar();
      FileUtils fileUtils0 = mock(FileUtils.class, new ViolatedAssumptionAnswer());
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(file0).toString();
      // Undeclared exception!
      try { 
        untar0.expandFile(fileUtils0, file0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }
}
