/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:51:12 GMT 2020
 */

package org.apache.tools.ant.taskdefs.email;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import org.apache.tools.ant.taskdefs.email.Message;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      Message message0 = new Message(file0);
      message0.setSrc((File) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Message message0 = new Message();
      message0.setMimeType("text/plain");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      Message message0 = new Message(file0);
      String string0 = message0.getMimeType();
      assertEquals("text/plain", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      Message message0 = new Message(file0);
      message0.addText("");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Message message0 = new Message("");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Message message0 = new Message();
      boolean boolean0 = message0.isMimeTypeSpecified();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      Message message0 = new Message(file0);
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        message0.print(printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
         verifyException("java.io.FilePermission", e);
      }
  }
}
