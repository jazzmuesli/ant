/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:52:11 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Delete;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.PatternSet;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
import org.apache.tools.ant.types.selectors.ContainsSelector;
import org.apache.tools.ant.types.selectors.DateSelector;
import org.apache.tools.ant.types.selectors.DependSelector;
import org.apache.tools.ant.types.selectors.DepthSelector;
import org.apache.tools.ant.types.selectors.ExtendSelector;
import org.apache.tools.ant.types.selectors.FilenameSelector;
import org.apache.tools.ant.types.selectors.MajoritySelector;
import org.apache.tools.ant.types.selectors.NoneSelector;
import org.apache.tools.ant.types.selectors.NotSelector;
import org.apache.tools.ant.types.selectors.OrSelector;
import org.apache.tools.ant.types.selectors.PresentSelector;
import org.apache.tools.ant.types.selectors.SelectSelector;
import org.apache.tools.ant.types.selectors.SizeSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Delete_ESTest extends Delete_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Delete delete0 = new Delete();
      String[] stringArray0 = new String[0];
      delete0.removeFiles((File) null, stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setVerbose(true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setQuiet(true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setIncludeEmptyDirs(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setFollowSymlinks(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setFile((File) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setFailOnError(true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setExcludes((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setDir((File) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setDefaultexcludes(false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setCaseSensitive(true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Delete delete0 = new Delete();
      PatternSet patternSet0 = delete0.createPatternSet();
      assertNotNull(patternSet0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Delete delete0 = new Delete();
      PatternSet.NameEntry patternSet_NameEntry0 = delete0.createIncludesFile();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Delete delete0 = new Delete();
      PatternSet.NameEntry patternSet_NameEntry0 = delete0.createInclude();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Delete delete0 = new Delete();
      PatternSet.NameEntry patternSet_NameEntry0 = delete0.createExcludesFile();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Delete delete0 = new Delete();
      PatternSet.NameEntry patternSet_NameEntry0 = delete0.createExclude();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Delete delete0 = new Delete();
      SizeSelector sizeSelector0 = mock(SizeSelector.class, new ViolatedAssumptionAnswer());
      delete0.addSize(sizeSelector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Delete delete0 = new Delete();
      SelectSelector selectSelector0 = mock(SelectSelector.class, new ViolatedAssumptionAnswer());
      delete0.addSelector(selectSelector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Delete delete0 = new Delete();
      PresentSelector presentSelector0 = mock(PresentSelector.class, new ViolatedAssumptionAnswer());
      delete0.addPresent(presentSelector0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Delete delete0 = new Delete();
      OrSelector orSelector0 = mock(OrSelector.class, new ViolatedAssumptionAnswer());
      delete0.addOr(orSelector0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Delete delete0 = new Delete();
      NotSelector notSelector0 = mock(NotSelector.class, new ViolatedAssumptionAnswer());
      delete0.addNot(notSelector0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Delete delete0 = new Delete();
      NoneSelector noneSelector0 = mock(NoneSelector.class, new ViolatedAssumptionAnswer());
      delete0.addNone(noneSelector0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Delete delete0 = new Delete();
      MajoritySelector majoritySelector0 = mock(MajoritySelector.class, new ViolatedAssumptionAnswer());
      delete0.addMajority(majoritySelector0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Delete delete0 = new Delete();
      FileSet fileSet0 = delete0.getImplicitFileSet();
      delete0.addFileset(fileSet0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Delete delete0 = new Delete();
      FilenameSelector filenameSelector0 = mock(FilenameSelector.class, new ViolatedAssumptionAnswer());
      delete0.addFilename(filenameSelector0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.addDepth((DepthSelector) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Delete delete0 = new Delete();
      DependSelector dependSelector0 = mock(DependSelector.class, new ViolatedAssumptionAnswer());
      delete0.addDepend(dependSelector0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Delete delete0 = new Delete();
      DateSelector dateSelector0 = mock(DateSelector.class, new ViolatedAssumptionAnswer());
      delete0.addDate(dateSelector0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Delete delete0 = new Delete();
      ExtendSelector extendSelector0 = mock(ExtendSelector.class, new ViolatedAssumptionAnswer());
      delete0.addCustom(extendSelector0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Delete delete0 = new Delete();
      ContainsRegexpSelector containsRegexpSelector0 = mock(ContainsRegexpSelector.class, new ViolatedAssumptionAnswer());
      delete0.addContainsRegexp(containsRegexpSelector0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Delete delete0 = new Delete();
      ContainsSelector containsSelector0 = mock(ContainsSelector.class, new ViolatedAssumptionAnswer());
      delete0.addContains(containsSelector0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Delete delete0 = new Delete();
      AndSelector andSelector0 = mock(AndSelector.class, new ViolatedAssumptionAnswer());
      delete0.addAnd(andSelector0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Delete delete0 = new Delete();
      // Undeclared exception!
      try { 
        delete0.setIncludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Delete delete0 = new Delete();
      // Undeclared exception!
      try { 
        delete0.setExcludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Delete delete0 = new Delete();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        delete0.removeFiles((File) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Delete", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Delete delete0 = new Delete();
      // Undeclared exception!
      try { 
        delete0.removeDir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Delete", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Delete delete0 = new Delete();
      try { 
        delete0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // At least one of the file or dir attributes, or a fileset element, must be set.
         //
         verifyException("org.apache.tools.ant.taskdefs.Delete", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Delete delete0 = new Delete();
      delete0.setIncludes("");
      // Undeclared exception!
      try { 
        delete0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }
}
