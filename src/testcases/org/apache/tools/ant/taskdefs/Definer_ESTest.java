/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:03:55 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Taskdef;
import org.apache.tools.ant.taskdefs.Typedef;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Definer_ESTest extends Definer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reference0).getRefId();
      taskdef0.setLoaderRef(reference0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      taskdef0.setClasspath((Path) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      taskdef0.setResource("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      taskdef0.setName((String) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      taskdef0.setFile((File) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      taskdef0.setClassname("Snawzo^o");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      boolean boolean0 = taskdef0.isReverseLoader();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      String string0 = taskdef0.getResource();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      String string0 = taskdef0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      String string0 = taskdef0.getLoaderId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      File file0 = taskdef0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      String string0 = taskdef0.getClasspathId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      String string0 = taskdef0.getClassname();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      Path path0 = taskdef0.createClasspath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Typedef typedef0 = new Typedef();
      // Undeclared exception!
      try { 
        typedef0.setReverseLoader(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      // Undeclared exception!
      try { 
        taskdef0.setLoaderRef((Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Definer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      // Undeclared exception!
      try { 
        taskdef0.setClasspathRef((Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Definer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(reference0).getRefId();
      doReturn((Object) null, (Object) null).when(reference0).getReferencedObject(any(org.apache.tools.ant.Project.class));
      taskdef0.setClasspathRef(reference0);
      Path path0 = taskdef0.getClasspath();
      // Undeclared exception!
      try { 
        taskdef0.setClasspath(path0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't denote a path null
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Taskdef taskdef0 = new Taskdef();
      // Undeclared exception!
      try { 
        taskdef0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Definer", e);
      }
  }
}
