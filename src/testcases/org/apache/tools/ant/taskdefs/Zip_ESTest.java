/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:47:48 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Zip;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Resource;
import org.apache.tools.ant.types.ZipFileSet;
import org.apache.tools.zip.ZipOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Zip_ESTest extends Zip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Zip zip0 = new Zip();
      Zip.WhenEmpty zip_WhenEmpty0 = new Zip.WhenEmpty();
      zip0.setWhenempty(zip_WhenEmpty0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Zip zip0 = new Zip();
      Zip.Duplicate zip_Duplicate0 = new Zip.Duplicate();
      zip0.setDuplicate(zip_Duplicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Resource[][] resourceArray0 = new Resource[2][5];
      boolean boolean0 = Zip.isEmpty(resourceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet[] fileSetArray0 = new FileSet[0];
      Resource[][] resourceArray0 = zip0.grabResources(fileSetArray0);
      assertEquals(0, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet fileSet0 = zip0.getImplicitFileSet();
      Resource[] resourceArray0 = new Resource[0];
      zip0.addResources(fileSet0, resourceArray0, (ZipOutputStream) null);
      assertEquals(0, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Zip.WhenEmpty zip_WhenEmpty0 = new Zip.WhenEmpty();
      String[] stringArray0 = zip_WhenEmpty0.getValues();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Zip.Duplicate zip_Duplicate0 = new Zip.Duplicate();
      String[] stringArray0 = zip_Duplicate0.getValues();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Zip.ArchiveState zip_ArchiveState0 = new Zip.ArchiveState(true, (Resource[][]) null);
      boolean boolean0 = zip_ArchiveState0.isOutOfDate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Zip.ArchiveState zip_ArchiveState0 = new Zip.ArchiveState(true, (Resource[][]) null);
      Resource[][] resourceArray0 = zip_ArchiveState0.getResourcesToAdd();
      assertNull(resourceArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setZipfile((File) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setUpdate(false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setFilesonly(false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setFile((File) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setEncoding("6C9}JKOmM#E");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setDestFile((File) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setCompress(false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.setBasedir((File) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.reset();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Zip zip0 = new Zip();
      boolean boolean0 = zip0.isInUpdateMode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Zip zip0 = new Zip();
      boolean boolean0 = zip0.isCompress();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Zip zip0 = new Zip();
      boolean boolean0 = zip0.isAddingNewFiles();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.initZipOutputStream((ZipOutputStream) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Zip zip0 = new Zip();
      String string0 = zip0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Zip zip0 = new Zip();
      File file0 = zip0.getDestFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.finalizeZipOutputStream((ZipOutputStream) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.cleanUp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.addZipfileset((ZipFileSet) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet fileSet0 = zip0.getImplicitFileSet();
      zip0.addZipGroupFileset(fileSet0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Zip zip0 = new Zip();
      zip0.addParentDirs((File) null, ",3KwluD..9S4Ml", (ZipOutputStream) null, ",3KwluD..9S4Ml", 2454);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet fileSet0 = zip0.getImplicitFileSet();
      zip0.addFileset(fileSet0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Zip zip0 = new Zip();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        zip0.zipFile(inputStream0, (ZipOutputStream) null, "", (-881L), (File) null, 3191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Zip zip0 = new Zip();
      // Undeclared exception!
      try { 
        zip0.zipFile((File) null, (ZipOutputStream) null, "{5EM[aqE]E6I6D", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Zip zip0 = new Zip();
      // Undeclared exception!
      try { 
        zip0.zipDir((File) null, (ZipOutputStream) null, "", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Zip zip0 = new Zip();
      // Undeclared exception!
      try { 
        zip0.setWhenempty((Zip.WhenEmpty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Zip zip0 = new Zip();
      // Undeclared exception!
      try { 
        zip0.setDuplicate((Zip.Duplicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Zip.isEmpty((Resource[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet[] fileSetArray0 = new FileSet[4];
      FileSet fileSet0 = zip0.getImplicitFileSet();
      fileSetArray0[0] = fileSet0;
      // Undeclared exception!
      try { 
        zip0.grabResources(fileSetArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for FileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet[] fileSetArray0 = new FileSet[9];
      // Undeclared exception!
      try { 
        zip0.grabResources(fileSetArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet[] fileSetArray0 = new FileSet[7];
      FileSet fileSet0 = zip0.getImplicitFileSet();
      fileSetArray0[0] = fileSet0;
      try { 
        zip0.getResourcesToAdd(fileSetArray0, (File) null, false);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for FileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Zip zip0 = new Zip();
      FileSet[] fileSetArray0 = new FileSet[5];
      // Undeclared exception!
      try { 
        zip0.getResourcesToAdd(fileSetArray0, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Zip zip0 = new Zip();
      try { 
        zip0.executeMain();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // basedir attribute must be set, or at least one fileset must be given!
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Zip zip0 = new Zip();
      try { 
        zip0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // basedir attribute must be set, or at least one fileset must be given!
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Zip zip0 = new Zip();
      // Undeclared exception!
      try { 
        zip0.createEmptyZip((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Zip zip0 = new Zip();
      Resource[] resourceArray0 = new Resource[0];
      // Undeclared exception!
      try { 
        zip0.addResources((FileSet) null, resourceArray0, (ZipOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Zip", e);
      }
  }
}
