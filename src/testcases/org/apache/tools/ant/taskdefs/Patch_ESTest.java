/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:29:50 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Patch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Patch_ESTest extends Patch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Patch patch0 = new Patch();
      patch0.setStrip(694);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Patch patch0 = new Patch();
      patch0.setReverse(false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Patch patch0 = new Patch();
      patch0.setQuiet(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Patch patch0 = new Patch();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      patch0.setOriginalfile(file0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Patch patch0 = new Patch();
      patch0.setIgnorewhitespace(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Patch patch0 = new Patch();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      patch0.setDir(file0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Patch patch0 = new Patch();
      patch0.setBackups(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Patch patch0 = new Patch();
      try { 
        patch0.setStrip((-231));
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // strip has to be >= 0
         //
         verifyException("org.apache.tools.ant.taskdefs.Patch", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Patch patch0 = new Patch();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).toString();
      // Undeclared exception!
      try { 
        patch0.setPatchfile(file0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // patchfile null doesn't exist
         //
         verifyException("org.apache.tools.ant.taskdefs.Patch", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Patch patch0 = new Patch();
      // Undeclared exception!
      try { 
        patch0.setPatchfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Patch", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Patch patch0 = new Patch();
      try { 
        patch0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // patchfile argument is required
         //
         verifyException("org.apache.tools.ant.taskdefs.Patch", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Patch patch0 = new Patch();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      patch0.setPatchfile(file0);
      // Undeclared exception!
      try { 
        patch0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Patch", e);
      }
  }
}
