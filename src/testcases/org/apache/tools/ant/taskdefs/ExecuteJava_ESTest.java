/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:22:14 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import org.apache.tools.ant.AntClassLoader;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.ExecuteJava;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.types.CommandlineJava;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.Watchdog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExecuteJava_ESTest extends ExecuteJava_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExecuteJava executeJava0 = new ExecuteJava();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        executeJava0.execute(project0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteJava", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExecuteJava executeJava0 = new ExecuteJava();
      Long long0 = new Long(2172L);
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      executeJava0.setOutput(printStream0);
      executeJava0.setTimeout(long0);
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(commandline0).getArguments();
      doReturn((String) null).when(commandline0).getExecutable();
      executeJava0.setJavaCommand(commandline0);
      PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      executeJava0.setOutput(printStream1);
      Watchdog watchdog0 = mock(Watchdog.class, new ViolatedAssumptionAnswer());
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      executeJava0.setClasspath(path0);
      executeJava0.timeoutOccured(watchdog0);
      executeJava0.run();
      executeJava0.run();
      PrintStream printStream2 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      executeJava0.setOutput(printStream2);
      executeJava0.killedProcess();
      CommandlineJava.SysProperties commandlineJava_SysProperties0 = mock(CommandlineJava.SysProperties.class, new ViolatedAssumptionAnswer());
      executeJava0.setSystemProperties(commandlineJava_SysProperties0);
      executeJava0.setTimeout(long0);
      PrintStream printStream3 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      executeJava0.setOutput(printStream3);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((AntClassLoader) null).when(project0).createClassLoader(any(org.apache.tools.ant.types.Path.class));
      doReturn((ClassLoader) null).when(project0).getCoreLoader();
      try { 
        executeJava0.execute(project0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteJava", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExecuteJava executeJava0 = new ExecuteJava();
      executeJava0.setOutput((PrintStream) null);
      executeJava0.killedProcess();
      // Undeclared exception!
      try { 
        executeJava0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteJava", e);
      }
  }
}
