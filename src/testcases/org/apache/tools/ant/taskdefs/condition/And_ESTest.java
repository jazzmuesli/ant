/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:54:26 GMT 2020
 */

package org.apache.tools.ant.taskdefs.condition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.taskdefs.Available;
import org.apache.tools.ant.taskdefs.Checksum;
import org.apache.tools.ant.taskdefs.UpToDate;
import org.apache.tools.ant.taskdefs.condition.And;
import org.apache.tools.ant.taskdefs.condition.Or;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class And_ESTest extends And_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      And and0 = new And();
      and0.eval();
      Available available0 = mock(Available.class, new ViolatedAssumptionAnswer());
      And and1 = new And();
      and1.addAnd(and0);
      Checksum checksum0 = mock(Checksum.class, new ViolatedAssumptionAnswer());
      and1.addChecksum(checksum0);
      and0.addAnd(and1);
      Or or0 = mock(Or.class, new ViolatedAssumptionAnswer());
      and0.addOr(or0);
      and0.addAvailable(available0);
      // Undeclared exception!
      try { 
        and0.eval();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      And and0 = new And();
      and0.addUptodate((UpToDate) null);
      and0.countConditions();
      and0.getProject();
      and0.countConditions();
      and0.countConditions();
      // Undeclared exception!
      try { 
        and0.eval();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      And and0 = new And();
      boolean boolean0 = and0.eval();
      boolean boolean1 = and0.eval();
      assertTrue(boolean1 == boolean0);
  }
}
