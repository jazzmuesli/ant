/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:23:40 GMT 2020
 */

package org.apache.tools.ant.taskdefs.condition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Available;
import org.apache.tools.ant.taskdefs.Checksum;
import org.apache.tools.ant.taskdefs.UpToDate;
import org.apache.tools.ant.taskdefs.condition.And;
import org.apache.tools.ant.taskdefs.condition.Contains;
import org.apache.tools.ant.taskdefs.condition.Equals;
import org.apache.tools.ant.taskdefs.condition.FilesMatch;
import org.apache.tools.ant.taskdefs.condition.Http;
import org.apache.tools.ant.taskdefs.condition.IsFalse;
import org.apache.tools.ant.taskdefs.condition.IsReference;
import org.apache.tools.ant.taskdefs.condition.IsSet;
import org.apache.tools.ant.taskdefs.condition.IsTrue;
import org.apache.tools.ant.taskdefs.condition.Not;
import org.apache.tools.ant.taskdefs.condition.Or;
import org.apache.tools.ant.taskdefs.condition.Os;
import org.apache.tools.ant.taskdefs.condition.Socket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConditionBase_ESTest extends ConditionBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Not not0 = new Not();
      not0.addIsTrue((IsTrue) null);
      Not not1 = new Not();
      not0.addNot(not1);
      IsTrue isTrue0 = mock(IsTrue.class, new ViolatedAssumptionAnswer());
      not1.addIsTrue(isTrue0);
      assertFalse(not1.equals((Object)not0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      And and0 = new And();
      and0.getConditions();
      IsReference isReference0 = mock(IsReference.class, new ViolatedAssumptionAnswer());
      and0.eval();
      and0.countConditions();
      and0.addHttp((Http) null);
      IsFalse isFalse0 = mock(IsFalse.class, new ViolatedAssumptionAnswer());
      and0.addIsFalse(isFalse0);
      and0.addIsReference(isReference0);
      FilesMatch filesMatch0 = mock(FilesMatch.class, new ViolatedAssumptionAnswer());
      and0.addFilesMatch(filesMatch0);
      IsFalse isFalse1 = mock(IsFalse.class, new ViolatedAssumptionAnswer());
      and0.addIsFalse(isFalse1);
      Contains contains0 = mock(Contains.class, new ViolatedAssumptionAnswer());
      and0.addContains(contains0);
      IsTrue isTrue0 = mock(IsTrue.class, new ViolatedAssumptionAnswer());
      and0.addIsTrue(isTrue0);
      and0.addHttp((Http) null);
      Not not0 = new Not();
      IsFalse isFalse2 = mock(IsFalse.class, new ViolatedAssumptionAnswer());
      not0.addIsFalse(isFalse2);
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      not0.addSocket(socket0);
      try { 
        not0.eval();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must not nest more than one condition into <not>
         //
         verifyException("org.apache.tools.ant.taskdefs.condition.Not", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Or or0 = new Or();
      UpToDate upToDate0 = mock(UpToDate.class, new ViolatedAssumptionAnswer());
      or0.log("", 1557);
      or0.addUptodate(upToDate0);
      or0.addAvailable((Available) null);
      or0.log("YC~Pv]K'@.z!F}3Re{");
      And and0 = new And();
      or0.addAvailable((Available) null);
      or0.log(" s i\"x6");
      or0.addIsTrue((IsTrue) null);
      FilesMatch filesMatch0 = mock(FilesMatch.class, new ViolatedAssumptionAnswer());
      and0.addFilesMatch(filesMatch0);
      IsFalse isFalse0 = mock(IsFalse.class, new ViolatedAssumptionAnswer());
      or0.addIsFalse(isFalse0);
      or0.addAnd(and0);
      or0.addAvailable((Available) null);
      FilesMatch filesMatch1 = mock(FilesMatch.class, new ViolatedAssumptionAnswer());
      and0.addFilesMatch(filesMatch1);
      IsSet isSet0 = mock(IsSet.class, new ViolatedAssumptionAnswer());
      and0.addIsSet(isSet0);
      Not not0 = new Not();
      try { 
        not0.eval();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must nest a condition into <not>
         //
         verifyException("org.apache.tools.ant.taskdefs.condition.Not", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      And and0 = new And();
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      and0.addSocket(socket0);
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      and0.addSocket(socket1);
      and0.addOr((Or) null);
      and0.addOs((Os) null);
      and0.getConditions();
      And and1 = new And();
      Equals equals0 = mock(Equals.class, new ViolatedAssumptionAnswer());
      and1.addEquals(equals0);
      and1.addIsFalse((IsFalse) null);
      Http http0 = mock(Http.class, new ViolatedAssumptionAnswer());
      Not not0 = new Not();
      Contains contains0 = mock(Contains.class, new ViolatedAssumptionAnswer());
      not0.addContains(contains0);
      and1.addNot(not0);
      and0.countConditions();
      and1.addNot(not0);
      and0.getProject();
      and0.getProject();
      and1.countConditions();
      and1.addHttp(http0);
      and0.addAnd(and1);
      and0.addSocket((Socket) null);
      Contains contains1 = mock(Contains.class, new ViolatedAssumptionAnswer());
      and0.addContains(contains1);
      and1.getConditions();
      Checksum checksum0 = mock(Checksum.class, new ViolatedAssumptionAnswer());
      and1.addChecksum(checksum0);
      Contains contains2 = mock(Contains.class, new ViolatedAssumptionAnswer());
      and1.addContains(contains2);
      and0.countConditions();
      UpToDate upToDate0 = mock(UpToDate.class, new ViolatedAssumptionAnswer());
      and0.addUptodate(upToDate0);
      assertFalse(and0.equals((Object)and1));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Or or0 = new Or();
      or0.eval();
      IsSet isSet0 = mock(IsSet.class, new ViolatedAssumptionAnswer());
      or0.addIsSet(isSet0);
      Or or1 = new Or();
      or0.addOr(or1);
      int int0 = or1.countConditions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      And and0 = new And();
      and0.addSocket((Socket) null);
      and0.addAvailable((Available) null);
      IsReference isReference0 = mock(IsReference.class, new ViolatedAssumptionAnswer());
      and0.addIsReference(isReference0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Or or0 = new Or();
      IsTrue isTrue0 = mock(IsTrue.class, new ViolatedAssumptionAnswer());
      or0.addIsTrue(isTrue0);
  }
}
