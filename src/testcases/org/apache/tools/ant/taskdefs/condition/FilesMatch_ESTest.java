/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:42:36 GMT 2020
 */

package org.apache.tools.ant.taskdefs.condition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.condition.FilesMatch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilesMatch_ESTest extends FilesMatch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FilesMatch filesMatch0 = new FilesMatch();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(file0).exists();
      filesMatch0.setFile1(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file1).exists();
      filesMatch0.setFile2(file1);
      boolean boolean0 = filesMatch0.eval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FilesMatch filesMatch0 = new FilesMatch();
      try { 
        filesMatch0.eval();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // both file1 and file2 are required in filesmatch
         //
         verifyException("org.apache.tools.ant.taskdefs.condition.FilesMatch", e);
      }
  }
}
