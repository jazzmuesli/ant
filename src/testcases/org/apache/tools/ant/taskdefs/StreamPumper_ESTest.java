/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:25:20 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.tools.ant.taskdefs.StreamPumper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StreamPumper_ESTest extends StreamPumper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(inputStream0).read(any(byte[].class));
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      StreamPumper streamPumper0 = new StreamPumper(inputStream0, outputStream0, false);
      streamPumper0.run();
      streamPumper0.isFinished();
      streamPumper0.isFinished();
      streamPumper0.isFinished();
      streamPumper0.run();
      streamPumper0.isFinished();
      streamPumper0.waitFor();
      streamPumper0.run();
      streamPumper0.waitFor();
      streamPumper0.waitFor();
      streamPumper0.run();
      streamPumper0.isFinished();
      streamPumper0.waitFor();
      streamPumper0.waitFor();
      streamPumper0.waitFor();
      streamPumper0.waitFor();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      StreamPumper streamPumper0 = new StreamPumper((InputStream) null, outputStream0);
      streamPumper0.run();
      streamPumper0.run();
      streamPumper0.waitFor();
      streamPumper0.isFinished();
      streamPumper0.isFinished();
      streamPumper0.isFinished();
      streamPumper0.run();
      streamPumper0.run();
      streamPumper0.waitFor();
  }
}
