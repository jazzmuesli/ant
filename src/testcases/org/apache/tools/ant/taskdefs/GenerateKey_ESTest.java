/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:32:28 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.GenerateKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenerateKey_ESTest extends GenerateKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setValidity("6");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setKeysize("09");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setDname("N4yimD>v4,0");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenerateKey.DnameParam generateKey_DnameParam0 = new GenerateKey.DnameParam();
      generateKey_DnameParam0.setValue("1wwc%4w}6(hL$.o@'qB");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenerateKey.DnameParam generateKey_DnameParam0 = new GenerateKey.DnameParam();
      generateKey_DnameParam0.setName("lt79;");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenerateKey.DnameParam generateKey_DnameParam0 = new GenerateKey.DnameParam();
      String string0 = generateKey_DnameParam0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenerateKey.DnameParam generateKey_DnameParam0 = new GenerateKey.DnameParam();
      String string0 = generateKey_DnameParam0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      GenerateKey.DistinguishedName generateKey_DistinguishedName0 = generateKey0.createDname();
      String string0 = generateKey_DistinguishedName0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      GenerateKey.DistinguishedName generateKey_DistinguishedName0 = generateKey0.createDname();
      Enumeration enumeration0 = generateKey_DistinguishedName0.getParams();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      GenerateKey.DistinguishedName generateKey_DistinguishedName0 = generateKey0.createDname();
      String string0 = generateKey_DistinguishedName0.encode("/%0:ZBea7;");
      assertEquals("/%0:ZBea7;", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      GenerateKey.DistinguishedName generateKey_DistinguishedName0 = generateKey0.createDname();
      Object object0 = generateKey_DistinguishedName0.createParam();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenerateKey.DistinguishedName generateKey_DistinguishedName0 = new GenerateKey.DistinguishedName();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setVerbose(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setStoretype("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setStorepass("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setSigalg("/%0:ZBea7;");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setKeystore("vFF 2y3d");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setKeypass("MXry\"u");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setKeyalg("A|j>T*N{'Jx1<9");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.setAlias("v^zGnH");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      try { 
        generateKey0.setValidity("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Validity attribute should be a integer
         //
         verifyException("org.apache.tools.ant.taskdefs.GenerateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      try { 
        generateKey0.setKeysize((String) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // KeySize attribute should be a integer
         //
         verifyException("org.apache.tools.ant.taskdefs.GenerateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.createDname();
      // Undeclared exception!
      try { 
        generateKey0.setDname("MXry\"u");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // It is not possible to specify dname  both as attribute and element.
         //
         verifyException("org.apache.tools.ant.taskdefs.GenerateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      try { 
        generateKey0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // alias attribute must be set
         //
         verifyException("org.apache.tools.ant.taskdefs.GenerateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GenerateKey generateKey0 = new GenerateKey();
      generateKey0.createDname();
      try { 
        generateKey0.createDname();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // DName sub-element can only be specified once.
         //
         verifyException("org.apache.tools.ant.taskdefs.GenerateKey", e);
      }
  }
}
