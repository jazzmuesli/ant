/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:47:58 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Recorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Recorder_ESTest extends Recorder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Recorder.VerbosityLevelChoices recorder_VerbosityLevelChoices0 = new Recorder.VerbosityLevelChoices();
      String[] stringArray0 = recorder_VerbosityLevelChoices0.getValues();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Recorder.ActionChoices recorder_ActionChoices0 = new Recorder.ActionChoices();
      String[] stringArray0 = recorder_ActionChoices0.getValues();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Recorder recorder0 = new Recorder();
      recorder0.setEmacsMode(true);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Recorder recorder0 = new Recorder();
      recorder0.setAppend(true);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Recorder recorder0 = new Recorder();
      Recorder.VerbosityLevelChoices recorder_VerbosityLevelChoices0 = new Recorder.VerbosityLevelChoices();
      // Undeclared exception!
      try { 
        recorder0.setLoglevel(recorder_VerbosityLevelChoices0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Recorder recorder0 = new Recorder();
      Recorder.ActionChoices recorder_ActionChoices0 = new Recorder.ActionChoices();
      // Undeclared exception!
      try { 
        recorder0.setAction(recorder_ActionChoices0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Recorder recorder0 = new Recorder();
      // Undeclared exception!
      try { 
        recorder0.getRecorder((String) null, (Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Recorder recorder0 = new Recorder();
      try { 
        recorder0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No filename specified
         //
         verifyException("org.apache.tools.ant.taskdefs.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Recorder recorder0 = new Recorder();
      recorder0.setName("");
      // Undeclared exception!
      try { 
        recorder0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Recorder", e);
      }
  }
}
