/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:57:18 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.RuntimeConfigurable;
import org.apache.tools.ant.Target;
import org.apache.tools.ant.taskdefs.Replace;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.apache.tools.ant.types.selectors.ContainsSelector;
import org.apache.tools.ant.types.selectors.DependSelector;
import org.apache.tools.ant.types.selectors.NoneSelector;
import org.apache.tools.ant.types.selectors.OrSelector;
import org.apache.tools.ant.types.selectors.SizeSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Replace_ESTest extends Replace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Replace replace0 = new Replace();
      replace0.getProject();
      SizeSelector sizeSelector0 = mock(SizeSelector.class, new ViolatedAssumptionAnswer());
      replace0.setIncludes("<*IBbk ");
      replace0.addSize(sizeSelector0);
      replace0.getSelectors((Project) null);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setFile(file0);
      Replace.Replacefilter replace_Replacefilter0 = replace0.createReplacefilter();
      replace_Replacefilter0.getValue();
      replace_Replacefilter0.setToken("` <%mRd");
      replace_Replacefilter0.setToken("GEz~0DM/CG3B");
      replace0.validateReplacefilters();
      replace_Replacefilter0.getReplaceValue();
      replace_Replacefilter0.getReplaceValue();
      replace_Replacefilter0.setToken("");
      replace0.validateAttributes();
      replace0.setValue("'9%K2NO$!5P");
      replace0.createReplaceToken();
      replace0.createReplacefilter();
      replace0.createReplaceToken();
      replace0.setSummary(false);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setDir(file1);
      replace0.setToken((String) null);
      replace_Replacefilter0.setProperty(",Q");
      File file2 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setDir(file2);
      File file3 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setDir(file3);
      replace0.setSummary(true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Replace replace0 = new Replace();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setPropertyFile(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file1).getPath();
      replace0.setReplaceFilterFile(file1);
      // Undeclared exception!
      try { 
        replace0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
         verifyException("java.io.FilePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Replace replace0 = new Replace();
      replace0.validateReplacefilters();
      Replace.Replacefilter replace_Replacefilter0 = replace0.createReplacefilter();
      replace_Replacefilter0.setToken("2mW5*aG{Pb'2;");
      Replace.NestedString replace_NestedString0 = replace0.createReplaceToken();
      replace0.createExclude();
      replace_Replacefilter0.setToken("2mW5*aG{Pb'2;");
      replace_Replacefilter0.validate();
      replace_Replacefilter0.setToken("");
      replace_NestedString0.getText();
      replace0.setSummary(true);
      replace_Replacefilter0.setProperty("");
      replace0.createReplaceToken();
      replace_NestedString0.getText();
      replace0.setSummary(true);
      replace_NestedString0.getText();
      replace0.createInclude();
      replace0.setToken("");
      replace0.reconfigure();
      replace0.setSummary(false);
      replace0.setSummary(true);
      Replace.Replacefilter replace_Replacefilter1 = replace0.createReplacefilter();
      replace0.setSummary(false);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setPropertyFile(file0);
      String string0 = replace_Replacefilter1.getProperty();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Replace replace0 = new Replace();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.createExclude();
      replace0.setReplaceFilterFile(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      NoneSelector noneSelector0 = mock(NoneSelector.class, new ViolatedAssumptionAnswer());
      replace0.addNone(noneSelector0);
      replace0.setFile(file1);
      File file2 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.createReplaceValue();
      DependSelector dependSelector0 = mock(DependSelector.class, new ViolatedAssumptionAnswer());
      replace0.addDepend(dependSelector0);
      replace0.setReplaceFilterFile(file2);
      Replace.Replacefilter replace_Replacefilter0 = replace0.createReplacefilter();
      replace0.addAnd((AndSelector) null);
      replace_Replacefilter0.getValue();
      replace_Replacefilter0.getToken();
      replace_Replacefilter0.getToken();
      replace_Replacefilter0.getProperty();
      replace_Replacefilter0.setToken((String) null);
      replace_Replacefilter0.getToken();
      File file3 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file3).getAbsolutePath();
      replace0.setIncludesfile(file3);
      replace_Replacefilter0.getProperty();
      File file4 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setPropertyFile(file4);
      try { 
        replace0.validateReplacefilters();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // token is a mandatory attribute of replacefilter.
         //
         verifyException("org.apache.tools.ant.taskdefs.Replace$Replacefilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Replace replace0 = new Replace();
      Replace.NestedString replace_NestedString0 = replace0.new NestedString();
      Replace.Replacefilter replace_Replacefilter0 = replace0.new Replacefilter();
      replace_Replacefilter0.getValue();
      replace0.setFile((File) null);
      replace0.setReplaceFilterFile((File) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Replace replace0 = new Replace();
      replace0.getOwningTarget();
      replace0.setOwningTarget((Target) null);
      replace0.createInclude();
      Replace.NestedString replace_NestedString0 = replace0.createReplaceValue();
      Replace.NestedString replace_NestedString1 = replace0.createReplaceToken();
      assertFalse(replace_NestedString1.equals((Object)replace_NestedString0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Replace replace0 = new Replace();
      replace0.getRuntimeConfigurableWrapper();
      Replace.Replacefilter replace_Replacefilter0 = replace0.new Replacefilter();
      replace_Replacefilter0.getValue();
      replace_Replacefilter0.getValue();
      replace0.setToken((String) null);
      replace0.setToken("L+ VBP_ACwhe\u0000)&*");
      replace0.setPropertyFile((File) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Replace replace0 = new Replace();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      try { 
        replace0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Either the file or the dir attribute must be specified
         //
         verifyException("org.apache.tools.ant.taskdefs.Replace", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Replace replace0 = new Replace();
      Replace.Replacefilter replace_Replacefilter0 = replace0.createReplacefilter();
      OrSelector orSelector0 = mock(OrSelector.class, new ViolatedAssumptionAnswer());
      replace_Replacefilter0.setProperty("_ig@EZjm2");
      replace0.setRuntimeConfigurableWrapper((RuntimeConfigurable) null);
      replace0.addOr(orSelector0);
      String string0 = "a\\3YU?";
      replace_Replacefilter0.setValue("a\u0003YU?");
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setReplaceFilterFile(file0);
      replace0.selectorElements();
      Replace.NestedString replace_NestedString0 = replace0.createReplaceValue();
      replace_NestedString0.getText();
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.setDir(file1);
      replace_Replacefilter0.setProperty("");
      replace_Replacefilter0.getProperty();
      File file2 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file2).getAbsolutePath();
      replace0.setExcludesfile(file2);
      FileSet fileSet0 = replace0.getImplicitFileSet();
      replace0.fileset = fileSet0;
      File file3 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file3).getPath();
      // Undeclared exception!
      try { 
        replace0.getProperties(file3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
         verifyException("java.io.FilePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Replace replace0 = new Replace();
      Replace.Replacefilter replace_Replacefilter0 = replace0.new Replacefilter();
      replace_Replacefilter0.setValue(" ~<8,S5|%EnCRy ");
      replace_Replacefilter0.getToken();
      String string0 = replace_Replacefilter0.getProperty();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Replace replace0 = new Replace();
      replace0.getOwningTarget();
      replace0.getLocation();
      String string0 = "";
      replace0.setValue("");
      replace0.createPatternSet();
      Replace.Replacefilter replace_Replacefilter0 = replace0.new Replacefilter();
      replace_Replacefilter0.setValue("");
      replace0.getImplicitFileSet();
      replace_Replacefilter0.getValue();
      replace_Replacefilter0.setValue("");
      replace_Replacefilter0.getValue();
      try { 
        replace_Replacefilter0.validate();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // token is a mandatory attribute of replacefilter.
         //
         verifyException("org.apache.tools.ant.taskdefs.Replace$Replacefilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Replace replace0 = new Replace();
      ContainsSelector containsSelector0 = mock(ContainsSelector.class, new ViolatedAssumptionAnswer());
      replace0.addContains(containsSelector0);
      replace0.getProject();
      replace0.setValue("+>Ft>Fc_Y;");
      replace0.createPatternSet();
      replace0.setEncoding("7eS`K;!d,ou8Rk=");
      replace0.setSummary(false);
      Replace.NestedString replace_NestedString0 = replace0.new NestedString();
      replace_NestedString0.getText();
      replace_NestedString0.getText();
      replace_NestedString0.addText("7eS`K;!d,ou8Rk=");
      replace_NestedString0.getText();
      Replace.Replacefilter replace_Replacefilter0 = replace0.new Replacefilter();
      replace_Replacefilter0.getReplaceValue();
      replace_Replacefilter0.setValue("");
      replace_Replacefilter0.setValue("+>Ft>Fc_Y;");
      replace_NestedString0.getText();
      replace0.setValue("`SZ++I;n+P;vt(&m+");
      replace0.setSummary(false);
      replace_NestedString0.getText();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      // Undeclared exception!
      try { 
        replace0.getProperties(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
         verifyException("java.io.FilePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Replace replace0 = new Replace();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      replace0.getProject();
      replace0.setProject((Project) null);
      replace0.setReplaceFilterFile(file0);
      Replace.Replacefilter replace_Replacefilter0 = replace0.createReplacefilter();
      replace_Replacefilter0.setValue((String) null);
      replace_Replacefilter0.setToken((String) null);
      boolean boolean0 = true;
      replace0.setSummary(true);
      replace0.setSummary(true);
      replace0.setEncoding((String) null);
      replace_Replacefilter0.setToken((String) null);
      Replace replace1 = new Replace();
      ContainsSelector containsSelector0 = mock(ContainsSelector.class, new ViolatedAssumptionAnswer());
      replace1.addContains(containsSelector0);
      Replace.NestedString replace_NestedString0 = replace1.new NestedString();
      replace_NestedString0.getText();
      try { 
        replace1.validateAttributes();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Either the file or the dir attribute must be specified
         //
         verifyException("org.apache.tools.ant.taskdefs.Replace", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
  }
}
