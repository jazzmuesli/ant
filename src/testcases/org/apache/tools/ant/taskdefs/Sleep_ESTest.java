/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:09:53 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.RuntimeConfigurable;
import org.apache.tools.ant.Target;
import org.apache.tools.ant.taskdefs.Sleep;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sleep_ESTest extends Sleep_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      sleep0.getOwningTarget();
      sleep0.setOwningTarget((Target) null);
      sleep0.setMilliseconds(3906);
      sleep0.getProject();
      sleep0.maybeConfigure();
      sleep0.doSleep(987L);
      sleep0.setMinutes((-1325));
      sleep0.setHours(3906);
      sleep0.setFailOnError(false);
      int int0 = 2243;
      sleep0.setMinutes(2243);
      sleep0.setHours(3906);
      // Undeclared exception!
      try { 
        sleep0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      RuntimeConfigurable runtimeConfigurable0 = sleep0.getRuntimeConfigurableWrapper();
      sleep0.setRuntimeConfigurableWrapper(runtimeConfigurable0);
      // Undeclared exception!
      try { 
        sleep0.doSleep((-571L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      sleep0.setSeconds(1486);
      sleep0.setFailOnError(false);
      sleep0.setHours((-2181));
      int int0 = 3531;
      sleep0.setMilliseconds(3531);
      sleep0.setHours((-2181));
      sleep0.setFailOnError(false);
      sleep0.setDescription(")@@");
      sleep0.getOwningTarget();
      long long0 = 1L;
      sleep0.getRuntimeConfigurableWrapper();
      try { 
        sleep0.validate();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Negative sleep periods are not supported
         //
         verifyException("org.apache.tools.ant.taskdefs.Sleep", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      sleep0.getDescription();
      sleep0.getOwningTarget();
      sleep0.getTaskName();
      sleep0.setMilliseconds(0);
      sleep0.setOwningTarget((Target) null);
      int int0 = 0;
      sleep0.setSeconds(0);
      try { 
        sleep0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.tools.ant.taskdefs.Sleep", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      sleep0.validate();
      sleep0.setSeconds(1);
      // Undeclared exception!
      try { 
        sleep0.doSleep((-747L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      sleep0.setHours(477);
      Sleep sleep1 = new Sleep();
      sleep1.getOwningTarget();
      sleep0.setOwningTarget((Target) null);
      sleep0.setTaskType("");
      sleep0.setMinutes(730);
      sleep0.doSleep(730);
      sleep0.setFailOnError(false);
      sleep0.setHours((-1));
      assertNotSame(sleep0, sleep1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      // Undeclared exception!
      try { 
        sleep0.log("", (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      String string0 = null;
      int int0 = 2370;
      sleep0.setMinutes(2370);
      RuntimeConfigurable runtimeConfigurable0 = sleep0.getRuntimeConfigurableWrapper();
      sleep0.setRuntimeConfigurableWrapper(runtimeConfigurable0);
      sleep0.setDescription((String) null);
      sleep0.validate();
      sleep0.getOwningTarget();
      int int1 = (-3174);
      sleep0.getOwningTarget();
      sleep0.setMilliseconds((-3174));
      try { 
        sleep0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.tools.ant.taskdefs.Sleep", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      sleep0.setFailOnError(true);
      sleep0.doSleep(1L);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Sleep sleep0 = new Sleep();
      sleep0.getOwningTarget();
      sleep0.getTaskName();
      sleep0.setSeconds(0);
      sleep0.maybeConfigure();
      sleep0.getOwningTarget();
      sleep0.setHours(0);
      sleep0.setDescription((String) null);
      sleep0.validate();
      sleep0.setSeconds(0);
  }
}
