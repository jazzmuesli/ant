/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:04:02 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Enumeration;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Checksum;
import org.apache.tools.ant.taskdefs.Copydir;
import org.apache.tools.ant.taskdefs.Delete;
import org.apache.tools.ant.taskdefs.DependSet;
import org.apache.tools.ant.taskdefs.Ear;
import org.apache.tools.ant.taskdefs.Jar;
import org.apache.tools.ant.taskdefs.Javac;
import org.apache.tools.ant.taskdefs.Replace;
import org.apache.tools.ant.taskdefs.Rmic;
import org.apache.tools.ant.taskdefs.Tar;
import org.apache.tools.ant.taskdefs.War;
import org.apache.tools.ant.taskdefs.XSLTProcess;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.PatternSet;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
import org.apache.tools.ant.types.selectors.ContainsSelector;
import org.apache.tools.ant.types.selectors.DateSelector;
import org.apache.tools.ant.types.selectors.DependSelector;
import org.apache.tools.ant.types.selectors.DepthSelector;
import org.apache.tools.ant.types.selectors.ExtendSelector;
import org.apache.tools.ant.types.selectors.FileSelector;
import org.apache.tools.ant.types.selectors.FilenameSelector;
import org.apache.tools.ant.types.selectors.MajoritySelector;
import org.apache.tools.ant.types.selectors.NotSelector;
import org.apache.tools.ant.types.selectors.OrSelector;
import org.apache.tools.ant.types.selectors.PresentSelector;
import org.apache.tools.ant.types.selectors.SelectSelector;
import org.apache.tools.ant.types.selectors.SizeSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MatchingTask_ESTest extends MatchingTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Copydir copydir0 = new Copydir();
      MockFile mockFile0 = new MockFile((File) null, "");
      copydir0.setIncludesfile(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      War war0 = new War();
      MockFile mockFile0 = new MockFile((File) null, "org.apache.xml.resolver.CatalogManager");
      war0.setExcludesfile(mockFile0);
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tar tar0 = new Tar();
      tar0.setProject((Project) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XSLTProcess xSLTProcess0 = new XSLTProcess();
      xSLTProcess0.setIncludes("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Javac javac0 = new Javac();
      javac0.setFollowSymlinks(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      War war0 = new War();
      war0.setExcludes((String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Javac javac0 = new Javac();
      javac0.setDefaultexcludes(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Copydir copydir0 = new Copydir();
      copydir0.setCaseSensitive(false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Checksum checksum0 = new Checksum();
      Enumeration enumeration0 = checksum0.selectorElements();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Jar jar0 = new Jar();
      int int0 = jar0.selectorCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Javac javac0 = new Javac();
      boolean boolean0 = javac0.hasSelectors();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      War war0 = new War();
      FileSelector[] fileSelectorArray0 = war0.getSelectors((Project) null);
      assertEquals(0, fileSelectorArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Copydir copydir0 = new Copydir();
      FileSet fileSet0 = copydir0.getImplicitFileSet();
      assertNotNull(fileSet0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      PatternSet patternSet0 = rmic0.createPatternSet();
      assertNotNull(patternSet0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      PatternSet.NameEntry patternSet_NameEntry0 = rmic0.createIncludesFile();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Copydir copydir0 = new Copydir();
      PatternSet.NameEntry patternSet_NameEntry0 = copydir0.createInclude();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      PatternSet.NameEntry patternSet_NameEntry0 = rmic0.createExcludesFile();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Javac javac0 = new Javac();
      PatternSet.NameEntry patternSet_NameEntry0 = javac0.createExclude();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Delete delete0 = new Delete();
      NotSelector notSelector0 = new NotSelector();
      delete0.appendSelector(notSelector0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Replace replace0 = new Replace();
      SizeSelector sizeSelector0 = new SizeSelector();
      replace0.addSize(sizeSelector0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Javac javac0 = new Javac();
      SelectSelector selectSelector0 = new SelectSelector();
      javac0.addSelector(selectSelector0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Javac javac0 = new Javac();
      PresentSelector presentSelector0 = new PresentSelector();
      javac0.addPresent(presentSelector0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      rmic0.addOr((OrSelector) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XSLTProcess xSLTProcess0 = new XSLTProcess();
      NotSelector notSelector0 = new NotSelector();
      xSLTProcess0.addNot(notSelector0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XSLTProcess xSLTProcess0 = new XSLTProcess();
      NotSelector notSelector0 = new NotSelector();
      xSLTProcess0.addNone(notSelector0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Javac javac0 = new Javac();
      MajoritySelector majoritySelector0 = new MajoritySelector();
      javac0.addMajority(majoritySelector0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ear ear0 = new Ear();
      FilenameSelector filenameSelector0 = new FilenameSelector();
      ear0.addFilename(filenameSelector0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Javac javac0 = new Javac();
      DepthSelector depthSelector0 = new DepthSelector();
      javac0.addDepth(depthSelector0);
      assertEquals((-1), depthSelector0.max);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      War war0 = new War();
      DependSelector dependSelector0 = new DependSelector();
      war0.addDepend(dependSelector0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Delete delete0 = new Delete();
      DateSelector dateSelector0 = new DateSelector();
      delete0.addDate(dateSelector0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      ExtendSelector extendSelector0 = new ExtendSelector();
      rmic0.addCustom(extendSelector0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      ContainsRegexpSelector containsRegexpSelector0 = new ContainsRegexpSelector();
      rmic0.addContainsRegexp(containsRegexpSelector0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Replace replace0 = new Replace();
      replace0.addContains((ContainsSelector) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Javac javac0 = new Javac();
      AndSelector andSelector0 = new AndSelector();
      javac0.addAnd(andSelector0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tar tar0 = new Tar();
      // Undeclared exception!
      try { 
        tar0.setIncludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      War war0 = new War();
      // Undeclared exception!
      try { 
        war0.setExcludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      // Undeclared exception!
      try { 
        rmic0.getDirectoryScanner((File) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for FileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rmic rmic0 = new Rmic();
      MockFile mockFile0 = new MockFile((File) null, "");
      // Undeclared exception!
      try { 
        rmic0.getDirectoryScanner(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      War war0 = new War();
      // Undeclared exception!
      try { 
        war0.XsetItems("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DependSet dependSet0 = new DependSet();
      // Undeclared exception!
      try { 
        dependSet0.XsetIgnore("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }
}
