/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:53:08 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Tar;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.tar.TarOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tar_ESTest extends Tar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      tar0.tarFile((File) null, (TarOutputStream) null, "", tar_TarFileSet0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tar.TarLongFileMode tar_TarLongFileMode0 = new Tar.TarLongFileMode();
      boolean boolean0 = tar_TarLongFileMode0.isWarnMode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tar.TarLongFileMode tar_TarLongFileMode0 = new Tar.TarLongFileMode();
      boolean boolean0 = tar_TarLongFileMode0.isTruncateMode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tar.TarLongFileMode tar_TarLongFileMode0 = new Tar.TarLongFileMode();
      boolean boolean0 = tar_TarLongFileMode0.isOmitMode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tar.TarLongFileMode tar_TarLongFileMode0 = new Tar.TarLongFileMode();
      boolean boolean0 = tar_TarLongFileMode0.isGnuMode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tar.TarLongFileMode tar_TarLongFileMode0 = new Tar.TarLongFileMode();
      boolean boolean0 = tar_TarLongFileMode0.isFailMode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tar.TarLongFileMode tar_TarLongFileMode0 = new Tar.TarLongFileMode();
      String[] stringArray0 = tar_TarLongFileMode0.getValues();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      tar_TarFileSet0.setUserName("OaGKVjG-BP");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      tar_TarFileSet0.setPreserveLeadingSlashes(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      tar_TarFileSet0.setPrefix("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tar tar0 = new Tar();
      Tar.TarFileSet tar_TarFileSet0 = tar0.createTarFileSet();
      // Undeclared exception!
      try { 
        tar_TarFileSet0.setMode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      tar_TarFileSet0.setGroup("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet();
      tar_TarFileSet0.setFullpath("");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet();
      // Undeclared exception!
      try { 
        tar_TarFileSet0.setDirMode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      String string0 = tar_TarFileSet0.getUserName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      boolean boolean0 = tar_TarFileSet0.getPreserveLeadingSlashes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      String string0 = tar_TarFileSet0.getPrefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tar tar0 = new Tar();
      Tar.TarFileSet tar_TarFileSet0 = tar0.createTarFileSet();
      int int0 = tar_TarFileSet0.getMode();
      assertEquals(33188, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      String string0 = tar_TarFileSet0.getGroup();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      String string0 = tar_TarFileSet0.getFullpath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tar tar0 = new Tar();
      FileSet fileSet0 = tar0.getImplicitFileSet();
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet(fileSet0);
      int int0 = tar_TarFileSet0.getDirMode();
      assertEquals(16877, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tar.TarFileSet tar_TarFileSet0 = new Tar.TarFileSet();
      // Undeclared exception!
      try { 
        tar_TarFileSet0.getFiles((Project) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for Tar$TarFileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tar tar0 = new Tar();
      tar0.setTarfile((File) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tar tar0 = new Tar();
      Tar.TarLongFileMode tar_TarLongFileMode0 = new Tar.TarLongFileMode();
      tar0.setLongfile(tar_TarLongFileMode0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tar tar0 = new Tar();
      tar0.setDestFile((File) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tar tar0 = new Tar();
      Tar.TarCompressionMethod tar_TarCompressionMethod0 = new Tar.TarCompressionMethod();
      tar0.setCompression(tar_TarCompressionMethod0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tar tar0 = new Tar();
      tar0.setBasedir((File) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tar tar0 = new Tar();
      Tar.TarFileSet tar_TarFileSet0 = tar0.createTarFileSet();
      // Undeclared exception!
      try { 
        tar0.tarFile((File) null, (TarOutputStream) null, "&FLf8,", tar_TarFileSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Tar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tar tar0 = new Tar();
      // Undeclared exception!
      try { 
        tar0.setLongfile("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tar tar0 = new Tar();
      try { 
        tar0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // tarfile attribute must be set!
         //
         verifyException("org.apache.tools.ant.taskdefs.Tar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tar.TarCompressionMethod tar_TarCompressionMethod0 = new Tar.TarCompressionMethod();
      String[] stringArray0 = tar_TarCompressionMethod0.getValues();
      Tar tar0 = new Tar();
      // Undeclared exception!
      try { 
        tar0.archiveIsUpToDate(stringArray0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Tar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tar tar0 = new Tar();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        tar0.archiveIsUpToDate(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.Tar", e);
      }
  }
}
