/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:51:07 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Cvs;
import org.apache.tools.ant.taskdefs.ExecuteStreamHandler;
import org.apache.tools.ant.types.Commandline;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCvsTask_ESTest extends AbstractCvsTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.configureCommandline((Commandline) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.addConfiguredCommandline((Commandline) null, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      cvs0.addConfiguredCommandline(commandline0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      Commandline.Argument commandline_Argument0 = mock(Commandline.Argument.class, new ViolatedAssumptionAnswer());
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      doReturn(commandline_Argument0).when(commandline0).createArgument();
      cvs0.addCommandArgument(commandline0, (String) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setTag((String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setPort((-1262));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setPassfile((File) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setPackage("z-R1JjEfAS");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      OutputStream outputStream0 = cvs0.getErrorStream();
      cvs0.setOutputStream(outputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setOutput((File) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setNoexec(false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setFailOnError(true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setError((File) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setDest((File) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setDate("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setCvsRsh("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setCommand("fpo', ^\"tj#J");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setAppend(false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      cvs0.removeCommandline(commandline0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      int int0 = cvs0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      File file0 = cvs0.getPassFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      String string0 = cvs0.getPackage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      OutputStream outputStream0 = cvs0.getOutputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      ExecuteStreamHandler executeStreamHandler0 = cvs0.getExecuteStreamHandler();
      cvs0.setExecuteStreamHandler(executeStreamHandler0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      OutputStream outputStream0 = cvs0.getErrorStream();
      cvs0.setErrorStream(outputStream0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      File file0 = cvs0.getDest();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      String string0 = cvs0.getCvsRsh();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      String string0 = cvs0.getCvsRoot();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      String string0 = cvs0.getCommand();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.addCommandArgument("");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cvs0.runCommand(commandline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.AbstractCvsTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setCvsRoot("fpo', ^\"tj#J");
      try { 
        cvs0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // unbalanced quotes in -dfpo', ^\"tj#J
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      // Undeclared exception!
      try { 
        cvs0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.AbstractCvsTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setCompressionLevel(1);
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      doReturn((Commandline.Argument) null).when(commandline0).createArgument(anyBoolean());
      // Undeclared exception!
      try { 
        cvs0.configureCommandline(commandline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.AbstractCvsTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setQuiet(true);
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      doReturn((Commandline.Argument) null).when(commandline0).createArgument(anyBoolean());
      // Undeclared exception!
      try { 
        cvs0.addConfiguredCommandline(commandline0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.AbstractCvsTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      cvs0.setCompression(true);
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      doReturn((Commandline.Argument) null).when(commandline0).createArgument(anyBoolean());
      // Undeclared exception!
      try { 
        cvs0.addConfiguredCommandline(commandline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.AbstractCvsTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Cvs cvs0 = new Cvs();
      Commandline commandline0 = mock(Commandline.class, new ViolatedAssumptionAnswer());
      doReturn((Commandline.Argument) null).when(commandline0).createArgument();
      // Undeclared exception!
      try { 
        cvs0.addCommandArgument(commandline0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.AbstractCvsTask", e);
      }
  }
}
