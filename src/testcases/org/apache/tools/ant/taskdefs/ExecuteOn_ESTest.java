/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:53:00 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.taskdefs.Execute;
import org.apache.tools.ant.taskdefs.ExecuteOn;
import org.apache.tools.ant.types.FileSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExecuteOn_ESTest extends ExecuteOn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      ExecuteOn.FileDirBoth executeOn_FileDirBoth0 = new ExecuteOn.FileDirBoth();
      executeOn0.setType(executeOn_FileDirBoth0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.runExec((Execute) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(directoryScanner0).getIncludedFiles();
      String[] stringArray0 = executeOn0.getFiles((File) null, directoryScanner0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(directoryScanner0).getIncludedDirectories();
      String[] stringArray0 = executeOn0.getDirs((File) null, directoryScanner0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      String[] stringArray0 = executeOn0.getCommandline("", (File) null);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecuteOn.FileDirBoth executeOn_FileDirBoth0 = new ExecuteOn.FileDirBoth();
      String[] stringArray0 = executeOn_FileDirBoth0.getValues();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.setSkipEmptyFilesets(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.setRelative(true);
      String[] stringArray0 = new String[5];
      File[] fileArray0 = new File[4];
      String[] stringArray1 = executeOn0.getCommandline(stringArray0, fileArray0);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.setParallel(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.setForwardslash(false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.setDest((File) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      // Undeclared exception!
      try { 
        executeOn0.setType((ExecuteOn.FileDirBoth) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      doReturn((File) null).when(fileSet0).getDir(any(org.apache.tools.ant.Project.class));
      doReturn((DirectoryScanner) null).when(fileSet0).getDirectoryScanner(any(org.apache.tools.ant.Project.class));
      executeOn0.addFileset(fileSet0);
      // Undeclared exception!
      try { 
        executeOn0.runExec((Execute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      // Undeclared exception!
      try { 
        executeOn0.getFiles((File) null, (DirectoryScanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      // Undeclared exception!
      try { 
        executeOn0.getDirs((File) null, (DirectoryScanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      File[] fileArray0 = new File[8];
      // Undeclared exception!
      try { 
        executeOn0.getCommandline((String[]) null, fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'G^U.D;?Roi]";
      stringArray0[1] = "=|V{U7S}w]#*s,{!x";
      stringArray0[2] = "M[3\"T8#";
      stringArray0[3] = "";
      stringArray0[4] = "qt/HEg4y";
      File[] fileArray0 = new File[5];
      // Undeclared exception!
      try { 
        executeOn0.getCommandline(stringArray0, fileArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      // Undeclared exception!
      try { 
        executeOn0.getCommandline((String) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.createTargetfile();
      // Undeclared exception!
      try { 
        executeOn0.createTargetfile();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support multiple targetfile elements.
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.createSrcfile();
      // Undeclared exception!
      try { 
        executeOn0.createSrcfile();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support multiple srcfile elements.
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.createMapper();
      try { 
        executeOn0.createMapper();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Cannot define more than one mapper
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      // Undeclared exception!
      try { 
        executeOn0.checkConfiguration();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // no executable specified
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.cmdl = null;
      // Undeclared exception!
      try { 
        executeOn0.checkConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecuteOn executeOn0 = new ExecuteOn();
      executeOn0.filesets = null;
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        executeOn0.addFileset(fileSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecuteOn", e);
      }
  }
}
