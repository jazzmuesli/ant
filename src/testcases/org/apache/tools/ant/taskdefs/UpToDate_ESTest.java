/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:39:01 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.taskdefs.UpToDate;
import org.apache.tools.ant.types.FileSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpToDate_ESTest extends UpToDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      upToDate0.setTargetFile(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      boolean boolean0 = upToDate0.scanDir(file1, stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      upToDate0.addSrcfiles(fileSet0);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      upToDate0.setTargetFile(file0);
      upToDate0.setProperty("[M/>}Y+JBJ1+sI2");
      upToDate0.execute();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      upToDate0.addSrcfiles(fileSet0);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      upToDate0.setTargetFile(file0);
      boolean boolean0 = upToDate0.eval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      upToDate0.setValue("egl}2'-a7F");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      upToDate0.setSrcfile(file0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      upToDate0.createMapper();
      // Undeclared exception!
      try { 
        upToDate0.scanDir(file0, stringArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // one of the attributes type or classname is required
         //
         verifyException("org.apache.tools.ant.types.Mapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        upToDate0.scanDir(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.UpToDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      try { 
        upToDate0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // property attribute is required.
         //
         verifyException("org.apache.tools.ant.taskdefs.UpToDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      // Undeclared exception!
      try { 
        upToDate0.eval();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // At least one srcfile or a nested <srcfiles> element must be set.
         //
         verifyException("org.apache.tools.ant.taskdefs.UpToDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      doReturn((File) null).when(fileSet0).getDir(any(org.apache.tools.ant.Project.class));
      doReturn((DirectoryScanner) null).when(fileSet0).getDirectoryScanner(any(org.apache.tools.ant.Project.class));
      upToDate0.createMapper();
      upToDate0.addSrcfiles(fileSet0);
      // Undeclared exception!
      try { 
        upToDate0.eval();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.UpToDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpToDate upToDate0 = new UpToDate();
      upToDate0.createMapper();
      try { 
        upToDate0.createMapper();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Cannot define more than one mapper
         //
         verifyException("org.apache.tools.ant.taskdefs.UpToDate", e);
      }
  }
}
