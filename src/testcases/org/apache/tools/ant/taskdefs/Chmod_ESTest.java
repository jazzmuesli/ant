/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:20:41 GMT 2020
 */

package org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Chmod;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.types.PatternSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Chmod_ESTest extends Chmod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      chmod0.setProject((Project) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      chmod0.setPerm((String) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      chmod0.setIncludes("-,=[MYJ{&_}$(~\"");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      chmod0.setExcludes("2.b");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      chmod0.setDir((File) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      chmod0.setDefaultexcludes(false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      PatternSet patternSet0 = chmod0.createPatternSet();
      assertNotNull(patternSet0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      PatternSet.NameEntry patternSet_NameEntry0 = chmod0.createInclude();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      PatternSet.NameEntry patternSet_NameEntry0 = chmod0.createExclude();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      // Undeclared exception!
      try { 
        chmod0.setSkipEmptyFilesets(false);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the skipemptyfileset attribute
         //
         verifyException("org.apache.tools.ant.taskdefs.Chmod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      // Undeclared exception!
      try { 
        chmod0.setFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      // Undeclared exception!
      try { 
        chmod0.setExecutable("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the executable attribute
         //
         verifyException("org.apache.tools.ant.taskdefs.Chmod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      Commandline commandline0 = chmod0.cmdl;
      // Undeclared exception!
      try { 
        chmod0.setCommand(commandline0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support the command attribute
         //
         verifyException("org.apache.tools.ant.taskdefs.Chmod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      // Undeclared exception!
      try { 
        chmod0.isValidOs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      try { 
        chmod0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Required attribute perm not set in chmod
         //
         verifyException("org.apache.tools.ant.taskdefs.Chmod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      chmod0.setResolveExecutable(true);
      // Undeclared exception!
      try { 
        chmod0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.ExecTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Chmod chmod0 = new Chmod();
      // Undeclared exception!
      try { 
        chmod0.checkConfiguration();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Required attribute perm not set in chmod
         //
         verifyException("org.apache.tools.ant.taskdefs.Chmod", e);
      }
  }
}
