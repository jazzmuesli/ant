/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:18:42 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.clearcase;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.taskdefs.optional.clearcase.CCCheckout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCCheckout_ESTest extends CCCheckout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setVersion(true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setReserved(true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setOut("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setNoWarn(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setNoData(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setCommentFile((String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setComment("Huy");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      cCCheckout0.setBranch("gZAI1wv-m4p4-=");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      boolean boolean0 = cCCheckout0.getVersion();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      boolean boolean0 = cCCheckout0.getReserved();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      String string0 = cCCheckout0.getOut();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      boolean boolean0 = cCCheckout0.getNoWarn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      boolean boolean0 = cCCheckout0.getNoData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      String string0 = cCCheckout0.getCommentFile();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      String string0 = cCCheckout0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      String string0 = cCCheckout0.getBranch();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCCheckout cCCheckout0 = new CCCheckout();
      // Undeclared exception!
      try { 
        cCCheckout0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.clearcase.CCCheckout", e);
      }
  }
}
