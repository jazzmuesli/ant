/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:01:08 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.sitraka.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassFile_ESTest extends ClassFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      ClassFile classFile0 = null;
      try {
        classFile0 = new ClassFile(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(3098, 3193, 1, 3098, 3098).when(inputStream0).read();
      ClassFile classFile0 = null;
      try {
        classFile0 = new ClassFile(inputStream0);
        fail("Expecting exception: ClassFormatError");
      
      } catch(ClassFormatError e) {
         //
         // Invalid Constant Pool entry Type 3098
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPoolEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1735), 0, 0, (-1)).when(inputStream0).read();
      ClassFile classFile0 = null;
      try {
        classFile0 = new ClassFile(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
