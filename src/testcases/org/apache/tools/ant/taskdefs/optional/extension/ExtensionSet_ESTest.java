/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:42:04 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.extension;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.optional.extension.Extension;
import org.apache.tools.ant.taskdefs.optional.extension.ExtensionAdapter;
import org.apache.tools.ant.taskdefs.optional.extension.ExtensionSet;
import org.apache.tools.ant.taskdefs.optional.extension.LibFileSet;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtensionSet_ESTest extends ExtensionSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      String string0 = extensionSet0.toString();
      assertEquals("ExtensionSet[]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      Extension[] extensionArray0 = extensionSet0.toExtensions((Project) null);
      assertEquals(0, extensionArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn(extensionSet0).when(reference0).getReferencedObject(any(org.apache.tools.ant.Project.class));
      extensionSet0.setRefid(reference0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      ExtensionAdapter extensionAdapter0 = mock(ExtensionAdapter.class, new ViolatedAssumptionAnswer());
      extensionSet0.addExtension(extensionAdapter0);
      // Undeclared exception!
      try { 
        extensionSet0.toString();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Extension is missing name.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.extension.ExtensionAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      doReturn((DirectoryScanner) null).when(fileSet0).getDirectoryScanner(any(org.apache.tools.ant.Project.class));
      extensionSet0.addFileset(fileSet0);
      // Undeclared exception!
      try { 
        extensionSet0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.extension.ExtensionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      ExtensionAdapter extensionAdapter0 = mock(ExtensionAdapter.class, new ViolatedAssumptionAnswer());
      extensionSet0.addExtension(extensionAdapter0);
      try { 
        extensionSet0.toExtensions((Project) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Extension is missing name.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.extension.ExtensionAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      LibFileSet libFileSet0 = mock(LibFileSet.class, new ViolatedAssumptionAnswer());
      doReturn((DirectoryScanner) null).when(libFileSet0).getDirectoryScanner(any(org.apache.tools.ant.Project.class));
      extensionSet0.addLibfileset(libFileSet0);
      // Undeclared exception!
      try { 
        extensionSet0.toExtensions((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.extension.ExtensionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reference0).getRefId();
      doReturn((Object) null).when(reference0).getReferencedObject(any(org.apache.tools.ant.Project.class));
      try { 
        extensionSet0.setRefid(reference0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't refer to a ExtensionSet
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.extension.ExtensionSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ExtensionSet extensionSet0 = new ExtensionSet();
      // Undeclared exception!
      try { 
        extensionSet0.setRefid((Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.extension.ExtensionSet", e);
      }
  }
}
