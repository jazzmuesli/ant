/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:51:33 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.dotnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Location;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.RuntimeConfigurable;
import org.apache.tools.ant.Target;
import org.apache.tools.ant.taskdefs.optional.dotnet.CSharp;
import org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile;
import org.apache.tools.ant.taskdefs.optional.dotnet.DotnetDefine;
import org.apache.tools.ant.taskdefs.optional.dotnet.DotnetResource;
import org.apache.tools.ant.taskdefs.optional.dotnet.JSharp;
import org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand;
import org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
import org.apache.tools.ant.types.selectors.ContainsSelector;
import org.apache.tools.ant.types.selectors.DependSelector;
import org.apache.tools.ant.types.selectors.DepthSelector;
import org.apache.tools.ant.types.selectors.NoneSelector;
import org.apache.tools.ant.types.selectors.OrSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DotnetCompile_ESTest extends DotnetCompile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setOptionStrict(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wP~W1-<V+-&#`VB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = " 9*kL!o!0qJ!$#L";
      stringArray0[6] = "";
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(path0).list();
      visualBasicCompile0.setReferenceFiles(path0);
      visualBasicCompile0.getDescription();
      CSharp cSharp0 = new CSharp();
      cSharp0.getUnsafeParameter();
      cSharp0.setOutputFile((File) null);
      String string0 = visualBasicCompile0.getCompilerExeName();
      assertEquals("vbc", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getTargetTypeParameter();
      CSharp cSharp0 = new CSharp();
      cSharp0.setReferences("$ld?@,L$?h4a)}-");
      cSharp0.setTaskName((String) null);
      cSharp0.getUnsafe();
      visualBasicCompile0.getCompilerExeName();
      cSharp0.getFilePattern();
      cSharp0.getDescription();
      visualBasicCompile0.setIncludes((String) null);
      visualBasicCompile0.debug = false;
      visualBasicCompile0.setExtraOptions("$ld?@,L$?h4a)}-");
      DotnetCompile.TargetTypes dotnetCompile_TargetTypes0 = new DotnetCompile.TargetTypes();
      visualBasicCompile0.getProject();
      cSharp0.setProject((Project) null);
      dotnetCompile_TargetTypes0.containsValue("");
      cSharp0.setTargetType(dotnetCompile_TargetTypes0);
      visualBasicCompile0.setUtf8Output(false);
      cSharp0.getUnsafe();
      cSharp0.getDefaultReferenceParameter();
      visualBasicCompile0.getIncludeDefaultReferences();
      visualBasicCompile0.getReferenceDelimiter();
      // Undeclared exception!
      try { 
        visualBasicCompile0.addCompilerSpecificOptions((NetCommand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getDestFile();
      visualBasicCompile0.srcDir = null;
      visualBasicCompile0.getDebugParameter();
      boolean boolean0 = false;
      visualBasicCompile0.setRemoveIntChecks(false);
      visualBasicCompile0.getDebugParameter();
      visualBasicCompile0.addReferenceFilesets((NetCommand) null, 0L);
      DotnetDefine dotnetDefine0 = mock(DotnetDefine.class, new ViolatedAssumptionAnswer());
      visualBasicCompile0.addDefine(dotnetDefine0);
      visualBasicCompile0.getRootNamespace();
      visualBasicCompile0.getDestFileParameter();
      JSharp jSharp0 = new JSharp();
      visualBasicCompile0.getOwningTarget();
      visualBasicCompile0.setOwningTarget((Target) null);
      // Undeclared exception!
      try { 
        visualBasicCompile0.createNetCommand();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Owner has no project
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.addResources((NetCommand) null);
      jSharp0.init();
      jSharp0.getReferencesParameter();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      // Undeclared exception!
      try { 
        jSharp0.log("6bT/LO5&jkl^CL", 1288);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getDefaultReferenceList();
      OrSelector orSelector0 = mock(OrSelector.class, new ViolatedAssumptionAnswer());
      cSharp0.addOr(orSelector0);
      // Undeclared exception!
      try { 
        cSharp0.fillInSharedParameters((NetCommand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setCaseSensitive(true);
      visualBasicCompile0.setRootNamespace((String) null);
      visualBasicCompile0.getMainClass();
      visualBasicCompile0.getUtf8OutputParameter();
      JSharp jSharp0 = new JSharp();
      jSharp0.setBaseAddress("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.setIncremental(true);
      DotnetCompile.TargetTypes dotnetCompile_TargetTypes0 = new DotnetCompile.TargetTypes();
      dotnetCompile_TargetTypes0.getValues();
      cSharp0.getSrcDir();
      cSharp0.setOutputFile((File) null);
      cSharp0.setMainClass("u-,%");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.getFileExtension();
      CSharp cSharp0 = new CSharp();
      cSharp0.setIncremental(false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getSrcDir();
      visualBasicCompile0.getExtraOptions();
      visualBasicCompile0.setUtf8Output(false);
      visualBasicCompile0.getOptionCompareParameter();
      CSharp cSharp0 = new CSharp();
      // Undeclared exception!
      try { 
        cSharp0.setTargetType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.getTargetType();
      // Undeclared exception!
      try { 
        jSharp0.setTargetType((DotnetCompile.TargetTypes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getMainClassParameter();
      cSharp0.validate();
      cSharp0.getDestFile();
      cSharp0.setDocFile((File) null);
      cSharp0.reconfigure();
      cSharp0.setOptimize(true);
      cSharp0.init();
      cSharp0.getLocation();
      cSharp0.setIncludes("$08*f1m)rQs`eU*N`");
      DotnetCompile.TargetTypes dotnetCompile_TargetTypes0 = new DotnetCompile.TargetTypes();
      cSharp0.setTargetType(dotnetCompile_TargetTypes0);
      cSharp0.setIncremental(true);
      cSharp0.setTargetType(dotnetCompile_TargetTypes0);
      cSharp0.getFullPathsParameter();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      // Undeclared exception!
      try { 
        visualBasicCompile0.setDestDir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getRuntimeConfigurableWrapper();
      cSharp0.clear();
      cSharp0.getDestFile();
      cSharp0.srcDir = null;
      cSharp0.getWin32Res();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.createExclude();
      visualBasicCompile0.getOptimizeParameter();
      visualBasicCompile0.getRemoveIntChecks();
      // Undeclared exception!
      try { 
        cSharp0.perform();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      jSharp0.addReference(fileSet0);
      jSharp0.getMainClassParameter();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getOwningTarget();
      visualBasicCompile0.getIncludeDefaultReferences();
      visualBasicCompile0.getImportsParameter();
      jSharp0.getFileExtension();
      CSharp cSharp0 = new CSharp();
      cSharp0.setReferences((String) null);
      cSharp0.getNoConfigParameter();
      visualBasicCompile0.setAdditionalModules((String) null);
      visualBasicCompile0.getOptionExplicit();
      ContainsRegexpSelector containsRegexpSelector0 = mock(ContainsRegexpSelector.class, new ViolatedAssumptionAnswer());
      visualBasicCompile0.addContainsRegexp(containsRegexpSelector0);
      jSharp0.setOptimize(true);
      visualBasicCompile0.setOptionStrict(true);
      cSharp0.notEmpty("YY.w:bAj*pC");
      cSharp0.setFullPaths(false);
      String string0 = cSharp0.getAdditionalModulesParameter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.getOptimize();
      jSharp0.getIncludeDefaultReferences();
      jSharp0.getSrcDir();
      jSharp0.getTargetTypeParameter();
      DotnetResource dotnetResource0 = mock(DotnetResource.class, new ViolatedAssumptionAnswer());
      jSharp0.addResource(dotnetResource0);
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.createExclude();
      visualBasicCompile0.getCompilerExeName();
      visualBasicCompile0.getOptimize();
      // Undeclared exception!
      try { 
        jSharp0.setTargetType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getDefinitionsParameter();
      cSharp0.getIncludeDefaultReferences();
      JSharp jSharp0 = new JSharp();
      jSharp0.getCompilerExeName();
      jSharp0.setMainClass((String) null);
      cSharp0.setDebug(true);
      jSharp0.selectorElements();
      jSharp0.getDestFile();
      jSharp0.setWin32Res((File) null);
      cSharp0.getReferenceDelimiter();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      try { 
        visualBasicCompile0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // DestFile was not specified
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.addDefine((DotnetDefine) null);
      DependSelector dependSelector0 = mock(DependSelector.class, new ViolatedAssumptionAnswer());
      cSharp0.addDepend(dependSelector0);
      cSharp0.setTaskName((String) null);
      cSharp0.getProject();
      cSharp0.getSelectors((Project) null);
      cSharp0.getIncremental();
      cSharp0.getWarnLevelParameter();
      cSharp0.validate();
      cSharp0.getTargetTypeParameter();
      cSharp0.getFileAlignParameter();
      // Undeclared exception!
      try { 
        cSharp0.getDefinitionsParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.hasSelectors();
      cSharp0.createExclude();
      cSharp0.getDefinitionsDelimiter();
      JSharp jSharp0 = new JSharp();
      jSharp0.getAdditionalModulesParameter();
      jSharp0.setSecureScoping(false);
      jSharp0.getDefaultReferenceParameter();
      cSharp0.setIncludeDefaultReferences(false);
      cSharp0.createPatternSet();
      jSharp0.setExtraOptions("");
      // Undeclared exception!
      try { 
        jSharp0.createNetCommand();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Owner has no project
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getFailOnError();
      visualBasicCompile0.getRootNamespace();
      visualBasicCompile0.setOptionExplicit(true);
      boolean boolean0 = false;
      visualBasicCompile0.setOptionExplicit(false);
      visualBasicCompile0.getReferenceFilesParameter();
      JSharp jSharp0 = new JSharp();
      jSharp0.getMainClassParameter();
      jSharp0.setIncludeDefaultReferences(false);
      jSharp0.getTaskName();
      visualBasicCompile0.getRuntimeConfigurableWrapper();
      jSharp0.getReferenceDelimiter();
      visualBasicCompile0.getWin32ResParameter();
      CSharp cSharp0 = new CSharp();
      cSharp0.getFileExtension();
      // Undeclared exception!
      try { 
        cSharp0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Owner has no project
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      JSharp jSharp0 = new JSharp();
      jSharp0.getOptimize();
      try { 
        jSharp0.validate();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // DestFile was not specified
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.JSharp", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      boolean boolean0 = true;
      cSharp0.setAdditionalModules("\"(]8:");
      cSharp0.getDestFile();
      // Undeclared exception!
      try { 
        cSharp0.log("\"(]8:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      Location location0 = cSharp0.getLocation();
      cSharp0.setLocation(location0);
      cSharp0.setExtraOptions("");
      RuntimeConfigurable runtimeConfigurable0 = cSharp0.getRuntimeConfigurableWrapper();
      cSharp0.setRuntimeConfigurableWrapper(runtimeConfigurable0);
      cSharp0.setFailOnError(true);
      cSharp0.setDefinitions("|QI!!}TS_e,LCLk");
      cSharp0.clear();
      cSharp0.setFullPaths(true);
      cSharp0.getReferenceDelimiter();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getRemoveIntChecks();
      cSharp0.getWin32IconParameter();
      visualBasicCompile0.getWin32IconParameter();
      cSharp0.setTaskName("");
      visualBasicCompile0.notEmpty("");
      cSharp0.getReferencesParameter();
      cSharp0.setMainClass((String) null);
      visualBasicCompile0.getCompilerExeName();
      visualBasicCompile0.getWin32ResParameter();
      visualBasicCompile0.setRootNamespace((String) null);
      cSharp0.getReferenceDelimiter();
      cSharp0.setIncremental(true);
      cSharp0.getDestFile();
      cSharp0.setWin32Icon((File) null);
      visualBasicCompile0.getWin32ResParameter();
      cSharp0.setFileAlign(0);
      visualBasicCompile0.getOptionCompareParameter();
      visualBasicCompile0.getDefinitionsDelimiter();
      String string0 = cSharp0.getReferenceDelimiter();
      assertEquals(";", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getSrcDir();
      cSharp0.outputFile = null;
      cSharp0.setOptimize(false);
      JSharp jSharp0 = new JSharp();
      jSharp0.getReferenceDelimiter();
      cSharp0.setOptimize(false);
      jSharp0.setExtraOptions(";");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.debug = true;
      visualBasicCompile0.createPatternSet();
      visualBasicCompile0.getRemoveIntChecksParameter();
      visualBasicCompile0.getWarnLevelParameter();
      visualBasicCompile0.getWin32IconParameter();
      visualBasicCompile0.setIncludes("/removeintchecks-");
      visualBasicCompile0.getReferenceDelimiter();
      visualBasicCompile0.getDebugParameter();
      visualBasicCompile0.getDefaultReferenceList();
      visualBasicCompile0.getWin32Res();
      visualBasicCompile0.setWin32Icon((File) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getDestFile();
      cSharp0.setDestFile((File) null);
      cSharp0.setDefinitions("");
      cSharp0.getDefinitionsParameter();
      try { 
        cSharp0.setTargetType("p6Pp/|xHhb<");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // targetType p6pp/|xhhb< is not one of 'exe', 'module', 'winexe' or 'library'
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.getFailOnError();
      jSharp0.getDebug();
      CSharp cSharp0 = new CSharp();
      JSharp jSharp1 = new JSharp();
      jSharp1.getDebug();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(path0).list();
      // Undeclared exception!
      try { 
        jSharp1.setReferenceFiles(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      DotnetResource dotnetResource0 = mock(DotnetResource.class, new ViolatedAssumptionAnswer());
      jSharp0.addResource(dotnetResource0);
      CSharp cSharp0 = new CSharp();
      cSharp0.getIncremental();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      DepthSelector depthSelector0 = mock(DepthSelector.class, new ViolatedAssumptionAnswer());
      NoneSelector noneSelector0 = mock(NoneSelector.class, new ViolatedAssumptionAnswer());
      visualBasicCompile0.addNone(noneSelector0);
      visualBasicCompile0.getTargetTypeParameter();
      visualBasicCompile0.addDepth(depthSelector0);
      visualBasicCompile0.createExclude();
      Location location0 = jSharp0.getLocation();
      jSharp0.setLocation(location0);
      DepthSelector depthSelector1 = mock(DepthSelector.class, new ViolatedAssumptionAnswer());
      visualBasicCompile0.getOptionCompare();
      // Undeclared exception!
      try { 
        DotnetCompile.isFileManagedBinary((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.DotnetCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.createPatternSet();
      jSharp0.getMainClass();
      jSharp0.init();
      // Undeclared exception!
      try { 
        jSharp0.createNetCommand();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Owner has no project
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.getWarnLevel();
      jSharp0.getWin32IconParameter();
      jSharp0.getReferenceDelimiter();
      jSharp0.setMainClass("");
      DotnetDefine dotnetDefine0 = mock(DotnetDefine.class, new ViolatedAssumptionAnswer());
      jSharp0.addDefine(dotnetDefine0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setRuntimeConfigurableWrapper((RuntimeConfigurable) null);
      visualBasicCompile0.getOptionCompareParameter();
      visualBasicCompile0.getDescription();
      visualBasicCompile0.createPatternSet();
      visualBasicCompile0.getFilePattern();
      visualBasicCompile0.getReferenceDelimiter();
      visualBasicCompile0.getWin32ResParameter();
      boolean boolean0 = false;
      visualBasicCompile0.selectorElements();
      visualBasicCompile0.setUtf8Output(false);
      visualBasicCompile0.setUtf8Output(false);
      try { 
        visualBasicCompile0.validate();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // DestFile was not specified
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      String string0 = cSharp0.getDefaultReferenceParameter();
      assertEquals("/reference:Accessibility.dll;cscompmgd.dll;CustomMarshalers.dll;Mscorcfg.dll;System.Configuration.Install.dll;System.Data.dll;System.Design.dll;System.DirectoryServices.dll;System.EnterpriseServices.dll;System.dll;System.Drawing.Design.dll;System.Drawing.dll;System.Management.dll;System.Messaging.dll;System.Runtime.Remoting.dll;System.Runtime.Serialization.Formatters.Soap.dll;System.Security.dll;System.ServiceProcess.dll;System.Web.dll;System.Web.RegularExpressions.dll;System.Web.Services.dll;System.Windows.Forms.dll;System.XML.dll;", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setCaseSensitive(true);
      visualBasicCompile0.setMainClass(";`:'j:%kL_");
      visualBasicCompile0.getRootNamespaceParameter();
      visualBasicCompile0.getRemoveIntChecks();
      CSharp cSharp0 = new CSharp();
      cSharp0.getOwningTarget();
      cSharp0.setOwningTarget((Target) null);
      visualBasicCompile0.targetType = ";`:'j:%kL_";
      cSharp0.getWin32IconParameter();
      cSharp0.getOwningTarget();
      cSharp0.getFileAlignParameter();
      visualBasicCompile0.getProject();
      visualBasicCompile0.getMainClassParameter();
      visualBasicCompile0.getRootNamespaceParameter();
      JSharp jSharp0 = new JSharp();
      visualBasicCompile0.getReferenceFilesParameter();
      jSharp0.getWarnLevel();
      jSharp0.setDefaultexcludes(false);
      visualBasicCompile0.getOptionCompareParameter();
      jSharp0.setBaseAddress(";`:'j:%kL_");
      visualBasicCompile0.getOptionExplicitParameter();
      visualBasicCompile0.getOptionStrict();
      visualBasicCompile0.getRemoveIntChecks();
      // Undeclared exception!
      try { 
        jSharp0.createNetCommand();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Owner has no project
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getDebug();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getOptionCompareParameter();
      cSharp0.setDefinitions("/optioncompare:binary");
      cSharp0.addResource((DotnetResource) null);
      visualBasicCompile0.setOptionExplicit(true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getFileExtension();
      visualBasicCompile0.getMainClass();
      DotnetCompile.TargetTypes dotnetCompile_TargetTypes0 = new DotnetCompile.TargetTypes();
      dotnetCompile_TargetTypes0.getIndex();
      boolean boolean0 = false;
      visualBasicCompile0.utf8output = false;
      dotnetCompile_TargetTypes0.getIndex();
      visualBasicCompile0.setTargetType(dotnetCompile_TargetTypes0);
      visualBasicCompile0.getRootNamespaceParameter();
      NetCommand netCommand0 = null;
      // Undeclared exception!
      try { 
        visualBasicCompile0.addCompilerSpecificOptions((NetCommand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.setReferences("");
      jSharp0.getDestFile();
      jSharp0.setWin32Icon((File) null);
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getOptionCompareParameter();
      jSharp0.setFollowSymlinks(false);
      jSharp0.setWarnLevel((-454));
      CSharp cSharp0 = new CSharp();
      // Undeclared exception!
      try { 
        cSharp0.createResourceParameter((DotnetResource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.CSharp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.setOwningTarget((Target) null);
      jSharp0.getFilePattern();
      jSharp0.getOptimizeParameter();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getWin32Res();
      visualBasicCompile0.getOptionExplicit();
      visualBasicCompile0.clear();
      visualBasicCompile0.getExtraOptionsParameter();
      CSharp cSharp0 = new CSharp();
      cSharp0.notEmpty("**/*..jsl");
      // Undeclared exception!
      try { 
        cSharp0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Owner has no project
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.setFullPaths(false);
      cSharp0.setWarnLevel(7581);
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.getIncludeDefaultReferencesParameter();
      visualBasicCompile0.getFailOnError();
      visualBasicCompile0.getImports();
      cSharp0.setIncremental(false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DotnetCompile.TargetTypes dotnetCompile_TargetTypes0 = new DotnetCompile.TargetTypes();
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setOptionExplicit(false);
      boolean boolean0 = visualBasicCompile0.getIncludeDefaultReferences();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSharp cSharp0 = new CSharp();
      cSharp0.getTargetType();
      cSharp0.getWin32Res();
      cSharp0.getDefaultReferenceList();
      cSharp0.setIncremental(false);
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      cSharp0.setIncludeDefaultReferences(false);
      // Undeclared exception!
      try { 
        visualBasicCompile0.log(">J,+3Z!cAk,;,$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSharp jSharp0 = new JSharp();
      jSharp0.secureScoping = false;
      jSharp0.setIncludeDefaultReferences(false);
      jSharp0.getDebug();
      jSharp0.createPatternSet();
      jSharp0.getDestFileParameter();
      try { 
        jSharp0.validate();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // DestFile was not specified
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.JSharp", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DotnetResource dotnetResource0 = mock(DotnetResource.class, new ViolatedAssumptionAnswer());
  }
}
