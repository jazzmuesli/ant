/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:17:39 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.sitraka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.optional.sitraka.CovReport;
import org.apache.tools.ant.taskdefs.optional.sitraka.ReportFilters;
import org.apache.tools.ant.types.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CovReport_ESTest extends CovReport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      CovReport.ReportType covReport_ReportType0 = new CovReport.ReportType();
      covReport0.setType(covReport_ReportType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      CovReport.ReportFormat covReport_ReportFormat0 = new CovReport.ReportFormat();
      covReport0.setFormat(covReport_ReportFormat0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CovReport.ReportType covReport_ReportType0 = new CovReport.ReportType();
      String[] stringArray0 = covReport_ReportType0.getValues();
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CovReport.ReportFormat covReport_ReportFormat0 = new CovReport.ReportFormat();
      String[] stringArray0 = covReport_ReportFormat0.getValues();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      CovReport.Reference covReport_Reference0 = covReport0.createReference();
      ReportFilters reportFilters0 = covReport_Reference0.createFilters();
      assertNotNull(reportFilters0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      CovReport.Reference covReport_Reference0 = covReport0.createReference();
      try { 
        covReport_Reference0.createEnhancedXMLReport();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Need a 'classpath' element.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.sitraka.CovReport$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      CovReport.Reference covReport_Reference0 = covReport0.new Reference();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      File file0 = covReport0.findCoverageJar();
      covReport0.setTofile(file0);
      assertFalse(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      File file0 = covReport0.findCoverageJar();
      covReport0.setSnapshot(file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      Integer integer0 = new Integer((-1813));
      covReport0.setPercent(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      covReport0.setIncludesource(false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      covReport0.setFilters("KFLC@o_j");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      Path path0 = covReport0.createSourcepath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      CovReport.Reference covReport_Reference0 = covReport0.createReference();
      Path path0 = covReport_Reference0.createClasspath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      Path path0 = covReport0.createCoveragepath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      // Undeclared exception!
      try { 
        covReport0.setType((CovReport.ReportType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.sitraka.CovReport", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      // Undeclared exception!
      try { 
        covReport0.setFormat((CovReport.ReportFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.sitraka.CovReport", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      // Undeclared exception!
      try { 
        covReport0.getParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.sitraka.CovReport", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      try { 
        covReport0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // 'tofile' attribute must be set.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.sitraka.CovReport", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CovReport covReport0 = new CovReport();
      try { 
        covReport0.checkOptions();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // 'tofile' attribute must be set.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.sitraka.CovReport", e);
      }
  }
}
