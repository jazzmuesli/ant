/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:31:44 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.metamata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Vector;
import org.apache.tools.ant.taskdefs.optional.metamata.MetricsElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetricsElement_ESTest extends MetricsElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MetricsElement metricsElement0 = new MetricsElement(0, "", (Vector) null);
      boolean boolean0 = metricsElement0.isMethod();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MetricsElement metricsElement0 = new MetricsElement(0, "", (Vector) null);
      boolean boolean0 = metricsElement0.isCompilationUnit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MetricsElement metricsElement0 = new MetricsElement((-2331), "{?fb:", (Vector) null);
      String string0 = metricsElement0.getName();
      assertEquals("{?fb:", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MetricsElement metricsElement0 = new MetricsElement((-2331), "{?fb:", (Vector) null);
      int int0 = metricsElement0.getIndent();
      assertEquals((-2331), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      try { 
        MetricsElement.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Could not parse the following line as a metrics: --><--
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.metamata.MetricsElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        MetricsElement.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MetricsElement metricsElement0 = new MetricsElement(0, (String) null, (Vector) null);
      // Undeclared exception!
      try { 
        metricsElement0.isMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.metamata.MetricsElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MetricsElement metricsElement0 = new MetricsElement(0, (String) null, (Vector) null);
      // Undeclared exception!
      try { 
        metricsElement0.isCompilationUnit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.metamata.MetricsElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MetricsElement metricsElement0 = new MetricsElement((-2331), "{?fb:", (Vector) null);
      // Undeclared exception!
      try { 
        metricsElement0.getMetrics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.metamata.MetricsElement", e);
      }
  }
}
