/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:00:29 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.jlink;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import org.apache.tools.ant.taskdefs.optional.jlink.ConstantPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPool_ESTest extends ConstantPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dataInput0).readUnsignedShort();
      ConstantPool constantPool0 = new ConstantPool(dataInput0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.jlink.ConstantPool", e);
      }
  }
}
