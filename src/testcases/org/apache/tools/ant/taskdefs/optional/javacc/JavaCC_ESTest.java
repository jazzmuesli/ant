/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:34:58 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.javacc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.optional.javacc.JavaCC;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCC_ESTest extends JavaCC_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setUsertokenmanager(false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setUsercharstream(true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setUnicodeinput(true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setTarget((File) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setStatic(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setSanitycheck(true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setOutputdirectory((File) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setOtherambiguityCheck(1829);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setOptimizetokenmanager(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setLookahead(1323);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setJavaunicodeescape(true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setJavacchome((File) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setIgnorecase(false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setForcelacheck(true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setErrorreporting(true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setDebugtokenmanager(false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setDebugparser(true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setDebuglookahead(false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setCommontokenaction(false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setChoiceambiguitycheck((-1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setCachetokens(true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setBuildtokenmanager(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      javaCC0.setBuildparser(true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        JavaCC.getMajorVersionNumber((File) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // JavaCC home must be a valid directory.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.javacc.JavaCC", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        JavaCC.getMainClass((File) null, 0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // JavaCC home must be a valid directory.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.javacc.JavaCC", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        JavaCC.getArchiveFile((File) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // JavaCC home must be a valid directory.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.javacc.JavaCC", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).isDirectory();
      // Undeclared exception!
      try { 
        JavaCC.getArchiveFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaCC javaCC0 = new JavaCC();
      try { 
        javaCC0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Invalid target: null
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.javacc.JavaCC", e);
      }
  }
}
