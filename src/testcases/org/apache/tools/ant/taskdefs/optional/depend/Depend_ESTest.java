/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:49:41 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.depend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.optional.depend.Depend;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Depend_ESTest extends Depend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Depend depend0 = new Depend();
      Path path0 = depend0.createClasspath();
      depend0.setClasspath(path0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Depend depend0 = new Depend();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Tf'4\"#";
      stringArray0[1] = "y-Z{TpNaNmL/y/Q*";
      stringArray0[2] = "";
      stringArray0[3] = "\":E,*+5\"@?1,";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      depend0.scanDir((File) null, stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Depend depend0 = new Depend();
      Path path0 = depend0.createClasspath();
      depend0.setSrcdir(path0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Depend depend0 = new Depend();
      depend0.setDump(false);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Depend depend0 = new Depend();
      depend0.setClosure(true);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Depend depend0 = new Depend();
      depend0.setCache((File) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Depend depend0 = new Depend();
      Path path0 = depend0.createClasspath();
      depend0.setDestDir(path0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Depend depend0 = new Depend();
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reference0).getRefId();
      doReturn((Object) null, (Object) null).when(reference0).getReferencedObject(any(org.apache.tools.ant.Project.class));
      depend0.setClasspathRef(reference0);
      Path path0 = depend0.getClasspath();
      // Undeclared exception!
      try { 
        depend0.setClasspath(path0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't denote a path null
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Depend depend0 = new Depend();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        depend0.scanDir(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Depend depend0 = new Depend();
      try { 
        depend0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // srcdir attribute must be set
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.Depend", e);
      }
  }
}
