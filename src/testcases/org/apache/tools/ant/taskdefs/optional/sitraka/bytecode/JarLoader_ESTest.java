/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:21:09 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.sitraka.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.JarLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JarLoader_ESTest extends JarLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      JarLoader jarLoader0 = new JarLoader(file0);
      File file1 = jarLoader0.getFile();
      assertFalse(file1.isDirectory());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      JarLoader jarLoader0 = new JarLoader(file0);
      // Undeclared exception!
      try { 
        jarLoader0.getClasses();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
         verifyException("java.io.FilePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("v").when(file0).getPath();
      doReturn(0L).when(file0).lastModified();
      JarLoader jarLoader0 = new JarLoader(file0);
      try { 
        jarLoader0.getClasses();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // v (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }
}
