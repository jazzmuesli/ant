/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:45:03 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Properties;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.optional.PropertyFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyFile_ESTest extends PropertyFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyFile.Unit propertyFile_Unit0 = new PropertyFile.Unit();
      String[] stringArray0 = propertyFile_Unit0.getValues();
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyFile.Unit propertyFile_Unit0 = new PropertyFile.Unit();
      // Undeclared exception!
      try { 
        propertyFile_Unit0.getCalendarField();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.PropertyFile$Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyFile.Entry propertyFile_Entry0 = new PropertyFile.Entry();
      propertyFile_Entry0.setValue("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyFile.Entry propertyFile_Entry0 = new PropertyFile.Entry();
      PropertyFile.Unit propertyFile_Unit0 = new PropertyFile.Unit();
      // Undeclared exception!
      try { 
        propertyFile_Entry0.setUnit(propertyFile_Unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.PropertyFile$Unit", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyFile.Entry.Type propertyFile_Entry_Type0 = new PropertyFile.Entry.Type();
      PropertyFile propertyFile0 = new PropertyFile();
      PropertyFile.Entry propertyFile_Entry0 = propertyFile0.createEntry();
      propertyFile_Entry0.setType(propertyFile_Entry_Type0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyFile.Entry propertyFile_Entry0 = new PropertyFile.Entry();
      propertyFile_Entry0.setPattern("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyFile propertyFile0 = new PropertyFile();
      PropertyFile.Entry propertyFile_Entry0 = propertyFile0.createEntry();
      PropertyFile.Entry.Operation propertyFile_Entry_Operation0 = new PropertyFile.Entry.Operation();
      propertyFile_Entry0.setOperation(propertyFile_Entry_Operation0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyFile.Entry propertyFile_Entry0 = new PropertyFile.Entry();
      propertyFile_Entry0.setKey("qzVG\"~-<B.#O4@");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyFile.Entry propertyFile_Entry0 = new PropertyFile.Entry();
      propertyFile_Entry0.setDefault("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyFile propertyFile0 = new PropertyFile();
      propertyFile0.setComment("&vk_ICdn;D}");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyFile propertyFile0 = new PropertyFile();
      PropertyFile.Entry propertyFile_Entry0 = propertyFile0.createEntry();
      try { 
        propertyFile_Entry0.executeOn((Properties) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // \"value\" and/or \"default\" attribute must be specified (key:null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.PropertyFile$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyFile propertyFile0 = new PropertyFile();
      try { 
        propertyFile0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // file token must not be null.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.PropertyFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyFile propertyFile0 = new PropertyFile();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      propertyFile0.setFile(file0);
      // Undeclared exception!
      try { 
        propertyFile0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }
}
