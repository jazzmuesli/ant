/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:50:09 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.optional.ReplaceRegExp;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.RegularExpression;
import org.apache.tools.ant.types.Substitution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReplaceRegExp_ESTest extends ReplaceRegExp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.createRegexp();
      replaceRegExp0.createSubstitution();
      replaceRegExp0.execute();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.setFlags("]e");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.setEncoding("]e");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.setByLine("]e");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
          // Undeclared exception!
          try { 
            replaceRegExp0.doReplace((File) null, (-639));
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"replace899128697.txt\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // java.io.File.delete(File.java:1036)
             // org.apache.tools.ant.taskdefs.optional.ReplaceRegExp.doReplace(ReplaceRegExp.java:472)
             // sun.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      replaceRegExp0.addFileset(fileSet0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.setReplace("Qp");
      // Undeclared exception!
      try { 
        replaceRegExp0.setReplace("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Only one substitution expression is allowed
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.ReplaceRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.createRegexp();
      // Undeclared exception!
      try { 
        replaceRegExp0.setMatch("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Only one regular expression is allowed
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.ReplaceRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      try { 
        replaceRegExp0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No expression to match.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.ReplaceRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      replaceRegExp0.setReplace("H_");
      replaceRegExp0.setMatch("_[BB1wid");
      replaceRegExp0.setFile(file0);
      // Undeclared exception!
      try { 
        replaceRegExp0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      RegularExpression regularExpression0 = replaceRegExp0.createRegexp();
      Substitution substitution0 = replaceRegExp0.createSubstitution();
      // Undeclared exception!
      try { 
        replaceRegExp0.doReplace(regularExpression0, substitution0, "", 1);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      Substitution substitution0 = replaceRegExp0.createSubstitution();
      // Undeclared exception!
      try { 
        replaceRegExp0.doReplace((RegularExpression) null, substitution0, "", 208);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.ReplaceRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.setReplace("");
      // Undeclared exception!
      try { 
        replaceRegExp0.createSubstitution();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Only one substitution expression is allowed
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.ReplaceRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReplaceRegExp replaceRegExp0 = new ReplaceRegExp();
      replaceRegExp0.createRegexp();
      // Undeclared exception!
      try { 
        replaceRegExp0.createRegexp();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Only one regular expression is allowed.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.ReplaceRegExp", e);
      }
  }
}
