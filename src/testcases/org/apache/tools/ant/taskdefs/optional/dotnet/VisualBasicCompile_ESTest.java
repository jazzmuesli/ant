/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:03:29 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.dotnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.optional.dotnet.DotnetResource;
import org.apache.tools.ant.taskdefs.optional.dotnet.NetCommand;
import org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualBasicCompile_ESTest extends VisualBasicCompile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      DotnetResource dotnetResource0 = mock(DotnetResource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dotnetResource0).getVbStyleParameter();
      String string0 = visualBasicCompile0.createResourceParameter(dotnetResource0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setRootNamespace("dF+");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setRemoveIntChecks(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setOptionStrict(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setOptionExplicit(true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setOptionCompare("vE:biV#");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.setImports("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getWin32ResParameter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getRootNamespaceParameter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getRootNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getRemoveIntChecksParameter();
      assertEquals("/removeintchecks-", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      boolean boolean0 = visualBasicCompile0.getRemoveIntChecks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getReferenceDelimiter();
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getOptionStrictParameter();
      assertEquals("/optionstrict-", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      boolean boolean0 = visualBasicCompile0.getOptionStrict();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getOptionExplicitParameter();
      assertEquals("/optionexplicit-", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      boolean boolean0 = visualBasicCompile0.getOptionExplicit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getOptionCompareParameter();
      assertEquals("/optioncompare:binary", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getOptionCompare();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getImportsParameter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getImports();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getFileExtension();
      assertEquals("vb", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      String string0 = visualBasicCompile0.getCompilerExeName();
      assertEquals("vbc", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      visualBasicCompile0.clear();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      try { 
        visualBasicCompile0.validate();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // DestFile was not specified
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      // Undeclared exception!
      try { 
        visualBasicCompile0.createResourceParameter((DotnetResource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualBasicCompile visualBasicCompile0 = new VisualBasicCompile();
      // Undeclared exception!
      try { 
        visualBasicCompile0.addCompilerSpecificOptions((NetCommand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.dotnet.VisualBasicCompile", e);
      }
  }
}
