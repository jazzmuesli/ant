/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:18:42 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.taskdefs.optional.Cab;
import org.apache.tools.ant.types.FileSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cab_ESTest extends Cab_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cab cab0 = new Cab();
      Vector vector0 = cab0.getFileList();
      boolean boolean0 = cab0.isUpToDate(vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cab cab0 = new Cab();
      Vector vector0 = cab0.getFileList();
      String[] stringArray0 = new String[0];
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(directoryScanner0).getIncludedFiles();
      cab0.appendFiles(vector0, directoryScanner0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cab cab0 = new Cab();
      cab0.setVerbose(true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cab cab0 = new Cab();
      cab0.setOptions("C!27q9SlX7");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cab cab0 = new Cab();
      cab0.setCompress(true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cab cab0 = new Cab();
      cab0.setCabfile((File) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cab cab0 = new Cab();
      cab0.setBasedir((File) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Cab cab0 = new Cab();
          Vector vector0 = cab0.getFileList();
          // Undeclared exception!
          try { 
            cab0.createListFile(vector0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"ant310914149\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:200)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:162)
             // org.apache.tools.ant.taskdefs.optional.Cab.createListFile(Cab.java:197)
             // sun.reflect.GeneratedMethodAccessor47.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cab cab0 = new Cab();
      // Undeclared exception!
      try { 
        cab0.isUpToDate((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.Cab", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cab cab0 = new Cab();
      FileSet fileSet0 = mock(FileSet.class, new ViolatedAssumptionAnswer());
      doReturn((DirectoryScanner) null).when(fileSet0).getDirectoryScanner(any(org.apache.tools.ant.Project.class));
      cab0.addFileset(fileSet0);
      // Undeclared exception!
      try { 
        cab0.getFileList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.Cab", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cab cab0 = new Cab();
      try { 
        cab0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // basedir attribute or at least one nested filest is required!
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.Cab", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cab cab0 = new Cab();
      // Undeclared exception!
      try { 
        cab0.createExec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.Cab", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cab cab0 = new Cab();
      try { 
        cab0.checkConfiguration();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // basedir attribute or at least one nested filest is required!
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.Cab", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cab cab0 = new Cab();
      Vector vector0 = cab0.getFileList();
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(directoryScanner0).getIncludedFiles();
      // Undeclared exception!
      try { 
        cab0.appendFiles(vector0, directoryScanner0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.Cab", e);
      }
  }
}
