/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:02:58 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.depend.constantpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPool;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPoolEntry;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.FieldRefCPInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldRefCPInfo_ESTest extends FieldRefCPInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      String string0 = fieldRefCPInfo0.toString();
      assertEquals("Field : Class index = 0, name and type index = 0", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      String string0 = fieldRefCPInfo0.getFieldType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      String string0 = fieldRefCPInfo0.getFieldName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      String string0 = fieldRefCPInfo0.getFieldClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      doReturn((ConstantPoolEntry) null).when(constantPool0).getEntry(anyInt());
      // Undeclared exception!
      try { 
        fieldRefCPInfo0.resolve(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.constantpool.FieldRefCPInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      doReturn(fieldRefCPInfo0).when(constantPool0).getEntry(anyInt());
      // Undeclared exception!
      try { 
        fieldRefCPInfo0.resolve(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.tools.ant.taskdefs.optional.depend.constantpool.FieldRefCPInfo cannot be cast to org.apache.tools.ant.taskdefs.optional.depend.constantpool.ClassCPInfo
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.constantpool.FieldRefCPInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      // Undeclared exception!
      try { 
        fieldRefCPInfo0.read((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.constantpool.FieldRefCPInfo", e);
      }
  }
}
