/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:59:58 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.depend.constantpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.ClassCPInfo;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPool;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPoolEntry;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.DoubleCPInfo;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.FieldRefCPInfo;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.MethodRefCPInfo;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.NameAndTypeCPInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolEntry_ESTest extends ConstantPoolEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleCPInfo doubleCPInfo0 = new DoubleCPInfo();
      doubleCPInfo0.resolve((ConstantPool) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassCPInfo classCPInfo0 = new ClassCPInfo();
      boolean boolean0 = classCPInfo0.isResolved();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleCPInfo doubleCPInfo0 = new DoubleCPInfo();
      int int0 = doubleCPInfo0.getTag();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleCPInfo doubleCPInfo0 = new DoubleCPInfo();
      int int0 = doubleCPInfo0.getNumEntries();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FieldRefCPInfo fieldRefCPInfo0 = new FieldRefCPInfo();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      doReturn((ConstantPoolEntry) null).when(constantPool0).getEntry(anyInt());
      // Undeclared exception!
      try { 
        fieldRefCPInfo0.resolve(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.constantpool.FieldRefCPInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NameAndTypeCPInfo nameAndTypeCPInfo0 = new NameAndTypeCPInfo();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      doReturn(nameAndTypeCPInfo0).when(constantPool0).getEntry(anyInt());
      // Undeclared exception!
      try { 
        nameAndTypeCPInfo0.resolve(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.tools.ant.taskdefs.optional.depend.constantpool.NameAndTypeCPInfo cannot be cast to org.apache.tools.ant.taskdefs.optional.depend.constantpool.Utf8CPInfo
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.constantpool.NameAndTypeCPInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ConstantPoolEntry.readEntry(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MethodRefCPInfo methodRefCPInfo0 = new MethodRefCPInfo();
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        methodRefCPInfo0.read(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
