/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:58:20 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.junit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
import org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JUnitTestRunner_ESTest extends JUnitTestRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(classLoader0).loadClass(anyString());
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, false, false, true, classLoader0);
      jUnitTestRunner0.run();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      String string0 = JUnitTestRunner.getFilteredTrace(throwable0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = JUnitTestRunner.filterStack("z%nSMds+.;nzKb?C");
      assertEquals("z%nSMds+.;nzKb?C\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, true, true, true, true);
      jUnitTestRunner0.handleOutput("4S+<q1mWUS^mk,");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, true, true, true, true);
      jUnitTestRunner0.handleFlush((String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, true, true, true, true);
      jUnitTestRunner0.handleErrorOutput("]7kV~-qLqiNx");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, true, true, true, true);
      jUnitTestRunner0.handleErrorFlush("]7kV~-qLqiNx");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, false, true, true, true);
      int int0 = jUnitTestRunner0.getRetCode();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, false, true, true, true);
      JUnitResultFormatter jUnitResultFormatter0 = mock(JUnitResultFormatter.class, new ViolatedAssumptionAnswer());
      jUnitTestRunner0.addFormatter(jUnitResultFormatter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(classLoader0).loadClass(anyString());
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, true, true, true, true, classLoader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(classLoader0).loadClass(anyString());
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, false, false, true, classLoader0);
      byte[] byteArray0 = new byte[6];
      int int0 = jUnitTestRunner0.handleInput(byteArray0, 0, (-345));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JUnitTest jUnitTest0 = mock(JUnitTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jUnitTest0).getName();
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner(jUnitTest0, true, true, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JUnitTestRunner jUnitTestRunner0 = new JUnitTestRunner((JUnitTest) null, true, true, true, true);
      // Undeclared exception!
      try { 
        jUnitTestRunner0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JUnitTestRunner.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JUnitTestRunner.getFilteredTrace((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JUnitTestRunner.filterStack((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
