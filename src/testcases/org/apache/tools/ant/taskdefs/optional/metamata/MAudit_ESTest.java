/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:27:43 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.metamata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.ExecuteStreamHandler;
import org.apache.tools.ant.taskdefs.optional.metamata.MAudit;
import org.apache.tools.ant.types.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MAudit_ESTest extends MAudit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setVerbose(false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setUnused(true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setTofile((File) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setQuiet(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setOffsets(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setList(true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setFullsemanticize(true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setFix(true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.setExit(true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      ExecuteStreamHandler executeStreamHandler0 = mAudit0.createStreamHandler();
      assertNotNull(executeStreamHandler0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      Path path0 = mAudit0.createSearchpath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      Path path0 = mAudit0.createRulespath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      mAudit0.cleanUp();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      // Undeclared exception!
      try { 
        mAudit0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.metamata.MAudit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MAudit mAudit0 = new MAudit();
      try { 
        mAudit0.checkOptions();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // 'home' must point to Metamata home directory.
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.metamata.AbstractMetamataTask", e);
      }
  }
}
