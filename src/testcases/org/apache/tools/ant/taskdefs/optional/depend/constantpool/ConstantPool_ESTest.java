/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:55:35 GMT 2020
 */

package org.apache.tools.ant.taskdefs.optional.depend.constantpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPool;
import org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPoolEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPool_ESTest extends ConstantPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.getUTF8Entry("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      ConstantPoolEntry constantPoolEntry0 = constantPool0.getEntry(0);
      assertNull(constantPoolEntry0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      String string0 = constantPool0.toString();
      assertEquals("\n[0] = null\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      constantPool0.resolve();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.getNameAndTypeEntry((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.getMethodRefEntry("", "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.getInterfaceMethodRefEntry("\n[0] = null\n", "s3\"='iQO<_GL ", "\n[0] = null\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.getFieldRefEntry("[7Qie1n$m}(p&uM}#", "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.getConstantEntry("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      int int0 = constantPool0.getClassEntry((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        constantPool0.read(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      // Undeclared exception!
      try { 
        constantPool0.getUTF8Entry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      // Undeclared exception!
      try { 
        constantPool0.getEntry((-3610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3610
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool();
      // Undeclared exception!
      try { 
        constantPool0.addEntry((ConstantPoolEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.taskdefs.optional.depend.constantpool.ConstantPool", e);
      }
  }
}
