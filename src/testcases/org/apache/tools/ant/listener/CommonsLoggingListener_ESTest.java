/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:19:31 GMT 2020
 */

package org.apache.tools.ant.listener;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Target;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.listener.CommonsLoggingListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommonsLoggingListener_ESTest extends CommonsLoggingListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      BuildEvent buildEvent0 = null;
      commonsLoggingListener0.targetStarted((BuildEvent) null);
      boolean boolean0 = false;
      commonsLoggingListener0.setEmacsMode(false);
      PrintStream printStream0 = commonsLoggingListener0.err;
      commonsLoggingListener0.setErrorPrintStream((PrintStream) null);
      commonsLoggingListener0.setOutputPrintStream((PrintStream) null);
      commonsLoggingListener0.targetFinished((BuildEvent) null);
      commonsLoggingListener0.targetStarted((BuildEvent) null);
      commonsLoggingListener0.buildFinished((BuildEvent) null);
      commonsLoggingListener0.buildStarted((BuildEvent) null);
      // Undeclared exception!
      try { 
        commonsLoggingListener0.taskFinished((BuildEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskFinished(buildEvent0);
      PrintStream printStream0 = commonsLoggingListener0.out;
      commonsLoggingListener0.out = null;
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskFinished(buildEvent1);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      PrintStream printStream1 = commonsLoggingListener0.out;
      commonsLoggingListener0.setOutputPrintStream((PrintStream) null);
      commonsLoggingListener0.targetFinished(buildEvent2);
      BuildEvent buildEvent3 = null;
      commonsLoggingListener0.taskStarted((BuildEvent) null);
      BuildEvent buildEvent4 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.messageLogged(buildEvent4);
      commonsLoggingListener0.targetStarted((BuildEvent) null);
      commonsLoggingListener0.setEmacsMode(true);
      commonsLoggingListener0.setMessageOutputLevel((-1));
      commonsLoggingListener0.buildStarted((BuildEvent) null);
      commonsLoggingListener0.buildStarted((BuildEvent) null);
      // Undeclared exception!
      try { 
        commonsLoggingListener0.buildFinished((BuildEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetStarted(buildEvent0);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      PrintStream printStream0 = commonsLoggingListener0.err;
      commonsLoggingListener0.err = null;
      commonsLoggingListener0.buildFinished(buildEvent1);
      PrintStream printStream1 = commonsLoggingListener0.out;
      commonsLoggingListener0.setOutputPrintStream((PrintStream) null);
      commonsLoggingListener0.setMessageOutputLevel(0);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskFinished(buildEvent2);
      BuildEvent buildEvent3 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.buildStarted(buildEvent3);
      commonsLoggingListener0.setOutputPrintStream((PrintStream) null);
      commonsLoggingListener0.setEmacsMode(true);
      commonsLoggingListener0.setErrorPrintStream((PrintStream) null);
      BuildEvent buildEvent4 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Target) null).when(buildEvent4).getTarget();
      // Undeclared exception!
      try { 
        commonsLoggingListener0.targetFinished(buildEvent4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      PrintStream printStream0 = commonsLoggingListener0.out;
      commonsLoggingListener0.setOutputPrintStream((PrintStream) null);
      commonsLoggingListener0.setEmacsMode(false);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskStarted(buildEvent0);
      commonsLoggingListener0.setErrorPrintStream((PrintStream) null);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskStarted(buildEvent1);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      BuildEvent buildEvent3 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetFinished(buildEvent3);
      commonsLoggingListener0.taskFinished(buildEvent2);
      BuildEvent buildEvent4 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskFinished(buildEvent4);
      BuildEvent buildEvent5 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetFinished(buildEvent5);
      BuildEvent buildEvent6 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.err = null;
      commonsLoggingListener0.taskFinished(buildEvent6);
      BuildEvent buildEvent7 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.buildStarted(buildEvent7);
      commonsLoggingListener0.setOutputPrintStream((PrintStream) null);
      BuildEvent buildEvent8 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Target) null).when(buildEvent8).getTarget();
      // Undeclared exception!
      try { 
        commonsLoggingListener0.targetStarted(buildEvent8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      commonsLoggingListener0.setMessageOutputLevel(2362);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.messageLogged(buildEvent0);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      PrintStream printStream0 = commonsLoggingListener0.out;
      commonsLoggingListener0.err = null;
      commonsLoggingListener0.buildStarted(buildEvent1);
      // Undeclared exception!
      try { 
        commonsLoggingListener0.messageLogged((BuildEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      PrintStream printStream0 = commonsLoggingListener0.err;
      commonsLoggingListener0.err = null;
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.messageLogged(buildEvent1);
      boolean boolean0 = true;
      commonsLoggingListener0.setEmacsMode(true);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskStarted(buildEvent2);
      commonsLoggingListener0.taskFinished(buildEvent0);
      BuildEvent buildEvent3 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetStarted(buildEvent3);
      commonsLoggingListener0.setEmacsMode(true);
      BuildEvent buildEvent4 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.messageLogged(buildEvent4);
      BuildEvent buildEvent5 = null;
      commonsLoggingListener0.targetFinished((BuildEvent) null);
      commonsLoggingListener0.taskStarted((BuildEvent) null);
      commonsLoggingListener0.messageLogged((BuildEvent) null);
      commonsLoggingListener0.buildFinished((BuildEvent) null);
      commonsLoggingListener0.buildStarted((BuildEvent) null);
      // Undeclared exception!
      try { 
        commonsLoggingListener0.taskStarted((BuildEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      commonsLoggingListener0.setEmacsMode(false);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.buildStarted(buildEvent0);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null, (Project) null).when(buildEvent1).getProject();
      doReturn((Target) null).when(buildEvent1).getTarget();
      doReturn((Task) null).when(buildEvent1).getTask();
      // Undeclared exception!
      try { 
        commonsLoggingListener0.messageLogged(buildEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      PrintStream printStream0 = commonsLoggingListener0.err;
      commonsLoggingListener0.setErrorPrintStream((PrintStream) null);
      commonsLoggingListener0.setEmacsMode(false);
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskFinished(buildEvent0);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.messageLogged(buildEvent1);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetFinished(buildEvent2);
      commonsLoggingListener0.setMessageOutputLevel(1);
      BuildEvent buildEvent3 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetStarted(buildEvent3);
      commonsLoggingListener0.setEmacsMode(false);
      BuildEvent buildEvent4 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.buildFinished(buildEvent4);
      commonsLoggingListener0.setMessageOutputLevel(1);
      BuildEvent buildEvent5 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskStarted(buildEvent5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskStarted(buildEvent0);
      PrintStream printStream0 = commonsLoggingListener0.out;
      commonsLoggingListener0.setErrorPrintStream((PrintStream) null);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.buildStarted(buildEvent1);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Target) null).when(buildEvent2).getTarget();
      // Undeclared exception!
      try { 
        commonsLoggingListener0.targetStarted(buildEvent2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.listener.CommonsLoggingListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetStarted(buildEvent0);
      PrintStream printStream0 = commonsLoggingListener0.err;
      commonsLoggingListener0.setOutputPrintStream((PrintStream) null);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetStarted(buildEvent1);
      commonsLoggingListener0.setMessageOutputLevel(0);
      commonsLoggingListener0.setMessageOutputLevel(0);
      BuildEvent buildEvent2 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.buildStarted(buildEvent2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommonsLoggingListener commonsLoggingListener0 = new CommonsLoggingListener();
      BuildEvent buildEvent0 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.taskStarted(buildEvent0);
      commonsLoggingListener0.setEmacsMode(true);
      BuildEvent buildEvent1 = mock(BuildEvent.class, new ViolatedAssumptionAnswer());
      commonsLoggingListener0.targetStarted(buildEvent1);
      PrintStream printStream0 = commonsLoggingListener0.err;
      commonsLoggingListener0.setErrorPrintStream((PrintStream) null);
      commonsLoggingListener0.setMessageOutputLevel((-1));
  }
}
