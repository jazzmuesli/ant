/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:41:31 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Stack;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.AntFilterReader;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.FilterChain;
import org.apache.tools.ant.types.Mapper;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.PatternSet;
import org.apache.tools.ant.types.Reference;
import org.apache.tools.ant.types.XMLCatalog;
import org.apache.tools.ant.types.ZipFileSet;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataType_ESTest extends DataType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AndSelector andSelector0 = new AndSelector();
      andSelector0.setRefid((Reference) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Mapper mapper0 = new Mapper((Project) null);
      BuildException buildException0 = mapper0.tooManyAttributes();
      assertEquals("You must not specify more than one attribute when using refid", buildException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createClasspath();
      path0.setChecked(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSet fileSet0 = new FileSet();
      BuildException buildException0 = fileSet0.noChildrenAllowed();
      assertEquals("You must not specify nested elements when using refid", buildException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      boolean boolean0 = filterChain0.isReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      boolean boolean0 = antFilterReader0.isChecked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      Reference reference0 = zipFileSet0.getRefid();
      assertNull(reference0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      String string0 = antFilterReader0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      Stack<PatternSet> stack0 = new Stack<PatternSet>();
      Project project0 = new Project();
      zipFileSet0.dieOnCircularReference(stack0, project0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      BuildException buildException0 = antFilterReader0.circularReference();
      assertEquals("This data type contains a circular reference.", buildException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      Reference reference0 = new Reference();
      // Undeclared exception!
      try { 
        antFilterReader0.setRefid(reference0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No reference specified
         //
         verifyException("org.apache.tools.ant.types.Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      Class<AntFilterReader> class0 = AntFilterReader.class;
      // Undeclared exception!
      try { 
        filterChain0.getCheckedRef(class0, "k0c}UNI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }
}
