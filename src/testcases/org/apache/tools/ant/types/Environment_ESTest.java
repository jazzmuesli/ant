/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:58:23 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.Environment;
import org.apache.tools.ant.types.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Environment_ESTest extends Environment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Environment environment0 = new Environment();
      String[] stringArray0 = environment0.getVariables();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Environment.Variable environment_Variable0 = new Environment.Variable();
      environment_Variable0.setValue("");
      environment_Variable0.setKey("CU*Phm$");
      String string0 = environment_Variable0.getContent();
      assertEquals("CU*Phm$=", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Environment.Variable environment_Variable0 = new Environment.Variable();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(path0).toString();
      environment_Variable0.setPath(path0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Environment.Variable environment_Variable0 = new Environment.Variable();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      environment_Variable0.setFile(file0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Environment.Variable environment_Variable0 = new Environment.Variable();
      String string0 = environment_Variable0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Environment.Variable environment_Variable0 = new Environment.Variable();
      String string0 = environment_Variable0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Variable environment_Variable0 = new Environment.Variable();
      environment0.addVariable(environment_Variable0);
      try { 
        environment0.getVariables();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // key and value must be specified for environment variables.
         //
         verifyException("org.apache.tools.ant.types.Environment$Variable", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Environment environment0 = new Environment();
      environment0.variables = null;
      // Undeclared exception!
      try { 
        environment0.getVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Environment environment0 = new Environment();
      Environment.Variable environment_Variable0 = new Environment.Variable();
      environment0.variables = null;
      // Undeclared exception!
      try { 
        environment0.addVariable(environment_Variable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Environment", e);
      }
  }
}
