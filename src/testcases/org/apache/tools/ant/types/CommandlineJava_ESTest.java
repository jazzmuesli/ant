/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:07:05 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.types.CommandlineJava;
import org.apache.tools.ant.types.Environment;
import org.apache.tools.ant.types.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommandlineJava_ESTest extends CommandlineJava_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      String string0 = commandlineJava0.toString();
      assertEquals("/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      int int0 = commandlineJava0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.setSystemProperties();
      commandlineJava0.restoreSystemProperties();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      String[] stringArray0 = commandlineJava0.getCommandline();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      String string0 = commandlineJava0.describeCommand();
      assertEquals("Executing '/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java' with ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      CommandlineJava.SysProperties commandlineJava_SysProperties0 = commandlineJava0.getSystemProperties();
      int int0 = commandlineJava_SysProperties0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommandlineJava.SysProperties commandlineJava_SysProperties0 = new CommandlineJava.SysProperties();
      commandlineJava_SysProperties0.setSystem();
      commandlineJava_SysProperties0.restoreSystem();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommandlineJava.SysProperties commandlineJava_SysProperties0 = new CommandlineJava.SysProperties();
      String[] stringArray0 = commandlineJava_SysProperties0.getVariables();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.setVmversion("/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java -Dnull");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.setVm((String) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.setMaxmemory("f[i");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.setJar("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.setClassname("x4hZ2t3Wc~");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      String string0 = commandlineJava0.getVmversion();
      assertEquals("1.4", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Commandline commandline0 = commandlineJava0.getVmCommand();
      assertNotNull(commandline0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      CommandlineJava.SysProperties commandlineJava_SysProperties0 = commandlineJava0.getSystemProperties();
      Object object0 = commandlineJava_SysProperties0.clone();
      assertFalse(object0.equals((Object)commandlineJava_SysProperties0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Commandline commandline0 = commandlineJava0.getJavaCommand();
      assertNotNull(commandline0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      String string0 = commandlineJava0.getJar();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Path path0 = commandlineJava0.getClasspath();
      assertNull(path0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      String string0 = commandlineJava0.getClassname();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      String string0 = commandlineJava0.describeJavaCommand();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Commandline.Argument commandline_Argument0 = commandlineJava0.createVmArgument();
      assertNotNull(commandline_Argument0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Commandline.Argument commandline_Argument0 = commandlineJava0.createArgument();
      assertNotNull(commandline_Argument0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Object object0 = commandlineJava0.clone();
      assertFalse(object0.equals((Object)commandlineJava0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.clearJavaArgs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.addSysproperty((Environment.Variable) null);
      // Undeclared exception!
      try { 
        commandlineJava0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn(" e").when(project0).getProperty(anyString());
      doReturn((File) null).when(project0).resolveFile(anyString());
      commandlineJava0.createClasspath(project0);
      // Undeclared exception!
      try { 
        commandlineJava0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Environment.Variable environment_Variable0 = mock(Environment.Variable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(environment_Variable0).getKey();
      doReturn((String) null).when(environment_Variable0).getValue();
      commandlineJava0.addSysproperty(environment_Variable0);
      // Undeclared exception!
      try { 
        commandlineJava0.setSystemProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      try { 
        commandlineJava0.restoreSystemProperties();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Unbalanced nesting of SysProperties
         //
         verifyException("org.apache.tools.ant.types.CommandlineJava$SysProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.addSysproperty((Environment.Variable) null);
      // Undeclared exception!
      try { 
        commandlineJava0.getCommandline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CommandlineJava commandlineJava0 = new CommandlineJava();
      commandlineJava0.addSysproperty((Environment.Variable) null);
      // Undeclared exception!
      try { 
        commandlineJava0.describeCommand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Environment", e);
      }
  }
}
