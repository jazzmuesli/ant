/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:28:50 GMT 2020
 */

package org.apache.tools.ant.types.optional.depend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Vector;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.types.optional.depend.DependScanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DependScanner_ESTest extends DependScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DependScanner dependScanner0 = new DependScanner((DirectoryScanner) null);
      dependScanner0.setRootClasses((Vector) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DependScanner dependScanner0 = new DependScanner((DirectoryScanner) null);
      String[] stringArray0 = new String[3];
      dependScanner0.setIncludes(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DependScanner dependScanner0 = new DependScanner((DirectoryScanner) null);
      String[] stringArray0 = new String[8];
      dependScanner0.setExcludes(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      dependScanner0.setCaseSensitive(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      dependScanner0.setBasedir((File) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DependScanner dependScanner0 = new DependScanner((DirectoryScanner) null);
      String[] stringArray0 = dependScanner0.getNotIncludedFiles();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DependScanner dependScanner0 = new DependScanner((DirectoryScanner) null);
      String[] stringArray0 = dependScanner0.getNotIncludedDirectories();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      String[] stringArray0 = dependScanner0.getIncludedDirectories();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DependScanner dependScanner0 = new DependScanner((DirectoryScanner) null);
      String[] stringArray0 = dependScanner0.getExcludedFiles();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      String[] stringArray0 = dependScanner0.getExcludedDirectories();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      File file0 = dependScanner0.getBasedir();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      dependScanner0.addDefaultExcludes();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      // Undeclared exception!
      try { 
        dependScanner0.scan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.optional.depend.DependScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DirectoryScanner directoryScanner0 = mock(DirectoryScanner.class, new ViolatedAssumptionAnswer());
      DependScanner dependScanner0 = new DependScanner(directoryScanner0);
      // Undeclared exception!
      try { 
        dependScanner0.getIncludedFiles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.optional.depend.DependScanner", e);
      }
  }
}
