/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:54:55 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Hashtable;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.FileScanner;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.AbstractFileSet;
import org.apache.tools.ant.types.DirSet;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.PatternSet;
import org.apache.tools.ant.types.Reference;
import org.apache.tools.ant.types.ZipFileSet;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
import org.apache.tools.ant.types.selectors.ContainsSelector;
import org.apache.tools.ant.types.selectors.DateSelector;
import org.apache.tools.ant.types.selectors.DependSelector;
import org.apache.tools.ant.types.selectors.DepthSelector;
import org.apache.tools.ant.types.selectors.ExtendSelector;
import org.apache.tools.ant.types.selectors.FileSelector;
import org.apache.tools.ant.types.selectors.FilenameSelector;
import org.apache.tools.ant.types.selectors.MajoritySelector;
import org.apache.tools.ant.types.selectors.NoneSelector;
import org.apache.tools.ant.types.selectors.NotSelector;
import org.apache.tools.ant.types.selectors.OrSelector;
import org.apache.tools.ant.types.selectors.PresentSelector;
import org.apache.tools.ant.types.selectors.SelectSelector;
import org.apache.tools.ant.types.selectors.SizeSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFileSet_ESTest extends AbstractFileSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.setIncludes((String) null);
      NoneSelector noneSelector0 = mock(NoneSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.getProject();
      zipFileSet0.getDataTypeName();
      zipFileSet0.addNone(noneSelector0);
      zipFileSet0.createPatternSet();
      DateSelector dateSelector0 = mock(DateSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addDate(dateSelector0);
      // Undeclared exception!
      try { 
        zipFileSet0.setupDirectoryScanner((FileScanner) null, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ds cannot be null
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      zipFileSet0.setCaseSensitive(true);
      ContainsRegexpSelector containsRegexpSelector0 = mock(ContainsRegexpSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet1.addContainsRegexp(containsRegexpSelector0);
      zipFileSet0.setCaseSensitive(false);
      ZipFileSet zipFileSet2 = new ZipFileSet(zipFileSet1);
      zipFileSet2.getDirMode();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Hashtable) null).when(project0).getDataTypeDefinitions();
      zipFileSet1.setProject(project0);
      zipFileSet2.setFollowSymlinks(false);
      zipFileSet0.setExcludes("");
      ContainsSelector containsSelector0 = mock(ContainsSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.log("");
      zipFileSet1.addContains(containsSelector0);
      FilenameSelector filenameSelector0 = mock(FilenameSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet2.addFilename(filenameSelector0);
      // Undeclared exception!
      try { 
        zipFileSet1.getDataTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.selectorCount();
      zipFileSet0.setIncludes("i!Tg=/$9vq-ixvxsFDS");
      PresentSelector presentSelector0 = mock(PresentSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addPresent(presentSelector0);
      zipFileSet0.setFollowSymlinks(false);
      zipFileSet0.createIncludesFile();
      NoneSelector noneSelector0 = mock(NoneSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addNone(noneSelector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSet fileSet0 = new FileSet();
      ZipFileSet zipFileSet0 = new ZipFileSet(fileSet0);
      FilenameSelector filenameSelector0 = mock(FilenameSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addFilename(filenameSelector0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      fileSet0.getDir(project0);
      zipFileSet0.setDir((File) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.setFollowSymlinks(true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSet fileSet0 = new FileSet();
      ZipFileSet zipFileSet0 = new ZipFileSet(fileSet0);
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      FileSet fileSet1 = new FileSet(zipFileSet1);
      PatternSet.NameEntry patternSet_NameEntry0 = fileSet1.createExcludesFile();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      zipFileSet1.selectorElements();
      zipFileSet0.getSelectors(project0);
      zipFileSet0.clone();
      FileSet fileSet0 = new FileSet(zipFileSet1);
      zipFileSet1.getRefid();
      fileSet0.setRefid((Reference) null);
      ZipFileSet zipFileSet2 = new ZipFileSet(fileSet0);
      PresentSelector presentSelector0 = mock(PresentSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet2.addPresent(presentSelector0);
      DepthSelector depthSelector0 = null;
      zipFileSet2.addDepth((DepthSelector) null);
      zipFileSet0.getSrc();
      // Undeclared exception!
      try { 
        fileSet0.setExcludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSet fileSet0 = new FileSet();
      fileSet0.setDescription("}$kuNU");
      fileSet0.addPresent((PresentSelector) null);
      DependSelector dependSelector0 = mock(DependSelector.class, new ViolatedAssumptionAnswer());
      String string0 = "5EZ<{J-J8~EK";
      fileSet0.log("5EZ<{J-J8~EK", 0);
      fileSet0.addDepend(dependSelector0);
      MajoritySelector majoritySelector0 = mock(MajoritySelector.class, new ViolatedAssumptionAnswer());
      fileSet0.addMajority(majoritySelector0);
      ZipFileSet zipFileSet0 = new ZipFileSet(fileSet0);
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      DepthSelector depthSelector0 = mock(DepthSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addDepth(depthSelector0);
      // Undeclared exception!
      try { 
        zipFileSet1.setDirMode("k*GY\"Rk+#YF>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k*GY\"Rk+#YF>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.setRefid((Reference) null);
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      zipFileSet1.tooManyAttributes();
      ZipFileSet zipFileSet2 = new ZipFileSet(zipFileSet1);
      PresentSelector presentSelector0 = mock(PresentSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet2.addPresent(presentSelector0);
      OrSelector orSelector0 = mock(OrSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet1.getRefid();
      Project project0 = null;
      zipFileSet2.setProject((Project) null);
      zipFileSet1.addOr(orSelector0);
      // Undeclared exception!
      try { 
        zipFileSet2.toString();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for ZipFileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      ZipFileSet zipFileSet2 = new ZipFileSet(zipFileSet1);
      zipFileSet1.setChecked(false);
      zipFileSet2.getFullpath();
      ContainsSelector containsSelector0 = mock(ContainsSelector.class, new ViolatedAssumptionAnswer());
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      zipFileSet2.getDir(project0);
      zipFileSet2.setSrc((File) null);
      zipFileSet0.addContains(containsSelector0);
      zipFileSet0.hasSelectors();
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      zipFileSet2.getDir(project1);
      // Undeclared exception!
      try { 
        zipFileSet0.setExcludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSet fileSet0 = new FileSet();
      FileSet fileSet1 = new FileSet(fileSet0);
      fileSet1.setDefaultexcludes(false);
      ZipFileSet zipFileSet0 = new ZipFileSet(fileSet1);
      zipFileSet0.getSrc();
      fileSet1.setCaseSensitive(true);
      // Undeclared exception!
      try { 
        zipFileSet0.setIncludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.getSrc();
      zipFileSet0.setSrc((File) null);
      zipFileSet0.setChecked(true);
      zipFileSet0.setFullpath("");
      zipFileSet0.hasSelectors();
      // Undeclared exception!
      try { 
        zipFileSet0.getRef((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.ZipFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      ZipFileSet zipFileSet2 = new ZipFileSet(zipFileSet1);
      ExtendSelector extendSelector0 = mock(ExtendSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet2.addCustom(extendSelector0);
      Class<Integer> class0 = Integer.class;
      OrSelector orSelector0 = mock(OrSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet2.addOr(orSelector0);
      // Undeclared exception!
      try { 
        zipFileSet0.getCheckedRef(class0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      ZipFileSet zipFileSet2 = new ZipFileSet(zipFileSet1);
      zipFileSet2.getDataTypeName();
      zipFileSet2.selectorElements();
      zipFileSet2.createInclude();
      zipFileSet2.createInclude();
      zipFileSet2.getSrc();
      // Undeclared exception!
      try { 
        zipFileSet1.setFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      AndSelector andSelector0 = mock(AndSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet1.addAnd(andSelector0);
      zipFileSet1.setProject(project0);
      // Undeclared exception!
      try { 
        zipFileSet1.setFileMode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      SizeSelector sizeSelector0 = mock(SizeSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addSize(sizeSelector0);
      DirSet dirSet0 = new DirSet();
      DirSet dirSet1 = new DirSet(dirSet0);
      NoneSelector noneSelector0 = mock(NoneSelector.class, new ViolatedAssumptionAnswer());
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dirSet1.getDirectoryScanner(project0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for DirSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSet fileSet0 = new FileSet();
      fileSet0.clone();
      fileSet0.clone();
      PresentSelector presentSelector0 = mock(PresentSelector.class, new ViolatedAssumptionAnswer());
      fileSet0.addPresent(presentSelector0);
      SizeSelector sizeSelector0 = mock(SizeSelector.class, new ViolatedAssumptionAnswer());
      fileSet0.addSize(sizeSelector0);
      fileSet0.setExcludes((String) null);
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      fileSet0.appendSelector(fileSelector0);
      ZipFileSet zipFileSet0 = new ZipFileSet(fileSet0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      zipFileSet0.getPrefix();
      zipFileSet0.getDir(project0);
      zipFileSet0.setDir((File) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        fileSet0.getCheckedRef(class0, "@k[/Q'jc8V))");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.getRefid();
      zipFileSet0.setRefid((Reference) null);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      zipFileSet0.getDir(project0);
      zipFileSet0.hasPatterns();
      MajoritySelector majoritySelector0 = mock(MajoritySelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addMajority(majoritySelector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DirSet dirSet0 = new DirSet();
      dirSet0.noChildrenAllowed();
      DirSet dirSet1 = new DirSet(dirSet0);
      dirSet1.createPatternSet();
      dirSet1.setExcludes("U");
      dirSet0.setDescription("+pY7='l`uh");
      dirSet0.getRefid();
      dirSet1.ref = null;
      dirSet0.addSelector((SelectSelector) null);
      FilenameSelector filenameSelector0 = mock(FilenameSelector.class, new ViolatedAssumptionAnswer());
      NotSelector notSelector0 = mock(NotSelector.class, new ViolatedAssumptionAnswer());
      dirSet0.setDefaultexcludes(true);
      dirSet1.addNot(notSelector0);
      dirSet1.addFilename(filenameSelector0);
      dirSet1.setIncludes((String) null);
      DepthSelector depthSelector0 = mock(DepthSelector.class, new ViolatedAssumptionAnswer());
      dirSet0.addDepth(depthSelector0);
      dirSet0.createPatternSet();
      dirSet1.createExclude();
      NoneSelector noneSelector0 = mock(NoneSelector.class, new ViolatedAssumptionAnswer());
      dirSet0.addNone(noneSelector0);
      DateSelector dateSelector0 = mock(DateSelector.class, new ViolatedAssumptionAnswer());
      dirSet0.addDate(dateSelector0);
      dirSet1.selectorCount();
      try { 
        dirSet0.setRefid((Reference) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must not specify more than one attribute when using refid
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      ZipFileSet zipFileSet2 = new ZipFileSet(zipFileSet1);
      FileSet fileSet0 = new FileSet(zipFileSet2);
      ContainsSelector containsSelector0 = mock(ContainsSelector.class, new ViolatedAssumptionAnswer());
      fileSet0.addContains(containsSelector0);
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileSet0.getRef(project0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DirSet dirSet0 = new DirSet();
      DirSet dirSet1 = new DirSet(dirSet0);
      DepthSelector depthSelector0 = mock(DepthSelector.class, new ViolatedAssumptionAnswer());
      dirSet0.addDepth(depthSelector0);
      dirSet0.setExcludes((String) null);
      dirSet0.createExclude();
      dirSet1.selectorElements();
      DepthSelector depthSelector1 = mock(DepthSelector.class, new ViolatedAssumptionAnswer());
      dirSet1.addDepth(depthSelector1);
      assertFalse(dirSet0.equals((Object)dirSet1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      ZipFileSet zipFileSet1 = new ZipFileSet(zipFileSet0);
      SizeSelector sizeSelector0 = mock(SizeSelector.class, new ViolatedAssumptionAnswer());
      zipFileSet0.addSize(sizeSelector0);
      ZipFileSet zipFileSet2 = new ZipFileSet(zipFileSet1);
      zipFileSet0.isChecked();
      zipFileSet2.hasPatterns();
      FileSet fileSet0 = new FileSet(zipFileSet2);
      DepthSelector depthSelector0 = mock(DepthSelector.class, new ViolatedAssumptionAnswer());
      fileSet0.addDepth(depthSelector0);
      // Undeclared exception!
      try { 
        zipFileSet1.setDirMode("XQexXW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XQexXW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSet fileSet0 = new FileSet();
      ZipFileSet zipFileSet0 = new ZipFileSet(fileSet0);
      String string0 = null;
      zipFileSet0.description = null;
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        zipFileSet0.getRef(project0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.ZipFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DirSet dirSet0 = new DirSet();
      DirSet dirSet1 = new DirSet(dirSet0);
      OrSelector orSelector0 = mock(OrSelector.class, new ViolatedAssumptionAnswer());
      dirSet1.addOr(orSelector0);
      ContainsRegexpSelector containsRegexpSelector0 = mock(ContainsRegexpSelector.class, new ViolatedAssumptionAnswer());
      dirSet0.addContainsRegexp(containsRegexpSelector0);
      SelectSelector selectSelector0 = mock(SelectSelector.class, new ViolatedAssumptionAnswer());
      dirSet0.addSelector(selectSelector0);
      // Undeclared exception!
      try { 
        dirSet0.setFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
  }
}
