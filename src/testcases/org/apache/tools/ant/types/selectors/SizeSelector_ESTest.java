/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:53:08 GMT 2020
 */

package org.apache.tools.ant.types.selectors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Parameter;
import org.apache.tools.ant.types.selectors.SizeSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeSelector_ESTest extends SizeSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      SizeSelector.SizeComparisons sizeSelector_SizeComparisons0 = new SizeSelector.SizeComparisons();
      sizeSelector0.setWhen(sizeSelector_SizeComparisons0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      SizeSelector.ByteUnits sizeSelector_ByteUnits0 = new SizeSelector.ByteUnits();
      sizeSelector0.setUnits(sizeSelector_ByteUnits0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      Parameter[] parameterArray0 = new Parameter[6];
      Parameter parameter0 = new Parameter();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[0];
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameter0;
      sizeSelector0.setParameters(parameterArray0);
      assertEquals(6, parameterArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      sizeSelector0.setValue(1008L);
      Project project0 = new Project();
      File file0 = project0.resolveFile("'OPs:;~eB}G}");
      MockFile mockFile0 = new MockFile(file0, "");
      boolean boolean0 = sizeSelector0.isSelected(mockFile0, "1", mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SizeSelector.SizeComparisons sizeSelector_SizeComparisons0 = new SizeSelector.SizeComparisons();
      String[] stringArray0 = sizeSelector_SizeComparisons0.getValues();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SizeSelector.ByteUnits sizeSelector_ByteUnits0 = new SizeSelector.ByteUnits();
      String[] stringArray0 = sizeSelector_ByteUnits0.getValues();
      assertEquals(36, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      sizeSelector0.verifySettings();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      String string0 = sizeSelector0.toString();
      assertEquals("{sizeselector value: -1compare: equal}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      // Undeclared exception!
      try { 
        sizeSelector0.setWhen((SizeSelector.SizeComparisons) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.SizeSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      // Undeclared exception!
      try { 
        sizeSelector0.setUnits((SizeSelector.ByteUnits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.SizeSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      Parameter[] parameterArray0 = new Parameter[9];
      // Undeclared exception!
      try { 
        sizeSelector0.setParameters(parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.SizeSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      MockFile mockFile0 = new MockFile((File) null, "org.apache.oro.io.GlobFilenameFilter");
      // Undeclared exception!
      try { 
        sizeSelector0.isSelected((File) null, "c4.;B", mockFile0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // The value attribute is required, and must be positive
         //
         verifyException("org.apache.tools.ant.types.selectors.BaseSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SizeSelector sizeSelector0 = new SizeSelector();
      sizeSelector0.setValue(2510L);
      MockFile mockFile0 = new MockFile((File) null, "");
      // Undeclared exception!
      try { 
        sizeSelector0.isSelected(mockFile0, "", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.SizeSelector", e);
      }
  }
}
