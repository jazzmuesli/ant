/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:55:26 GMT 2020
 */

package org.apache.tools.ant.types.selectors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.Parameter;
import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
import org.apache.tools.ant.types.selectors.ContainsSelector;
import org.apache.tools.ant.types.selectors.DepthSelector;
import org.apache.tools.ant.types.selectors.FilenameSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseExtendSelector_ESTest extends BaseExtendSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ContainsRegexpSelector containsRegexpSelector0 = new ContainsRegexpSelector();
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = new Parameter();
      parameterArray0[0] = parameter0;
      containsRegexpSelector0.setParameters(parameterArray0);
      assertEquals(1, parameterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FilenameSelector filenameSelector0 = new FilenameSelector();
      filenameSelector0.setName("");
      MockFile mockFile0 = new MockFile("fcywt9Cs", "!m@Z");
      boolean boolean0 = filenameSelector0.isSelected(mockFile0, "", mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ContainsRegexpSelector containsRegexpSelector0 = new ContainsRegexpSelector();
      Parameter[] parameterArray0 = containsRegexpSelector0.getParameters();
      assertNull(parameterArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DepthSelector depthSelector0 = new DepthSelector();
      Parameter[] parameterArray0 = new Parameter[9];
      // Undeclared exception!
      try { 
        depthSelector0.setParameters(parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.DepthSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ContainsSelector containsSelector0 = new ContainsSelector();
      File file0 = MockFile.createTempFile("=S9W2t+enF5# KM", "=S9W2t+enF5# KM", (File) null);
      try { 
        containsSelector0.isSelected(file0, "I#Bwp{+,e7`", file0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // The text attribute is required
         //
         verifyException("org.apache.tools.ant.types.selectors.BaseSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DepthSelector depthSelector0 = new DepthSelector();
      depthSelector0.max = 1535;
      // Undeclared exception!
      try { 
        depthSelector0.isSelected((File) null, "Ph[boxf@SGpfjl", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.DepthSelector", e);
      }
  }
}
