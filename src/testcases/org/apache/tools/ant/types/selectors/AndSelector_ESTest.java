/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:31:05 GMT 2020
 */

package org.apache.tools.ant.types.selectors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.apache.tools.ant.types.selectors.DepthSelector;
import org.apache.tools.ant.types.selectors.ExtendSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AndSelector_ESTest extends AndSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AndSelector andSelector0 = new AndSelector();
      String string0 = andSelector0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AndSelector andSelector0 = new AndSelector();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = andSelector0.isSelected(file0, "p", file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AndSelector andSelector0 = new AndSelector();
      andSelector0.addDepth((DepthSelector) null);
      // Undeclared exception!
      try { 
        andSelector0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.BaseSelectorContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AndSelector andSelector0 = new AndSelector();
      andSelector0.setError("");
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        andSelector0.isSelected(file0, (String) null, file0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // 
         //
         verifyException("org.apache.tools.ant.types.selectors.BaseSelectorContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AndSelector andSelector0 = new AndSelector();
      andSelector0.appendSelector(andSelector0);
      // Undeclared exception!
      try { 
        andSelector0.isSelected((File) null, "{andselect: }", (File) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AndSelector andSelector0 = new AndSelector();
      andSelector0.addCustom((ExtendSelector) null);
      // Undeclared exception!
      try { 
        andSelector0.isSelected((File) null, "", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.AndSelector", e);
      }
  }
}
