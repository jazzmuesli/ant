/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:28:32 GMT 2020
 */

package org.apache.tools.ant.types.selectors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.selectors.AndSelector;
import org.apache.tools.ant.types.selectors.ContainsSelector;
import org.apache.tools.ant.types.selectors.ExtendSelector;
import org.apache.tools.ant.types.selectors.NoneSelector;
import org.apache.tools.ant.types.selectors.NotSelector;
import org.apache.tools.ant.types.selectors.PresentSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NoneSelector_ESTest extends NoneSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NoneSelector noneSelector0 = new NoneSelector();
      String string0 = noneSelector0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NoneSelector noneSelector0 = new NoneSelector();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = noneSelector0.isSelected(file0, "", file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NotSelector notSelector0 = new NotSelector();
      notSelector0.addNot(notSelector0);
      // Undeclared exception!
      try { 
        notSelector0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NotSelector notSelector0 = new NotSelector();
      notSelector0.addContains((ContainsSelector) null);
      // Undeclared exception!
      try { 
        notSelector0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.BaseSelectorContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NoneSelector noneSelector0 = new NoneSelector();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      NotSelector notSelector0 = new NotSelector();
      noneSelector0.addNot(notSelector0);
      // Undeclared exception!
      try { 
        noneSelector0.isSelected(file0, "L^", file0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // One and only one selector is allowed within the <not> tag
         //
         verifyException("org.apache.tools.ant.types.selectors.BaseSelectorContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NoneSelector noneSelector0 = new NoneSelector();
      noneSelector0.addPresent((PresentSelector) null);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        noneSelector0.isSelected(file0, "cQzOqS#|+J6fY7", file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.selectors.NoneSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NotSelector notSelector0 = new NotSelector();
      AndSelector andSelector0 = new AndSelector();
      ExtendSelector extendSelector0 = new ExtendSelector();
      extendSelector0.setClassname("org.apache.oro.io.GlobFilenameFilter");
      andSelector0.addCustom(extendSelector0);
      notSelector0.addAnd(andSelector0);
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        notSelector0.isSelected((File) null, "", mockFile0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.oro.io.GlobFilenameFilter cannot be cast to org.apache.tools.ant.types.selectors.FileSelector
         //
         verifyException("org.apache.tools.ant.types.selectors.ExtendSelector", e);
      }
  }
}
