/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:50:03 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Hashtable;
import java.util.Vector;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.FilterSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilterSet_ESTest extends FilterSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      filterSet0.setEndToken("@");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      filterSet0.setBeginToken("C");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      String string0 = filterSet0.replaceTokens("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      Hashtable hashtable0 = filterSet0.getFilterHash();
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      filterSet0.addConfiguredFilterSet(filterSet0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      FilterSet filterSet1 = new FilterSet(filterSet0);
      assertFalse(filterSet1.equals((Object)filterSet0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      FilterSet.FiltersFile filterSet_FiltersFile0 = filterSet0.new FiltersFile();
      // Undeclared exception!
      try { 
        filterSet_FiltersFile0.setFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterSet.Filter filterSet_Filter0 = new FilterSet.Filter();
      filterSet_Filter0.setValue("");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilterSet.Filter filterSet_Filter0 = new FilterSet.Filter();
      filterSet_Filter0.setToken("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterSet.Filter filterSet_Filter0 = new FilterSet.Filter();
      String string0 = filterSet_Filter0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FilterSet.Filter filterSet_Filter0 = new FilterSet.Filter();
      String string0 = filterSet_Filter0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FilterSet.Filter filterSet_Filter0 = new FilterSet.Filter("M%V5bcmhZ5M,a", "");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      boolean boolean0 = filterSet0.hasFilters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      Vector vector0 = filterSet0.getFilters();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      String string0 = filterSet0.getEndToken();
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      String string0 = filterSet0.getBeginToken();
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      FilterSet.FiltersFile filterSet_FiltersFile0 = filterSet0.createFiltersfile();
      assertNotNull(filterSet_FiltersFile0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      Object object0 = filterSet0.clone();
      assertNotSame(filterSet0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FilterSet.Filter filterSet_Filter0 = new FilterSet.Filter();
      FilterSet filterSet0 = new FilterSet();
      filterSet0.addFilter(filterSet_Filter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).isFile();
      doReturn((String) null).when(file0).toString();
      try { 
        filterSet0.setFiltersfile(file0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Must specify a file not a directory in the filtersfile attribute:null
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      // Undeclared exception!
      try { 
        filterSet0.setFiltersfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      // Undeclared exception!
      try { 
        filterSet0.setEndToken("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // endToken must not be empty
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      // Undeclared exception!
      try { 
        filterSet0.setBeginToken("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // beginToken must not be empty
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      // Undeclared exception!
      try { 
        filterSet0.replaceTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).isFile();
      doReturn((String) null).when(file0).toString();
      try { 
        filterSet0.readFiltersFromFile(file0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Must specify a file not a directory in the filtersfile attribute:null
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      // Undeclared exception!
      try { 
        filterSet0.readFiltersFromFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      // Undeclared exception!
      try { 
        filterSet0.getRef();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      filterSet0.addFilter((String) null, (String) null);
      // Undeclared exception!
      try { 
        filterSet0.getFilterHash();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FilterSet filterSet0 = new FilterSet();
      // Undeclared exception!
      try { 
        filterSet0.addConfiguredFilterSet((FilterSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FilterSet filterSet0 = null;
      try {
        filterSet0 = new FilterSet((FilterSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.FilterSet", e);
      }
  }
}
