/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:55:26 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.AntFilterReader;
import org.apache.tools.ant.types.DirSet;
import org.apache.tools.ant.types.FileList;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Mapper;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Reference;
import org.apache.tools.ant.types.XMLCatalog;
import org.apache.tools.ant.types.selectors.DependSelector;
import org.apache.tools.ant.types.selectors.ExtendSelector;
import org.apache.tools.ant.types.selectors.PresentSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Path_ESTest extends Path_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(417);
      stringBuffer0.append((double) 417);
      boolean boolean0 = Path.translateFileSep(stringBuffer0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createCatalogPath();
      String string0 = path0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      Path path0 = antFilterReader0.createClasspath();
      int int0 = path0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtendSelector extendSelector0 = new ExtendSelector();
      Path path0 = extendSelector0.createClasspath();
      path0.setRefid((Reference) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createClasspath();
      MockFile mockFile0 = new MockFile("-R|yHY 'EaUHk");
      path0.setLocation(mockFile0);
      assertFalse(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Mapper mapper0 = new Mapper((Project) null);
      Path path0 = mapper0.createClasspath();
      String[] stringArray0 = path0.list();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Path path0 = new Path((Project) null);
      path0.addExtdirs(path0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Path path0 = new Path((Project) null);
      path0.addExisting(path0, true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Path path0 = new Path((Project) null);
      path0.addExisting(path0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Path path0 = new Path((Project) null, "");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      Path path0 = antFilterReader0.createClasspath();
      Path.PathElement path_PathElement0 = path0.createPathElement();
      MockFile mockFile0 = new MockFile("", "");
      path_PathElement0.setLocation(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createCatalogPath();
      Path.PathElement path_PathElement0 = path0.new PathElement();
      String[] stringArray0 = path_PathElement0.getParts();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = Path.translatePath((Project) null, "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = Path.translateFile("6lT^!;Svr2=");
      assertEquals("6lT^!;Svr2=", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Path path0 = Path.systemClasspath;
      path0.systemClasspath.setPath("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Path path0 = new Path((Project) null);
      Path path1 = path0.createPath();
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Path path0 = new Path((Project) null);
      path0.append(path0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createCatalogPath();
      path0.addJavaRuntime();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Path path0 = Path.systemClasspath;
      FileSet fileSet0 = new FileSet();
      path0.systemClasspath.addFileset(fileSet0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      Path path0 = antFilterReader0.createClasspath();
      FileList fileList0 = new FileList();
      path0.systemClasspath.addFilelist(fileList0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        Path.translateFileSep(stringBuffer0, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Path.translateFileSep((StringBuffer) null, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Path path0 = Path.systemClasspath;
      // Undeclared exception!
      try { 
        path0.toString();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Path path0 = Path.systemClasspath;
      // Undeclared exception!
      try { 
        path0.size();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Path path0 = Path.systemClasspath;
      Reference reference0 = new Reference("bo\"V1HteO");
      try { 
        path0.setRefid(reference0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must not specify more than one attribute when using refid
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Path.systemClasspath.setLocation((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Path$PathElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Path path0 = Path.systemClasspath;
      // Undeclared exception!
      try { 
        path0.list();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DependSelector dependSelector0 = new DependSelector();
      Mapper mapper0 = dependSelector0.createMapper();
      Path path0 = mapper0.createClasspath();
      // Undeclared exception!
      try { 
        path0.systemClasspath.concatSystemClasspath("']G8K^Oy?If}(CIn(");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DependSelector dependSelector0 = new DependSelector();
      Mapper mapper0 = dependSelector0.createMapper();
      Path path0 = mapper0.createClasspath();
      // Undeclared exception!
      try { 
        path0.concatSystemClasspath();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Path path0 = new Path((Project) null);
      // Undeclared exception!
      try { 
        path0.systemClasspath.clone();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Path path0 = Path.systemClasspath;
      // Undeclared exception!
      try { 
        path0.addExtdirs(path0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createClasspath();
      Path.PathElement path_PathElement0 = path0.createPathElement();
      path_PathElement0.setPath("-R|yHY 'EaUHk");
      // Undeclared exception!
      try { 
        path0.addExtdirs(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PresentSelector presentSelector0 = new PresentSelector();
      Mapper mapper0 = presentSelector0.createMapper();
      Path path0 = mapper0.createClasspath();
      Path path1 = Path.systemClasspath;
      // Undeclared exception!
      try { 
        path0.addExisting(path1, false);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must either set location or path on <pathelement>
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AntFilterReader antFilterReader0 = new AntFilterReader();
      Path path0 = antFilterReader0.createClasspath();
      // Undeclared exception!
      try { 
        path0.systemClasspath.addExisting((Path) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createCatalogPath();
      DirSet dirSet0 = new DirSet();
      path0.addDirset(dirSet0);
      // Undeclared exception!
      try { 
        path0.addExisting(path0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for DirSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Project project0 = new Project();
      Path path0 = new Path(project0);
      // Undeclared exception!
      try { 
        path0.addExisting((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((File) null).when(project0).resolveFile(anyString());
      Path path0 = null;
      try {
        path0 = new Path(project0, "i{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Path", e);
      }
  }
}
