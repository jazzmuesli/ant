/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:13:54 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.filters.ClassConstants;
import org.apache.tools.ant.filters.EscapeUnicode;
import org.apache.tools.ant.filters.ExpandProperties;
import org.apache.tools.ant.filters.HeadFilter;
import org.apache.tools.ant.filters.LineContains;
import org.apache.tools.ant.filters.LineContainsRegExp;
import org.apache.tools.ant.filters.PrefixLines;
import org.apache.tools.ant.filters.ReplaceTokens;
import org.apache.tools.ant.filters.StripJavaComments;
import org.apache.tools.ant.filters.StripLineBreaks;
import org.apache.tools.ant.filters.StripLineComments;
import org.apache.tools.ant.filters.TabsToSpaces;
import org.apache.tools.ant.filters.TailFilter;
import org.apache.tools.ant.filters.TokenFilter;
import org.apache.tools.ant.types.AntFilterReader;
import org.apache.tools.ant.types.FilterChain;
import org.apache.tools.ant.types.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilterChain_ESTest extends FilterChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      Vector vector0 = filterChain0.getFilterReaders();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      TokenFilter.Trim tokenFilter_Trim0 = new TokenFilter.Trim();
      filterChain0.addTrim(tokenFilter_Trim0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      TokenFilter tokenFilter0 = new TokenFilter(replaceTokens0);
      filterChain0.addTokenFilter(tokenFilter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      StripJavaComments stripJavaComments0 = new StripJavaComments();
      TabsToSpaces tabsToSpaces0 = new TabsToSpaces(stripJavaComments0);
      LineContainsRegExp lineContainsRegExp0 = new LineContainsRegExp(tabsToSpaces0);
      TokenFilter tokenFilter0 = new TokenFilter(lineContainsRegExp0);
      ReplaceTokens replaceTokens0 = new ReplaceTokens(tokenFilter0);
      TailFilter tailFilter0 = new TailFilter(replaceTokens0);
      filterChain0.addTailFilter(tailFilter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      StripJavaComments stripJavaComments0 = new StripJavaComments();
      TabsToSpaces tabsToSpaces0 = new TabsToSpaces(stripJavaComments0);
      filterChain0.addTabsToSpaces(tabsToSpaces0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      StripLineComments stripLineComments0 = new StripLineComments();
      filterChain0.addStripLineComments(stripLineComments0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      LineContains lineContains0 = new LineContains();
      StripLineBreaks stripLineBreaks0 = new StripLineBreaks(lineContains0);
      filterChain0.addStripLineBreaks(stripLineBreaks0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      StripJavaComments stripJavaComments0 = new StripJavaComments(replaceTokens0);
      filterChain0.addStripJavaComments(stripJavaComments0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      filterChain0.addReplaceTokens(replaceTokens0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      TokenFilter.ReplaceString tokenFilter_ReplaceString0 = new TokenFilter.ReplaceString();
      filterChain0.addReplaceString(tokenFilter_ReplaceString0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      TokenFilter.ReplaceRegex tokenFilter_ReplaceRegex0 = new TokenFilter.ReplaceRegex();
      filterChain0.addReplaceRegex(tokenFilter_ReplaceRegex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      PrefixLines prefixLines0 = new PrefixLines();
      filterChain0.addPrefixLines(prefixLines0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      LineContainsRegExp lineContainsRegExp0 = new LineContainsRegExp();
      filterChain0.addLineContainsRegExp(lineContainsRegExp0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      filterChain0.addLineContains((LineContains) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      TokenFilter.IgnoreBlank tokenFilter_IgnoreBlank0 = new TokenFilter.IgnoreBlank();
      filterChain0.addIgnoreBlank(tokenFilter_IgnoreBlank0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      AntFilterReader antFilterReader0 = new AntFilterReader();
      filterChain0.addFilterReader(antFilterReader0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      ExpandProperties expandProperties0 = new ExpandProperties();
      filterChain0.addExpandProperties(expandProperties0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      ReplaceTokens replaceTokens0 = new ReplaceTokens();
      TokenFilter tokenFilter0 = new TokenFilter(replaceTokens0);
      EscapeUnicode escapeUnicode0 = new EscapeUnicode(tokenFilter0);
      filterChain0.addEscapeUnicode(escapeUnicode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      TokenFilter.DeleteCharacters tokenFilter_DeleteCharacters0 = new TokenFilter.DeleteCharacters();
      filterChain0.addDeleteCharacters(tokenFilter_DeleteCharacters0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      TokenFilter.ContainsRegex tokenFilter_ContainsRegex0 = new TokenFilter.ContainsRegex();
      filterChain0.addContainsRegex(tokenFilter_ContainsRegex0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      ClassConstants classConstants0 = new ClassConstants();
      filterChain0.addClassConstants(classConstants0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      HeadFilter headFilter0 = new HeadFilter();
      filterChain0.addHeadFilter(headFilter0);
      try { 
        filterChain0.setRefid((Reference) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must not specify more than one attribute when using refid
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      // Undeclared exception!
      try { 
        filterChain0.setRefid((Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.FilterChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      // Undeclared exception!
      try { 
        filterChain0.setDynamicAttribute("yl54u|[a'l06#", "");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Unknown attribute yl54u|[a'l06#
         //
         verifyException("org.apache.tools.ant.types.FilterChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FilterChain filterChain0 = new FilterChain();
      // Undeclared exception!
      try { 
        filterChain0.createDynamicElement("un#T0DQ,");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Unable to get the project
         //
         verifyException("org.apache.tools.ant.types.FilterChain", e);
      }
  }
}
