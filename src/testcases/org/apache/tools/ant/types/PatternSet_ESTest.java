/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:58:01 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.PatternSet;
import org.apache.tools.ant.types.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PatternSet_ESTest extends PatternSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      String string0 = patternSet0.toString();
      assertEquals("patternSet{ includes: [] excludes: [] }", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      patternSet0.setRefid((Reference) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      patternSet0.setIncludesfile(file0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      patternSet0.setExcludesfile(file0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      String[] stringArray0 = patternSet0.getIncludePatterns((Project) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      String[] stringArray0 = patternSet0.getExcludePatterns((Project) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      patternSet0.append(patternSet0, (Project) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      patternSet0.addConfiguredPatternset(patternSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.createExclude();
      // Undeclared exception!
      try { 
        patternSet_NameEntry0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.createExclude();
      patternSet_NameEntry0.setIf("rBK*upVhee");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.createInclude();
      String string0 = patternSet_NameEntry0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.createIncludesFile();
      String string0 = patternSet_NameEntry0.evalName((Project) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.new NameEntry();
      patternSet_NameEntry0.setName("K~yB)");
      String string0 = patternSet_NameEntry0.toString();
      assertEquals("K~yB)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      patternSet0.setIncludes("rBK*upVhee");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      patternSet0.setExcludes("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      boolean boolean0 = patternSet0.hasPatterns((Project) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.createExcludesFile();
      assertNotNull(patternSet_NameEntry0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      patternSet0.createInclude();
      // Undeclared exception!
      try { 
        patternSet0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      patternSet0.createExclude();
      try { 
        patternSet0.setRefid((Reference) null);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // You must not specify more than one attribute when using refid
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      // Undeclared exception!
      try { 
        patternSet0.setIncludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      // Undeclared exception!
      try { 
        patternSet0.setExcludesfile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.createInclude();
      patternSet_NameEntry0.setUnless("");
      // Undeclared exception!
      try { 
        patternSet0.getIncludePatterns((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet$NameEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      PatternSet.NameEntry patternSet_NameEntry0 = patternSet0.createIncludesFile();
      patternSet_NameEntry0.setName(")XU[JoIaCA<_%&*h^'");
      // Undeclared exception!
      try { 
        patternSet0.getExcludePatterns((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      // Undeclared exception!
      try { 
        patternSet0.append((PatternSet) null, (Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PatternSet patternSet0 = new PatternSet();
      // Undeclared exception!
      try { 
        patternSet0.addConfiguredPatternset((PatternSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.PatternSet", e);
      }
  }
}
