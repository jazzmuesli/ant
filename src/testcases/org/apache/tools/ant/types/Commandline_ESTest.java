/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:52:22 GMT 2020
 */

package org.apache.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commandline_ESTest extends Commandline_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      Commandline.Argument commandline_Argument0 = commandline0.createArgument(false);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      commandline_Argument0.setFile(file0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Commandline commandline0 = new Commandline("D");
      String[] stringArray0 = commandline0.getCommandline();
      String string0 = Commandline.toString(stringArray0);
      assertEquals("D", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      String string0 = commandline0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Commandline.quoteArgument("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Commandline commandline0 = new Commandline("D");
      String string0 = Commandline.describeCommand(commandline0);
      assertEquals("Executing 'D' with ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = Commandline.translateCommandline("e1sg)Q|(rt%#!g/Q:");
      String string0 = Commandline.describeArguments(stringArray0, 362);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      String string0 = Commandline.describeArguments(commandline0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      String[] stringArray0 = new String[9];
      commandline0.addArguments(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Commandline commandline0 = new Commandline("");
      Commandline.Marker commandline_Marker0 = commandline0.createMarker();
      int int0 = commandline_Marker0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      Commandline.Marker commandline_Marker0 = commandline0.new Marker((-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      Commandline.Argument commandline_Argument0 = commandline0.createArgument();
      commandline_Argument0.setValue("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      Commandline.Argument commandline_Argument0 = commandline0.createArgument();
      commandline_Argument0.setPathref((Reference) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      Commandline.Argument commandline_Argument0 = commandline0.createArgument(true);
      commandline_Argument0.setLine("");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Commandline.Argument commandline_Argument0 = new Commandline.Argument();
      String[] stringArray0 = commandline_Argument0.getParts();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      int int0 = commandline0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Commandline commandline0 = new Commandline((String) null);
      commandline0.setExecutable((String) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Commandline commandline0 = new Commandline((String) null);
      String string0 = commandline0.getExecutable();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      String[] stringArray0 = commandline0.getArguments();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      String[] stringArray0 = commandline0.getCommandline();
      String string0 = Commandline.describeCommand(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Commandline commandline0 = new Commandline("");
      String string0 = commandline0.describeCommand();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = Commandline.describeArguments(stringArray0);
      assertEquals("arguments:\n'null'\n'null'\n'null'\n'null'\n'null'\n'null'\n'null'\n'null'\n\nThe ' characters around the executable and arguments are\nnot part of the command.\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Commandline commandline0 = new Commandline("D");
      String string0 = commandline0.describeArguments();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Commandline commandline0 = new Commandline((String) null);
      Object object0 = commandline0.clone();
      assertNotSame(object0, commandline0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      commandline0.clearArgs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      commandline0.clear();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Commandline.translateCommandline("@'(O?|k;v");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // unbalanced quotes in @'(O?|k;v
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SU^{VM";
      stringArray0[1] = "5DA]a:`%On)9\"0;.'u";
      // Undeclared exception!
      try { 
        Commandline.toString(stringArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Can't handle single and double quotes in same argument
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        Commandline.toString(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      Commandline.Argument commandline_Argument0 = commandline0.createArgument(true);
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(path0).toString();
      commandline_Argument0.setPath(path0);
      // Undeclared exception!
      try { 
        commandline0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Commandline.quoteArgument("'{@\"SQSxlDaurKR");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Can't handle single and double quotes in same argument
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Commandline.quoteArgument((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Commandline.describeCommand((Commandline) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        Commandline.describeArguments(stringArray0, (-662));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -662
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Commandline.describeArguments((Commandline) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Commandline commandline0 = new Commandline();
      // Undeclared exception!
      try { 
        commandline0.addArguments((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Commandline commandline0 = null;
      try {
        commandline0 = new Commandline("&nPkWHtnC\"nV#<@N-");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // unbalanced quotes in &nPkWHtnC\"nV#<@N-
         //
         verifyException("org.apache.tools.ant.types.Commandline", e);
      }
  }
}
