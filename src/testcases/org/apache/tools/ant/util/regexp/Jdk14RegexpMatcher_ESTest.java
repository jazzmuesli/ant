/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:36:26 GMT 2020
 */

package org.apache.tools.ant.util.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import java.util.regex.Pattern;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Jdk14RegexpMatcher_ESTest extends Jdk14RegexpMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      jdk14RegexpMatcher0.setPattern("");
      boolean boolean0 = jdk14RegexpMatcher0.matches("hxL7v{c33&%_9G[:P-4", 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      jdk14RegexpMatcher0.setPattern("");
      boolean boolean0 = jdk14RegexpMatcher0.matches("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      jdk14RegexpMatcher0.setPattern("");
      Vector vector0 = jdk14RegexpMatcher0.getGroups("", 0);
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      jdk14RegexpMatcher0.setPattern("");
      Vector vector0 = jdk14RegexpMatcher0.getGroups("");
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      jdk14RegexpMatcher0.setPattern("");
      Pattern pattern0 = jdk14RegexpMatcher0.getCompiledPattern(0);
      assertEquals("", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      String string0 = jdk14RegexpMatcher0.getPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      int int0 = jdk14RegexpMatcher0.getCompilerOptions((-1));
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      try { 
        jdk14RegexpMatcher0.matches("KQB-4m6", 375);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      try { 
        jdk14RegexpMatcher0.matches("");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      jdk14RegexpMatcher0.setPattern("+{so\"H#t#");
      try { 
        jdk14RegexpMatcher0.getGroups("+{so\"H#t#", 2742);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.util.regex.PatternSyntaxException: Dangling meta character '+' near index 0
         // +{so\"H#t#
         // ^
         //
         verifyException("org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      // Undeclared exception!
      try { 
        jdk14RegexpMatcher0.getGroups("z_gA", 704);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      jdk14RegexpMatcher0.setPattern("p(t=NoF{ cv");
      try { 
        jdk14RegexpMatcher0.getGroups("$g}4h/IrG&;9X");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // java.util.regex.PatternSyntaxException: Illegal repetition near index 7
         // p(t=NoF{ cv
         //        ^
         //
         verifyException("org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      // Undeclared exception!
      try { 
        jdk14RegexpMatcher0.getGroups("Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Jdk14RegexpMatcher jdk14RegexpMatcher0 = new Jdk14RegexpMatcher();
      // Undeclared exception!
      try { 
        jdk14RegexpMatcher0.getCompiledPattern((-643));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
