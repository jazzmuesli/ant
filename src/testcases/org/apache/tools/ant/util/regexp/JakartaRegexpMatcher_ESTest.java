/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:31:38 GMT 2020
 */

package org.apache.tools.ant.util.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.apache.regexp.RE;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.util.regexp.JakartaRegexpMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JakartaRegexpMatcher_ESTest extends JakartaRegexpMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("");
      boolean boolean0 = jakartaRegexpMatcher0.matches("j$TW||Woy7,FVy", (-2913));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("");
      boolean boolean0 = jakartaRegexpMatcher0.matches("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("");
      Vector vector0 = jakartaRegexpMatcher0.getGroups("", 0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("");
      Vector vector0 = jakartaRegexpMatcher0.getGroups("");
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("");
      RE rE0 = jakartaRegexpMatcher0.getCompiledPattern(619);
      assertNotNull(rE0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      String string0 = jakartaRegexpMatcher0.getPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      int int0 = jakartaRegexpMatcher0.getCompilerOptions(5700);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("{T#2>BF-Ahv!(h5w");
      try { 
        jakartaRegexpMatcher0.matches("", 0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // org.apache.regexp.RESyntaxException: Syntax error: Missing operand to closure
         //
         verifyException("org.apache.tools.ant.util.regexp.JakartaRegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      // Undeclared exception!
      try { 
        jakartaRegexpMatcher0.matches("u", 5700);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.regexp.RECompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("ui.DI('/");
      try { 
        jakartaRegexpMatcher0.matches("/IpPv-");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // org.apache.regexp.RESyntaxException: Syntax error: Missing close paren
         //
         verifyException("org.apache.tools.ant.util.regexp.JakartaRegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      // Undeclared exception!
      try { 
        jakartaRegexpMatcher0.matches("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.regexp.RECompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("tm{r4@>");
      try { 
        jakartaRegexpMatcher0.getGroups("", 1751);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // org.apache.regexp.RESyntaxException: Syntax error: Expected digit
         //
         verifyException("org.apache.tools.ant.util.regexp.JakartaRegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      // Undeclared exception!
      try { 
        jakartaRegexpMatcher0.getGroups((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.regexp.RECompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      // Undeclared exception!
      try { 
        jakartaRegexpMatcher0.getGroups("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.regexp.RECompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      jakartaRegexpMatcher0.setPattern("Y7ZK]ds-e=ehF/$");
      try { 
        jakartaRegexpMatcher0.getCompiledPattern((-1745));
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // org.apache.regexp.RESyntaxException: Syntax error: Mismatched class
         //
         verifyException("org.apache.tools.ant.util.regexp.JakartaRegexpMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JakartaRegexpMatcher jakartaRegexpMatcher0 = new JakartaRegexpMatcher();
      // Undeclared exception!
      try { 
        jakartaRegexpMatcher0.getCompiledPattern((-112));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.regexp.RECompiler", e);
      }
  }
}
