/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:06:34 GMT 2020
 */

package org.apache.tools.ant.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tools.ant.AntClassLoader;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Reference;
import org.apache.tools.ant.util.ClasspathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClasspathUtils_ESTest extends ClasspathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((AntClassLoader) null).when(project0).createClassLoader(any(org.apache.tools.ant.types.Path.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(project0).when(path0).getProject();
      ClassLoader classLoader0 = ClasspathUtils.getUniqueClassLoaderForPath(path0, false);
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getProperty(anyString());
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(project0, (Project) null).when(path0).getProject();
      String string0 = " h#SV8(Z^H4Wj`#Yn";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ClasspathUtils.getClassLoaderForPath(path0, " h#SV8(Z^H4Wj`#Yn", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.ClasspathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getProperty(anyString());
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(project0, (Project) null).when(path0).getProject();
      // Undeclared exception!
      try { 
        ClasspathUtils.getClassLoaderForPath(path0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.ClasspathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClasspathUtils classpathUtils0 = new ClasspathUtils();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClasspathUtils.newInstance("", (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.ClasspathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((Project) null).when(path0).getProject();
      // Undeclared exception!
      try { 
        ClasspathUtils.getUniqueClassLoaderForPath(path0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.ClasspathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(project0).getReference(anyString());
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reference0).getRefId();
      // Undeclared exception!
      try { 
        ClasspathUtils.getClassLoaderForPath(project0, reference0, true);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // The specified classpathref null does not reference a Path.
         //
         verifyException("org.apache.tools.ant.util.ClasspathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(project0).getReference(anyString());
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reference0).getRefId();
      // Undeclared exception!
      try { 
        ClasspathUtils.getClassLoaderForPath(project0, reference0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // The specified classpathref null does not reference a Path.
         //
         verifyException("org.apache.tools.ant.util.ClasspathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Reference reference0 = mock(Reference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reference0).getRefId();
      // Undeclared exception!
      try { 
        ClasspathUtils.getClassLoaderForPath((Project) null, reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.ClasspathUtils", e);
      }
  }
}
