/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 21:57:45 GMT 2020
 */

package org.apache.tools.ant.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.Writer;
import org.apache.tools.ant.util.DOMElementWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMElementWriter_ESTest extends DOMElementWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      NamedNodeMap namedNodeMap0 = mock(NamedNodeMap.class, new ViolatedAssumptionAnswer());
      doReturn((-2105)).when(namedNodeMap0).getLength();
      NodeList nodeList0 = mock(NodeList.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(nodeList0).getLength();
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn("jU)a", (String) null).when(element1).getTagName();
      doReturn(namedNodeMap0).when(element1).getAttributes();
      doReturn(nodeList0).when(element1).getChildNodes();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dOMElementWriter0.write(element1, outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("IX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encodedata("u8wQ6-lsBSC2z");
      assertEquals("u8wQ6-lsBSC2z", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isLegalCharacter('C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dOMElementWriter0.write(element0, (Writer) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.isReference("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.isReference((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.encodedata((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }
}
