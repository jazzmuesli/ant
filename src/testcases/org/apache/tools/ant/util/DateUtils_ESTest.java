/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:48:15 GMT 2020
 */

package org.apache.tools.ant.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import org.apache.tools.ant.util.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(calendar0).get(anyInt());
      int int0 = DateUtils.getPhaseOfMoon(calendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      String string0 = DateUtils.format(date0, "{");
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = DateUtils.format((long) 0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = DateUtils.getDateForHeader();
      assertEquals("Sun, 05 Jan 2020 22:48:09 +0000", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = DateUtils.formatElapsedTime(0);
      assertEquals("0 seconds", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.getPhaseOfMoon((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.util.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DateUtils.format(date0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DateUtils.format(date0, "q|u#4CcAw|@iWFmL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'q'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.format(0L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.format(1810L, "Sun, 05 Jan 2020 22:48:05 +0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
