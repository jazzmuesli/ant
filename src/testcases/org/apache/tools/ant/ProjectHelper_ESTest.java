/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 05 22:13:22 GMT 2020
 */

package org.apache.tools.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Hashtable;
import java.util.Vector;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.ProjectHelper;
import org.apache.tools.ant.TaskAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.AttributeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProjectHelper_ESTest extends ProjectHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ProjectHelper.getContextClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "";
      ProjectHelper.getProjectHelper();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      doReturn(2075).when(attributeList0).getLength();
      doReturn("").when(attributeList0).getValue(anyInt());
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Hashtable<Object, Integer>) null).when(project1).getProperties();
      doReturn(project0).when(project1).getReference(anyString());
      // Undeclared exception!
      try { 
        ProjectHelper.configure("", attributeList0, project1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.tools.ant.Project$MockitoMock$1051508466 cannot be cast to org.apache.tools.ant.PropertyHelper
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProjectHelper projectHelper0 = ProjectHelper.getProjectHelper();
      assertNotNull(projectHelper0);
      
      ProjectHelper.getContextClassLoader();
      ProjectHelper.getContextClassLoader();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      String string0 = "YI";
      ProjectHelper.getProjectHelper();
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      doReturn(5049).when(attributeList0).getLength();
      doReturn("", (String) null).when(attributeList0).getName(anyInt());
      doReturn("YI").when(attributeList0).getValue(anyInt());
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project1).getElementName(any());
      doReturn((Hashtable) null).when(project1).getProperties();
      doReturn((Object) null).when(project1).getReference(anyString());
      // Undeclared exception!
      try { 
        ProjectHelper.configure("YI", attributeList0, project1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.ProjectHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProjectHelper projectHelper0 = new ProjectHelper();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn("").when(project0).replaceProperties(anyString());
      ProjectHelper.replaceProperties(project0, "");
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn(projectHelper0).when(project1).getReference(anyString());
      String string0 = "g61";
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProjectHelper.configureProject(project1, file0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.tools.ant.ProjectHelper cannot be cast to org.apache.tools.ant.helper.AntXMLContext
         //
         verifyException("org.apache.tools.ant.helper.ProjectHelper2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ProjectHelper.getContextClassLoader();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.addText(project0, (Object) classLoader0, "");
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      String string0 = "#!hi/<5E,;";
      ProjectHelper.storeChild(project1, project1, "", "#!hi/<5E,;");
      ProjectHelper projectHelper0 = new ProjectHelper();
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn("#!hi/<5E,;").when(project2).getReference(anyString());
      Hashtable<String, TaskAdapter> hashtable0 = null;
      // Undeclared exception!
      try { 
        ProjectHelper.replaceProperties(project2, "#!hi/<5E,;", (Hashtable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.tools.ant.PropertyHelper
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProjectHelper projectHelper0 = ProjectHelper.getProjectHelper();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn(projectHelper0).when(project0).getReference(anyString());
      // Undeclared exception!
      try { 
        projectHelper0.parse(project0, project0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.tools.ant.helper.ProjectHelper2 cannot be cast to org.apache.tools.ant.helper.AntXMLContext
         //
         verifyException("org.apache.tools.ant.helper.ProjectHelper2", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'f';
      charArray0[2] = 'C';
      charArray0[3] = 'g';
      charArray0[4] = '6';
      charArray0[5] = '>';
      charArray0[6] = 'P';
      charArray0[7] = '9';
      charArray0[8] = '0';
      try { 
        ProjectHelper.addText(project0, (Object) project0, charArray0, 1, 1);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support nested text data.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProjectHelper.getProjectHelper();
      ProjectHelper.getProjectHelper();
      Vector<TaskAdapter> vector0 = null;
      // Undeclared exception!
      try { 
        ProjectHelper.parsePropertyString("z9E:^u", (Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Project project0 = null;
      Hashtable<Object, ProjectHelper> hashtable0 = null;
      // Undeclared exception!
      try { 
        ProjectHelper.replaceProperties((Project) null, (String) null, (Hashtable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProjectHelper.getProjectHelper();
      ProjectHelper.getContextClassLoader();
      ProjectHelper.getContextClassLoader();
      ProjectHelper projectHelper0 = ProjectHelper.getProjectHelper();
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      projectHelper0.getImportStack();
      // Undeclared exception!
      try { 
        ProjectHelper.configure(projectHelper0, attributeList0, (Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.ProjectHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProjectHelper.parsePropertyString("", (Vector) null, (Vector) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProjectHelper projectHelper0 = ProjectHelper.getProjectHelper();
      Project project0 = null;
      ProjectHelper.getContextClassLoader();
      char[] charArray0 = new char[2];
      char char0 = '\'';
      // Undeclared exception!
      try { 
        ProjectHelper.storeChild((Project) null, (Object) null, projectHelper0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.ProjectHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).replaceProperties(anyString());
      ProjectHelper.replaceProperties(project0, "");
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'F';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = '?';
      charArray0[5] = 'F';
      charArray0[6] = 'q';
      charArray0[7] = 'x';
      ProjectHelper.addText(project1, (Object) project1, charArray0, 0, 0);
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributeList0).getLength();
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.configure("", attributeList0, project2);
      Project project3 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project3).replaceProperties(anyString());
      String string0 = "";
      ProjectHelper.replaceProperties(project3, "");
      ProjectHelper projectHelper0 = new ProjectHelper();
      projectHelper0.getImportStack();
      Project project4 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.addText(project4, (Object) null, (String) null);
      Project project5 = null;
      // Undeclared exception!
      try { 
        ProjectHelper.replaceProperties((Project) null, "T@7y;PjP0cSo#}rv/rA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.ProjectHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProjectHelper projectHelper0 = ProjectHelper.getProjectHelper();
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributeList0).getLength();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.storeChild(project1, project1, "", "");
      ProjectHelper.configure(projectHelper0, attributeList0, project0);
      projectHelper0.getImportStack();
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project2).replaceProperties(anyString());
      String string0 = null;
      ProjectHelper.replaceProperties(project2, (String) null);
      Project project3 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(project3).getReference(anyString());
      // Undeclared exception!
      try { 
        projectHelper0.parse(project3, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.helper.ProjectHelper2", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProjectHelper projectHelper0 = ProjectHelper.getProjectHelper();
      Vector vector0 = projectHelper0.getImportStack();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.storeChild(project0, vector0, "", "");
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project1).replaceProperties(anyString());
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributeList0).getLength();
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.configure("C<z", attributeList0, project2);
      ProjectHelper.replaceProperties(project1, "");
      Project project3 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper projectHelper1 = ProjectHelper.getProjectHelper();
      Project project4 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.addText(project4, (Object) null, (String) null);
      ProjectHelper.storeChild(project3, project3, projectHelper1, "");
      Project project5 = mock(Project.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProjectHelper.addText(project5, (Object) null, "kC5dbWpy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.ProjectHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProjectHelper projectHelper0 = new ProjectHelper();
      Vector vector0 = projectHelper0.getImportStack();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).replaceProperties(anyString());
      ProjectHelper.replaceProperties(project0, "");
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 's';
      charArray0[2] = 'Y';
      charArray0[3] = '1';
      charArray0[4] = 'k';
      // Undeclared exception!
      try { 
        ProjectHelper.addText(project1, (Object) null, charArray0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.ProjectHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = null;
      int int0 = (-421);
      // Undeclared exception!
      try { 
        ProjectHelper.addText(project0, (Object) project0, (char[]) null, (-421), (-421));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = 'w';
      charArray0[2] = 's';
      ProjectHelper.addText(project0, (Object) project0, charArray0, 0, 0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Project project0 = null;
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'L';
      int int0 = 454;
      // Undeclared exception!
      try { 
        ProjectHelper.addText((Project) null, (Object) null, charArray0, 454, 454);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(project0).getReference(anyString());
      String string0 = "K.Nn";
      Hashtable<ProjectHelper, Object> hashtable0 = null;
      ProjectHelper.replaceProperties(project0, "K.Nn", (Hashtable) null);
      ProjectHelper.getProjectHelper();
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(project1).getReference(anyString());
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      // Undeclared exception!
      try { 
        ProjectHelper.configureProject(project1, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProjectHelper projectHelper0 = new ProjectHelper();
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(project0).getElementName(any());
      try { 
        ProjectHelper.addText(project0, (Object) project0, "g@}}");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // null doesn't support nested text data.
         //
         verifyException("org.apache.tools.ant.IntrospectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      ProjectHelper.addText(project0, (Object) project0, "");
      String string1 = "X ;P+hJ*5\"UVjjI9";
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributeList0).getLength();
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
      ProjectHelper.configure("X ;P+hJ*5\"UVjjI9", attributeList0, project1);
      ProjectHelper projectHelper0 = new ProjectHelper();
      Project project2 = mock(Project.class, new ViolatedAssumptionAnswer());
      try { 
        projectHelper0.parse(project2, "");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // ProjectHelper.parse() must be implemented in a helper plugin org.apache.tools.ant.ProjectHelper
         //
         verifyException("org.apache.tools.ant.ProjectHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(project0).getReference(anyString());
      File file0 = null;
      // Undeclared exception!
      try { 
        ProjectHelper.configureProject(project0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tools.ant.helper.ProjectHelper2", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProjectHelper.getProjectHelper();
      AttributeList attributeList0 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      AttributeList attributeList1 = mock(AttributeList.class, new ViolatedAssumptionAnswer());
      Project project0 = mock(Project.class, new ViolatedAssumptionAnswer());
      Project project1 = mock(Project.class, new ViolatedAssumptionAnswer());
  }
}
